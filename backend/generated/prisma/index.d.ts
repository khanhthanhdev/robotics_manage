
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Tournament
 * 
 */
export type Tournament = $Result.DefaultSelection<Prisma.$TournamentPayload>
/**
 * Model Stage
 * 
 */
export type Stage = $Result.DefaultSelection<Prisma.$StagePayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model MatchReferee
 * 
 */
export type MatchReferee = $Result.DefaultSelection<Prisma.$MatchRefereePayload>
/**
 * Model Alliance
 * 
 */
export type Alliance = $Result.DefaultSelection<Prisma.$AlliancePayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamAlliance
 * 
 */
export type TeamAlliance = $Result.DefaultSelection<Prisma.$TeamAlliancePayload>
/**
 * Model TeamStats
 * 
 */
export type TeamStats = $Result.DefaultSelection<Prisma.$TeamStatsPayload>
/**
 * Model Field
 * 
 */
export type Field = $Result.DefaultSelection<Prisma.$FieldPayload>
/**
 * Model FieldDisplay
 * 
 */
export type FieldDisplay = $Result.DefaultSelection<Prisma.$FieldDisplayPayload>
/**
 * Model ScoreConfig
 * 
 */
export type ScoreConfig = $Result.DefaultSelection<Prisma.$ScoreConfigPayload>
/**
 * Model ScoreElement
 * 
 */
export type ScoreElement = $Result.DefaultSelection<Prisma.$ScoreElementPayload>
/**
 * Model BonusCondition
 * 
 */
export type BonusCondition = $Result.DefaultSelection<Prisma.$BonusConditionPayload>
/**
 * Model PenaltyCondition
 * 
 */
export type PenaltyCondition = $Result.DefaultSelection<Prisma.$PenaltyConditionPayload>
/**
 * Model MatchScore
 * 
 */
export type MatchScore = $Result.DefaultSelection<Prisma.$MatchScorePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  HEAD_REFEREE: 'HEAD_REFEREE',
  ALLIANCE_REFEREE: 'ALLIANCE_REFEREE',
  TEAM_LEADER: 'TEAM_LEADER',
  TEAM_MEMBER: 'TEAM_MEMBER',
  COMMON: 'COMMON'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const StageType: {
  SWISS: 'SWISS',
  PLAYOFF: 'PLAYOFF',
  FINAL: 'FINAL'
};

export type StageType = (typeof StageType)[keyof typeof StageType]


export const CardType: {
  NONE: 'NONE',
  YELLOW: 'YELLOW',
  RED: 'RED'
};

export type CardType = (typeof CardType)[keyof typeof CardType]


export const MatchState: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  ERROR: 'ERROR'
};

export type MatchState = (typeof MatchState)[keyof typeof MatchState]


export const DisplayState: {
  TEAM_LIST: 'TEAM_LIST',
  RANKING: 'RANKING',
  SCHEDULE: 'SCHEDULE',
  LIVE: 'LIVE',
  FINAL_RESULTS: 'FINAL_RESULTS',
  FINISHED: 'FINISHED',
  CUSTOM_MESSAGE: 'CUSTOM_MESSAGE'
};

export type DisplayState = (typeof DisplayState)[keyof typeof DisplayState]


export const MatchType: {
  FULL: 'FULL',
  TELEOP_ENDGAME: 'TELEOP_ENDGAME'
};

export type MatchType = (typeof MatchType)[keyof typeof MatchType]


export const AllianceColor: {
  RED: 'RED',
  BLUE: 'BLUE'
};

export type AllianceColor = (typeof AllianceColor)[keyof typeof AllianceColor]


export const MatchRoundType: {
  QUALIFICATION: 'QUALIFICATION',
  SWISS: 'SWISS',
  PLAYOFF: 'PLAYOFF',
  FINAL: 'FINAL'
};

export type MatchRoundType = (typeof MatchRoundType)[keyof typeof MatchRoundType]


export const TimerType: {
  AUTO: 'AUTO',
  TELEOP: 'TELEOP',
  ENDGAME: 'ENDGAME',
  FULL_MATCH: 'FULL_MATCH'
};

export type TimerType = (typeof TimerType)[keyof typeof TimerType]


export const MatchErrorType: {
  ROBOT_FAILURE: 'ROBOT_FAILURE',
  FIELD_FAULT: 'FIELD_FAULT',
  OTHER: 'OTHER'
};

export type MatchErrorType = (typeof MatchErrorType)[keyof typeof MatchErrorType]


export const ElementType: {
  COUNTER: 'COUNTER',
  BOOLEAN: 'BOOLEAN',
  TIMER: 'TIMER'
};

export type ElementType = (typeof ElementType)[keyof typeof ElementType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type StageType = $Enums.StageType

export const StageType: typeof $Enums.StageType

export type CardType = $Enums.CardType

export const CardType: typeof $Enums.CardType

export type MatchState = $Enums.MatchState

export const MatchState: typeof $Enums.MatchState

export type DisplayState = $Enums.DisplayState

export const DisplayState: typeof $Enums.DisplayState

export type MatchType = $Enums.MatchType

export const MatchType: typeof $Enums.MatchType

export type AllianceColor = $Enums.AllianceColor

export const AllianceColor: typeof $Enums.AllianceColor

export type MatchRoundType = $Enums.MatchRoundType

export const MatchRoundType: typeof $Enums.MatchRoundType

export type TimerType = $Enums.TimerType

export const TimerType: typeof $Enums.TimerType

export type MatchErrorType = $Enums.MatchErrorType

export const MatchErrorType: typeof $Enums.MatchErrorType

export type ElementType = $Enums.ElementType

export const ElementType: typeof $Enums.ElementType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tournament`: Exposes CRUD operations for the **Tournament** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tournaments
    * const tournaments = await prisma.tournament.findMany()
    * ```
    */
  get tournament(): Prisma.TournamentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stage`: Exposes CRUD operations for the **Stage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stages
    * const stages = await prisma.stage.findMany()
    * ```
    */
  get stage(): Prisma.StageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchReferee`: Exposes CRUD operations for the **MatchReferee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchReferees
    * const matchReferees = await prisma.matchReferee.findMany()
    * ```
    */
  get matchReferee(): Prisma.MatchRefereeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alliance`: Exposes CRUD operations for the **Alliance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alliances
    * const alliances = await prisma.alliance.findMany()
    * ```
    */
  get alliance(): Prisma.AllianceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamAlliance`: Exposes CRUD operations for the **TeamAlliance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamAlliances
    * const teamAlliances = await prisma.teamAlliance.findMany()
    * ```
    */
  get teamAlliance(): Prisma.TeamAllianceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamStats`: Exposes CRUD operations for the **TeamStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamStats
    * const teamStats = await prisma.teamStats.findMany()
    * ```
    */
  get teamStats(): Prisma.TeamStatsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.field`: Exposes CRUD operations for the **Field** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fields
    * const fields = await prisma.field.findMany()
    * ```
    */
  get field(): Prisma.FieldDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fieldDisplay`: Exposes CRUD operations for the **FieldDisplay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FieldDisplays
    * const fieldDisplays = await prisma.fieldDisplay.findMany()
    * ```
    */
  get fieldDisplay(): Prisma.FieldDisplayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scoreConfig`: Exposes CRUD operations for the **ScoreConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreConfigs
    * const scoreConfigs = await prisma.scoreConfig.findMany()
    * ```
    */
  get scoreConfig(): Prisma.ScoreConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scoreElement`: Exposes CRUD operations for the **ScoreElement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreElements
    * const scoreElements = await prisma.scoreElement.findMany()
    * ```
    */
  get scoreElement(): Prisma.ScoreElementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bonusCondition`: Exposes CRUD operations for the **BonusCondition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BonusConditions
    * const bonusConditions = await prisma.bonusCondition.findMany()
    * ```
    */
  get bonusCondition(): Prisma.BonusConditionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.penaltyCondition`: Exposes CRUD operations for the **PenaltyCondition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PenaltyConditions
    * const penaltyConditions = await prisma.penaltyCondition.findMany()
    * ```
    */
  get penaltyCondition(): Prisma.PenaltyConditionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.matchScore`: Exposes CRUD operations for the **MatchScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchScores
    * const matchScores = await prisma.matchScore.findMany()
    * ```
    */
  get matchScore(): Prisma.MatchScoreDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Tournament: 'Tournament',
    Stage: 'Stage',
    Match: 'Match',
    MatchReferee: 'MatchReferee',
    Alliance: 'Alliance',
    Team: 'Team',
    TeamAlliance: 'TeamAlliance',
    TeamStats: 'TeamStats',
    Field: 'Field',
    FieldDisplay: 'FieldDisplay',
    ScoreConfig: 'ScoreConfig',
    ScoreElement: 'ScoreElement',
    BonusCondition: 'BonusCondition',
    PenaltyCondition: 'PenaltyCondition',
    MatchScore: 'MatchScore'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "tournament" | "stage" | "match" | "matchReferee" | "alliance" | "team" | "teamAlliance" | "teamStats" | "field" | "fieldDisplay" | "scoreConfig" | "scoreElement" | "bonusCondition" | "penaltyCondition" | "matchScore"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Tournament: {
        payload: Prisma.$TournamentPayload<ExtArgs>
        fields: Prisma.TournamentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TournamentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TournamentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findFirst: {
            args: Prisma.TournamentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TournamentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          findMany: {
            args: Prisma.TournamentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          create: {
            args: Prisma.TournamentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          createMany: {
            args: Prisma.TournamentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TournamentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          delete: {
            args: Prisma.TournamentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          update: {
            args: Prisma.TournamentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          deleteMany: {
            args: Prisma.TournamentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TournamentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TournamentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>[]
          }
          upsert: {
            args: Prisma.TournamentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TournamentPayload>
          }
          aggregate: {
            args: Prisma.TournamentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTournament>
          }
          groupBy: {
            args: Prisma.TournamentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TournamentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TournamentCountArgs<ExtArgs>
            result: $Utils.Optional<TournamentCountAggregateOutputType> | number
          }
        }
      }
      Stage: {
        payload: Prisma.$StagePayload<ExtArgs>
        fields: Prisma.StageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findFirst: {
            args: Prisma.StageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findMany: {
            args: Prisma.StageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          create: {
            args: Prisma.StageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          createMany: {
            args: Prisma.StageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          delete: {
            args: Prisma.StageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          update: {
            args: Prisma.StageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          deleteMany: {
            args: Prisma.StageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          upsert: {
            args: Prisma.StageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          aggregate: {
            args: Prisma.StageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStage>
          }
          groupBy: {
            args: Prisma.StageGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageCountArgs<ExtArgs>
            result: $Utils.Optional<StageCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      MatchReferee: {
        payload: Prisma.$MatchRefereePayload<ExtArgs>
        fields: Prisma.MatchRefereeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchRefereeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchRefereeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          findFirst: {
            args: Prisma.MatchRefereeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchRefereeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          findMany: {
            args: Prisma.MatchRefereeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>[]
          }
          create: {
            args: Prisma.MatchRefereeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          createMany: {
            args: Prisma.MatchRefereeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchRefereeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>[]
          }
          delete: {
            args: Prisma.MatchRefereeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          update: {
            args: Prisma.MatchRefereeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          deleteMany: {
            args: Prisma.MatchRefereeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchRefereeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchRefereeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>[]
          }
          upsert: {
            args: Prisma.MatchRefereeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchRefereePayload>
          }
          aggregate: {
            args: Prisma.MatchRefereeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchReferee>
          }
          groupBy: {
            args: Prisma.MatchRefereeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchRefereeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchRefereeCountArgs<ExtArgs>
            result: $Utils.Optional<MatchRefereeCountAggregateOutputType> | number
          }
        }
      }
      Alliance: {
        payload: Prisma.$AlliancePayload<ExtArgs>
        fields: Prisma.AllianceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AllianceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AllianceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          findFirst: {
            args: Prisma.AllianceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AllianceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          findMany: {
            args: Prisma.AllianceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>[]
          }
          create: {
            args: Prisma.AllianceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          createMany: {
            args: Prisma.AllianceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AllianceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>[]
          }
          delete: {
            args: Prisma.AllianceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          update: {
            args: Prisma.AllianceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          deleteMany: {
            args: Prisma.AllianceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AllianceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AllianceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>[]
          }
          upsert: {
            args: Prisma.AllianceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlliancePayload>
          }
          aggregate: {
            args: Prisma.AllianceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlliance>
          }
          groupBy: {
            args: Prisma.AllianceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllianceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AllianceCountArgs<ExtArgs>
            result: $Utils.Optional<AllianceCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamAlliance: {
        payload: Prisma.$TeamAlliancePayload<ExtArgs>
        fields: Prisma.TeamAllianceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamAllianceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamAllianceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          findFirst: {
            args: Prisma.TeamAllianceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamAllianceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          findMany: {
            args: Prisma.TeamAllianceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>[]
          }
          create: {
            args: Prisma.TeamAllianceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          createMany: {
            args: Prisma.TeamAllianceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamAllianceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>[]
          }
          delete: {
            args: Prisma.TeamAllianceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          update: {
            args: Prisma.TeamAllianceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          deleteMany: {
            args: Prisma.TeamAllianceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamAllianceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamAllianceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>[]
          }
          upsert: {
            args: Prisma.TeamAllianceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamAlliancePayload>
          }
          aggregate: {
            args: Prisma.TeamAllianceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamAlliance>
          }
          groupBy: {
            args: Prisma.TeamAllianceGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamAllianceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamAllianceCountArgs<ExtArgs>
            result: $Utils.Optional<TeamAllianceCountAggregateOutputType> | number
          }
        }
      }
      TeamStats: {
        payload: Prisma.$TeamStatsPayload<ExtArgs>
        fields: Prisma.TeamStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          findFirst: {
            args: Prisma.TeamStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          findMany: {
            args: Prisma.TeamStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>[]
          }
          create: {
            args: Prisma.TeamStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          createMany: {
            args: Prisma.TeamStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>[]
          }
          delete: {
            args: Prisma.TeamStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          update: {
            args: Prisma.TeamStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          deleteMany: {
            args: Prisma.TeamStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamStatsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>[]
          }
          upsert: {
            args: Prisma.TeamStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamStatsPayload>
          }
          aggregate: {
            args: Prisma.TeamStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamStats>
          }
          groupBy: {
            args: Prisma.TeamStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamStatsCountArgs<ExtArgs>
            result: $Utils.Optional<TeamStatsCountAggregateOutputType> | number
          }
        }
      }
      Field: {
        payload: Prisma.$FieldPayload<ExtArgs>
        fields: Prisma.FieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findFirst: {
            args: Prisma.FieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          findMany: {
            args: Prisma.FieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          create: {
            args: Prisma.FieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          createMany: {
            args: Prisma.FieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          delete: {
            args: Prisma.FieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          update: {
            args: Prisma.FieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          deleteMany: {
            args: Prisma.FieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FieldUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>[]
          }
          upsert: {
            args: Prisma.FieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldPayload>
          }
          aggregate: {
            args: Prisma.FieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateField>
          }
          groupBy: {
            args: Prisma.FieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldCountArgs<ExtArgs>
            result: $Utils.Optional<FieldCountAggregateOutputType> | number
          }
        }
      }
      FieldDisplay: {
        payload: Prisma.$FieldDisplayPayload<ExtArgs>
        fields: Prisma.FieldDisplayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FieldDisplayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FieldDisplayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          findFirst: {
            args: Prisma.FieldDisplayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FieldDisplayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          findMany: {
            args: Prisma.FieldDisplayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>[]
          }
          create: {
            args: Prisma.FieldDisplayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          createMany: {
            args: Prisma.FieldDisplayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FieldDisplayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>[]
          }
          delete: {
            args: Prisma.FieldDisplayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          update: {
            args: Prisma.FieldDisplayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          deleteMany: {
            args: Prisma.FieldDisplayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FieldDisplayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FieldDisplayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>[]
          }
          upsert: {
            args: Prisma.FieldDisplayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FieldDisplayPayload>
          }
          aggregate: {
            args: Prisma.FieldDisplayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFieldDisplay>
          }
          groupBy: {
            args: Prisma.FieldDisplayGroupByArgs<ExtArgs>
            result: $Utils.Optional<FieldDisplayGroupByOutputType>[]
          }
          count: {
            args: Prisma.FieldDisplayCountArgs<ExtArgs>
            result: $Utils.Optional<FieldDisplayCountAggregateOutputType> | number
          }
        }
      }
      ScoreConfig: {
        payload: Prisma.$ScoreConfigPayload<ExtArgs>
        fields: Prisma.ScoreConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          findFirst: {
            args: Prisma.ScoreConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          findMany: {
            args: Prisma.ScoreConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>[]
          }
          create: {
            args: Prisma.ScoreConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          createMany: {
            args: Prisma.ScoreConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>[]
          }
          delete: {
            args: Prisma.ScoreConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          update: {
            args: Prisma.ScoreConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          deleteMany: {
            args: Prisma.ScoreConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>[]
          }
          upsert: {
            args: Prisma.ScoreConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreConfigPayload>
          }
          aggregate: {
            args: Prisma.ScoreConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreConfig>
          }
          groupBy: {
            args: Prisma.ScoreConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreConfigCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreConfigCountAggregateOutputType> | number
          }
        }
      }
      ScoreElement: {
        payload: Prisma.$ScoreElementPayload<ExtArgs>
        fields: Prisma.ScoreElementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreElementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreElementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          findFirst: {
            args: Prisma.ScoreElementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreElementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          findMany: {
            args: Prisma.ScoreElementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>[]
          }
          create: {
            args: Prisma.ScoreElementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          createMany: {
            args: Prisma.ScoreElementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreElementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>[]
          }
          delete: {
            args: Prisma.ScoreElementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          update: {
            args: Prisma.ScoreElementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          deleteMany: {
            args: Prisma.ScoreElementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreElementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreElementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>[]
          }
          upsert: {
            args: Prisma.ScoreElementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreElementPayload>
          }
          aggregate: {
            args: Prisma.ScoreElementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreElement>
          }
          groupBy: {
            args: Prisma.ScoreElementGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreElementGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreElementCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreElementCountAggregateOutputType> | number
          }
        }
      }
      BonusCondition: {
        payload: Prisma.$BonusConditionPayload<ExtArgs>
        fields: Prisma.BonusConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BonusConditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BonusConditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          findFirst: {
            args: Prisma.BonusConditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BonusConditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          findMany: {
            args: Prisma.BonusConditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>[]
          }
          create: {
            args: Prisma.BonusConditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          createMany: {
            args: Prisma.BonusConditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BonusConditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>[]
          }
          delete: {
            args: Prisma.BonusConditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          update: {
            args: Prisma.BonusConditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          deleteMany: {
            args: Prisma.BonusConditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BonusConditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BonusConditionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>[]
          }
          upsert: {
            args: Prisma.BonusConditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BonusConditionPayload>
          }
          aggregate: {
            args: Prisma.BonusConditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBonusCondition>
          }
          groupBy: {
            args: Prisma.BonusConditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<BonusConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.BonusConditionCountArgs<ExtArgs>
            result: $Utils.Optional<BonusConditionCountAggregateOutputType> | number
          }
        }
      }
      PenaltyCondition: {
        payload: Prisma.$PenaltyConditionPayload<ExtArgs>
        fields: Prisma.PenaltyConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PenaltyConditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PenaltyConditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          findFirst: {
            args: Prisma.PenaltyConditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PenaltyConditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          findMany: {
            args: Prisma.PenaltyConditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>[]
          }
          create: {
            args: Prisma.PenaltyConditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          createMany: {
            args: Prisma.PenaltyConditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PenaltyConditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>[]
          }
          delete: {
            args: Prisma.PenaltyConditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          update: {
            args: Prisma.PenaltyConditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          deleteMany: {
            args: Prisma.PenaltyConditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PenaltyConditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PenaltyConditionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>[]
          }
          upsert: {
            args: Prisma.PenaltyConditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PenaltyConditionPayload>
          }
          aggregate: {
            args: Prisma.PenaltyConditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePenaltyCondition>
          }
          groupBy: {
            args: Prisma.PenaltyConditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PenaltyConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PenaltyConditionCountArgs<ExtArgs>
            result: $Utils.Optional<PenaltyConditionCountAggregateOutputType> | number
          }
        }
      }
      MatchScore: {
        payload: Prisma.$MatchScorePayload<ExtArgs>
        fields: Prisma.MatchScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          findFirst: {
            args: Prisma.MatchScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          findMany: {
            args: Prisma.MatchScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>[]
          }
          create: {
            args: Prisma.MatchScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          createMany: {
            args: Prisma.MatchScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>[]
          }
          delete: {
            args: Prisma.MatchScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          update: {
            args: Prisma.MatchScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          deleteMany: {
            args: Prisma.MatchScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>[]
          }
          upsert: {
            args: Prisma.MatchScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchScorePayload>
          }
          aggregate: {
            args: Prisma.MatchScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchScore>
          }
          groupBy: {
            args: Prisma.MatchScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchScoreCountArgs<ExtArgs>
            result: $Utils.Optional<MatchScoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    tournament?: TournamentOmit
    stage?: StageOmit
    match?: MatchOmit
    matchReferee?: MatchRefereeOmit
    alliance?: AllianceOmit
    team?: TeamOmit
    teamAlliance?: TeamAllianceOmit
    teamStats?: TeamStatsOmit
    field?: FieldOmit
    fieldDisplay?: FieldDisplayOmit
    scoreConfig?: ScoreConfigOmit
    scoreElement?: ScoreElementOmit
    bonusCondition?: BonusConditionOmit
    penaltyCondition?: PenaltyConditionOmit
    matchScore?: MatchScoreOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdUsers: number
    tournaments: number
    scoredMatches: number
    matchReferees: number
    fieldDisplays: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdUsers?: boolean | UserCountOutputTypeCountCreatedUsersArgs
    tournaments?: boolean | UserCountOutputTypeCountTournamentsArgs
    scoredMatches?: boolean | UserCountOutputTypeCountScoredMatchesArgs
    matchReferees?: boolean | UserCountOutputTypeCountMatchRefereesArgs
    fieldDisplays?: boolean | UserCountOutputTypeCountFieldDisplaysArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScoredMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchRefereeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFieldDisplaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldDisplayWhereInput
  }


  /**
   * Count Type TournamentCountOutputType
   */

  export type TournamentCountOutputType = {
    stages: number
    teams: number
    teamStats: number
    fields: number
    scoreConfigs: number
  }

  export type TournamentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | TournamentCountOutputTypeCountStagesArgs
    teams?: boolean | TournamentCountOutputTypeCountTeamsArgs
    teamStats?: boolean | TournamentCountOutputTypeCountTeamStatsArgs
    fields?: boolean | TournamentCountOutputTypeCountFieldsArgs
    scoreConfigs?: boolean | TournamentCountOutputTypeCountScoreConfigsArgs
  }

  // Custom InputTypes
  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TournamentCountOutputType
     */
    select?: TournamentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountTeamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountTeamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamStatsWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
  }

  /**
   * TournamentCountOutputType without action
   */
  export type TournamentCountOutputTypeCountScoreConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreConfigWhereInput
  }


  /**
   * Count Type StageCountOutputType
   */

  export type StageCountOutputType = {
    matches: number
    teamStats: number
  }

  export type StageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | StageCountOutputTypeCountMatchesArgs
    teamStats?: boolean | StageCountOutputTypeCountTeamStatsArgs
  }

  // Custom InputTypes
  /**
   * StageCountOutputType without action
   */
  export type StageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageCountOutputType
     */
    select?: StageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StageCountOutputType without action
   */
  export type StageCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * StageCountOutputType without action
   */
  export type StageCountOutputTypeCountTeamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamStatsWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    alliances: number
    referees: number
    matchScores: number
    fieldDisplays: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alliances?: boolean | MatchCountOutputTypeCountAlliancesArgs
    referees?: boolean | MatchCountOutputTypeCountRefereesArgs
    matchScores?: boolean | MatchCountOutputTypeCountMatchScoresArgs
    fieldDisplays?: boolean | MatchCountOutputTypeCountFieldDisplaysArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchRefereeWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountMatchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchScoreWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountFieldDisplaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldDisplayWhereInput
  }


  /**
   * Count Type AllianceCountOutputType
   */

  export type AllianceCountOutputType = {
    teamAlliances: number
    matchScores: number
  }

  export type AllianceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamAlliances?: boolean | AllianceCountOutputTypeCountTeamAlliancesArgs
    matchScores?: boolean | AllianceCountOutputTypeCountMatchScoresArgs
  }

  // Custom InputTypes
  /**
   * AllianceCountOutputType without action
   */
  export type AllianceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AllianceCountOutputType
     */
    select?: AllianceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AllianceCountOutputType without action
   */
  export type AllianceCountOutputTypeCountTeamAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamAllianceWhereInput
  }

  /**
   * AllianceCountOutputType without action
   */
  export type AllianceCountOutputTypeCountMatchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchScoreWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    teamAlliances: number
    teamStats: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teamAlliances?: boolean | TeamCountOutputTypeCountTeamAlliancesArgs
    teamStats?: boolean | TeamCountOutputTypeCountTeamStatsArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTeamAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamAllianceWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountTeamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamStatsWhereInput
  }


  /**
   * Count Type FieldCountOutputType
   */

  export type FieldCountOutputType = {
    matches: number
  }

  export type FieldCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matches?: boolean | FieldCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldCountOutputType
     */
    select?: FieldCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FieldCountOutputType without action
   */
  export type FieldCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Count Type ScoreConfigCountOutputType
   */

  export type ScoreConfigCountOutputType = {
    scoreElements: number
    bonusConditions: number
    penaltyConditions: number
  }

  export type ScoreConfigCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreElements?: boolean | ScoreConfigCountOutputTypeCountScoreElementsArgs
    bonusConditions?: boolean | ScoreConfigCountOutputTypeCountBonusConditionsArgs
    penaltyConditions?: boolean | ScoreConfigCountOutputTypeCountPenaltyConditionsArgs
  }

  // Custom InputTypes
  /**
   * ScoreConfigCountOutputType without action
   */
  export type ScoreConfigCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfigCountOutputType
     */
    select?: ScoreConfigCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScoreConfigCountOutputType without action
   */
  export type ScoreConfigCountOutputTypeCountScoreElementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreElementWhereInput
  }

  /**
   * ScoreConfigCountOutputType without action
   */
  export type ScoreConfigCountOutputTypeCountBonusConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonusConditionWhereInput
  }

  /**
   * ScoreConfigCountOutputType without action
   */
  export type ScoreConfigCountOutputTypeCountPenaltyConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PenaltyConditionWhereInput
  }


  /**
   * Count Type ScoreElementCountOutputType
   */

  export type ScoreElementCountOutputType = {
    matchScores: number
  }

  export type ScoreElementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matchScores?: boolean | ScoreElementCountOutputTypeCountMatchScoresArgs
  }

  // Custom InputTypes
  /**
   * ScoreElementCountOutputType without action
   */
  export type ScoreElementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElementCountOutputType
     */
    select?: ScoreElementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScoreElementCountOutputType without action
   */
  export type ScoreElementCountOutputTypeCountMatchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchScoreWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
    email: string | null
    gender: boolean | null
    DateOfBirth: Date | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
    email: string | null
    gender: boolean | null
    DateOfBirth: Date | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    email: number
    gender: number
    DateOfBirth: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    email?: true
    gender?: true
    DateOfBirth?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    email?: true
    gender?: true
    DateOfBirth?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    email?: true
    gender?: true
    DateOfBirth?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    role: $Enums.UserRole
    email: string | null
    gender: boolean | null
    DateOfBirth: Date | null
    phoneNumber: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    email?: boolean
    gender?: boolean
    DateOfBirth?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    tournaments?: boolean | User$tournamentsArgs<ExtArgs>
    scoredMatches?: boolean | User$scoredMatchesArgs<ExtArgs>
    matchReferees?: boolean | User$matchRefereesArgs<ExtArgs>
    fieldDisplays?: boolean | User$fieldDisplaysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    email?: boolean
    gender?: boolean
    DateOfBirth?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    email?: boolean
    gender?: boolean
    DateOfBirth?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    email?: boolean
    gender?: boolean
    DateOfBirth?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "role" | "email" | "gender" | "DateOfBirth" | "phoneNumber" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    tournaments?: boolean | User$tournamentsArgs<ExtArgs>
    scoredMatches?: boolean | User$scoredMatchesArgs<ExtArgs>
    matchReferees?: boolean | User$matchRefereesArgs<ExtArgs>
    fieldDisplays?: boolean | User$fieldDisplaysArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | User$createdByArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      createdUsers: Prisma.$UserPayload<ExtArgs>[]
      tournaments: Prisma.$TournamentPayload<ExtArgs>[]
      scoredMatches: Prisma.$MatchPayload<ExtArgs>[]
      matchReferees: Prisma.$MatchRefereePayload<ExtArgs>[]
      fieldDisplays: Prisma.$FieldDisplayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      role: $Enums.UserRole
      email: string | null
      gender: boolean | null
      DateOfBirth: Date | null
      phoneNumber: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends User$createdByArgs<ExtArgs> = {}>(args?: Subset<T, User$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdUsers<T extends User$createdUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tournaments<T extends User$tournamentsArgs<ExtArgs> = {}>(args?: Subset<T, User$tournamentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scoredMatches<T extends User$scoredMatchesArgs<ExtArgs> = {}>(args?: Subset<T, User$scoredMatchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchReferees<T extends User$matchRefereesArgs<ExtArgs> = {}>(args?: Subset<T, User$matchRefereesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fieldDisplays<T extends User$fieldDisplaysArgs<ExtArgs> = {}>(args?: Subset<T, User$fieldDisplaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly email: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'Boolean'>
    readonly DateOfBirth: FieldRef<"User", 'DateTime'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly createdById: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdBy
   */
  export type User$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.createdUsers
   */
  export type User$createdUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.tournaments
   */
  export type User$tournamentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    cursor?: TournamentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * User.scoredMatches
   */
  export type User$scoredMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.matchReferees
   */
  export type User$matchRefereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    where?: MatchRefereeWhereInput
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    cursor?: MatchRefereeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchRefereeScalarFieldEnum | MatchRefereeScalarFieldEnum[]
  }

  /**
   * User.fieldDisplays
   */
  export type User$fieldDisplaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    where?: FieldDisplayWhereInput
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    cursor?: FieldDisplayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldDisplayScalarFieldEnum | FieldDisplayScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Tournament
   */

  export type AggregateTournament = {
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  export type TournamentAvgAggregateOutputType = {
    numberOfFields: number | null
  }

  export type TournamentSumAggregateOutputType = {
    numberOfFields: number | null
  }

  export type TournamentMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: string | null
    numberOfFields: number | null
  }

  export type TournamentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    adminId: string | null
    numberOfFields: number | null
  }

  export type TournamentCountAggregateOutputType = {
    id: number
    name: number
    description: number
    startDate: number
    endDate: number
    createdAt: number
    updatedAt: number
    adminId: number
    numberOfFields: number
    _all: number
  }


  export type TournamentAvgAggregateInputType = {
    numberOfFields?: true
  }

  export type TournamentSumAggregateInputType = {
    numberOfFields?: true
  }

  export type TournamentMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    numberOfFields?: true
  }

  export type TournamentMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    numberOfFields?: true
  }

  export type TournamentCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    adminId?: true
    numberOfFields?: true
    _all?: true
  }

  export type TournamentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournament to aggregate.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tournaments
    **/
    _count?: true | TournamentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TournamentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TournamentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TournamentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TournamentMaxAggregateInputType
  }

  export type GetTournamentAggregateType<T extends TournamentAggregateArgs> = {
        [P in keyof T & keyof AggregateTournament]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTournament[P]>
      : GetScalarType<T[P], AggregateTournament[P]>
  }




  export type TournamentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TournamentWhereInput
    orderBy?: TournamentOrderByWithAggregationInput | TournamentOrderByWithAggregationInput[]
    by: TournamentScalarFieldEnum[] | TournamentScalarFieldEnum
    having?: TournamentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TournamentCountAggregateInputType | true
    _avg?: TournamentAvgAggregateInputType
    _sum?: TournamentSumAggregateInputType
    _min?: TournamentMinAggregateInputType
    _max?: TournamentMaxAggregateInputType
  }

  export type TournamentGroupByOutputType = {
    id: string
    name: string
    description: string | null
    startDate: Date
    endDate: Date
    createdAt: Date
    updatedAt: Date
    adminId: string
    numberOfFields: number
    _count: TournamentCountAggregateOutputType | null
    _avg: TournamentAvgAggregateOutputType | null
    _sum: TournamentSumAggregateOutputType | null
    _min: TournamentMinAggregateOutputType | null
    _max: TournamentMaxAggregateOutputType | null
  }

  type GetTournamentGroupByPayload<T extends TournamentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TournamentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TournamentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TournamentGroupByOutputType[P]>
            : GetScalarType<T[P], TournamentGroupByOutputType[P]>
        }
      >
    >


  export type TournamentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    numberOfFields?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
    stages?: boolean | Tournament$stagesArgs<ExtArgs>
    teams?: boolean | Tournament$teamsArgs<ExtArgs>
    teamStats?: boolean | Tournament$teamStatsArgs<ExtArgs>
    fields?: boolean | Tournament$fieldsArgs<ExtArgs>
    scoreConfigs?: boolean | Tournament$scoreConfigsArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    numberOfFields?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    numberOfFields?: boolean
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tournament"]>

  export type TournamentSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminId?: boolean
    numberOfFields?: boolean
  }

  export type TournamentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "startDate" | "endDate" | "createdAt" | "updatedAt" | "adminId" | "numberOfFields", ExtArgs["result"]["tournament"]>
  export type TournamentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
    stages?: boolean | Tournament$stagesArgs<ExtArgs>
    teams?: boolean | Tournament$teamsArgs<ExtArgs>
    teamStats?: boolean | Tournament$teamStatsArgs<ExtArgs>
    fields?: boolean | Tournament$fieldsArgs<ExtArgs>
    scoreConfigs?: boolean | Tournament$scoreConfigsArgs<ExtArgs>
    _count?: boolean | TournamentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TournamentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TournamentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tournament"
    objects: {
      admin: Prisma.$UserPayload<ExtArgs>
      stages: Prisma.$StagePayload<ExtArgs>[]
      teams: Prisma.$TeamPayload<ExtArgs>[]
      teamStats: Prisma.$TeamStatsPayload<ExtArgs>[]
      fields: Prisma.$FieldPayload<ExtArgs>[]
      scoreConfigs: Prisma.$ScoreConfigPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      startDate: Date
      endDate: Date
      createdAt: Date
      updatedAt: Date
      adminId: string
      numberOfFields: number
    }, ExtArgs["result"]["tournament"]>
    composites: {}
  }

  type TournamentGetPayload<S extends boolean | null | undefined | TournamentDefaultArgs> = $Result.GetResult<Prisma.$TournamentPayload, S>

  type TournamentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TournamentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TournamentCountAggregateInputType | true
    }

  export interface TournamentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tournament'], meta: { name: 'Tournament' } }
    /**
     * Find zero or one Tournament that matches the filter.
     * @param {TournamentFindUniqueArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TournamentFindUniqueArgs>(args: SelectSubset<T, TournamentFindUniqueArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tournament that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TournamentFindUniqueOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TournamentFindUniqueOrThrowArgs>(args: SelectSubset<T, TournamentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tournament that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TournamentFindFirstArgs>(args?: SelectSubset<T, TournamentFindFirstArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tournament that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindFirstOrThrowArgs} args - Arguments to find a Tournament
     * @example
     * // Get one Tournament
     * const tournament = await prisma.tournament.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TournamentFindFirstOrThrowArgs>(args?: SelectSubset<T, TournamentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tournaments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tournaments
     * const tournaments = await prisma.tournament.findMany()
     * 
     * // Get first 10 Tournaments
     * const tournaments = await prisma.tournament.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tournamentWithIdOnly = await prisma.tournament.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TournamentFindManyArgs>(args?: SelectSubset<T, TournamentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tournament.
     * @param {TournamentCreateArgs} args - Arguments to create a Tournament.
     * @example
     * // Create one Tournament
     * const Tournament = await prisma.tournament.create({
     *   data: {
     *     // ... data to create a Tournament
     *   }
     * })
     * 
     */
    create<T extends TournamentCreateArgs>(args: SelectSubset<T, TournamentCreateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tournaments.
     * @param {TournamentCreateManyArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TournamentCreateManyArgs>(args?: SelectSubset<T, TournamentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tournaments and returns the data saved in the database.
     * @param {TournamentCreateManyAndReturnArgs} args - Arguments to create many Tournaments.
     * @example
     * // Create many Tournaments
     * const tournament = await prisma.tournament.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TournamentCreateManyAndReturnArgs>(args?: SelectSubset<T, TournamentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tournament.
     * @param {TournamentDeleteArgs} args - Arguments to delete one Tournament.
     * @example
     * // Delete one Tournament
     * const Tournament = await prisma.tournament.delete({
     *   where: {
     *     // ... filter to delete one Tournament
     *   }
     * })
     * 
     */
    delete<T extends TournamentDeleteArgs>(args: SelectSubset<T, TournamentDeleteArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tournament.
     * @param {TournamentUpdateArgs} args - Arguments to update one Tournament.
     * @example
     * // Update one Tournament
     * const tournament = await prisma.tournament.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TournamentUpdateArgs>(args: SelectSubset<T, TournamentUpdateArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tournaments.
     * @param {TournamentDeleteManyArgs} args - Arguments to filter Tournaments to delete.
     * @example
     * // Delete a few Tournaments
     * const { count } = await prisma.tournament.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TournamentDeleteManyArgs>(args?: SelectSubset<T, TournamentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TournamentUpdateManyArgs>(args: SelectSubset<T, TournamentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tournaments and returns the data updated in the database.
     * @param {TournamentUpdateManyAndReturnArgs} args - Arguments to update many Tournaments.
     * @example
     * // Update many Tournaments
     * const tournament = await prisma.tournament.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tournaments and only return the `id`
     * const tournamentWithIdOnly = await prisma.tournament.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TournamentUpdateManyAndReturnArgs>(args: SelectSubset<T, TournamentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tournament.
     * @param {TournamentUpsertArgs} args - Arguments to update or create a Tournament.
     * @example
     * // Update or create a Tournament
     * const tournament = await prisma.tournament.upsert({
     *   create: {
     *     // ... data to create a Tournament
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tournament we want to update
     *   }
     * })
     */
    upsert<T extends TournamentUpsertArgs>(args: SelectSubset<T, TournamentUpsertArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tournaments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentCountArgs} args - Arguments to filter Tournaments to count.
     * @example
     * // Count the number of Tournaments
     * const count = await prisma.tournament.count({
     *   where: {
     *     // ... the filter for the Tournaments we want to count
     *   }
     * })
    **/
    count<T extends TournamentCountArgs>(
      args?: Subset<T, TournamentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TournamentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TournamentAggregateArgs>(args: Subset<T, TournamentAggregateArgs>): Prisma.PrismaPromise<GetTournamentAggregateType<T>>

    /**
     * Group by Tournament.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TournamentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TournamentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TournamentGroupByArgs['orderBy'] }
        : { orderBy?: TournamentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TournamentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTournamentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tournament model
   */
  readonly fields: TournamentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tournament.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TournamentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stages<T extends Tournament$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teams<T extends Tournament$teamsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$teamsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamStats<T extends Tournament$teamStatsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$teamStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fields<T extends Tournament$fieldsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$fieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scoreConfigs<T extends Tournament$scoreConfigsArgs<ExtArgs> = {}>(args?: Subset<T, Tournament$scoreConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tournament model
   */
  interface TournamentFieldRefs {
    readonly id: FieldRef<"Tournament", 'String'>
    readonly name: FieldRef<"Tournament", 'String'>
    readonly description: FieldRef<"Tournament", 'String'>
    readonly startDate: FieldRef<"Tournament", 'DateTime'>
    readonly endDate: FieldRef<"Tournament", 'DateTime'>
    readonly createdAt: FieldRef<"Tournament", 'DateTime'>
    readonly updatedAt: FieldRef<"Tournament", 'DateTime'>
    readonly adminId: FieldRef<"Tournament", 'String'>
    readonly numberOfFields: FieldRef<"Tournament", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tournament findUnique
   */
  export type TournamentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findUniqueOrThrow
   */
  export type TournamentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament findFirst
   */
  export type TournamentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findFirstOrThrow
   */
  export type TournamentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournament to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tournaments.
     */
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament findMany
   */
  export type TournamentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter, which Tournaments to fetch.
     */
    where?: TournamentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tournaments to fetch.
     */
    orderBy?: TournamentOrderByWithRelationInput | TournamentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tournaments.
     */
    cursor?: TournamentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tournaments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tournaments.
     */
    skip?: number
    distinct?: TournamentScalarFieldEnum | TournamentScalarFieldEnum[]
  }

  /**
   * Tournament create
   */
  export type TournamentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to create a Tournament.
     */
    data: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
  }

  /**
   * Tournament createMany
   */
  export type TournamentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tournament createManyAndReturn
   */
  export type TournamentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * The data used to create many Tournaments.
     */
    data: TournamentCreateManyInput | TournamentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament update
   */
  export type TournamentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The data needed to update a Tournament.
     */
    data: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
    /**
     * Choose, which Tournament to update.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament updateMany
   */
  export type TournamentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to update.
     */
    limit?: number
  }

  /**
   * Tournament updateManyAndReturn
   */
  export type TournamentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * The data used to update Tournaments.
     */
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyInput>
    /**
     * Filter which Tournaments to update
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tournament upsert
   */
  export type TournamentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * The filter to search for the Tournament to update in case it exists.
     */
    where: TournamentWhereUniqueInput
    /**
     * In case the Tournament found by the `where` argument doesn't exist, create a new Tournament with this data.
     */
    create: XOR<TournamentCreateInput, TournamentUncheckedCreateInput>
    /**
     * In case the Tournament was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TournamentUpdateInput, TournamentUncheckedUpdateInput>
  }

  /**
   * Tournament delete
   */
  export type TournamentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    /**
     * Filter which Tournament to delete.
     */
    where: TournamentWhereUniqueInput
  }

  /**
   * Tournament deleteMany
   */
  export type TournamentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tournaments to delete
     */
    where?: TournamentWhereInput
    /**
     * Limit how many Tournaments to delete.
     */
    limit?: number
  }

  /**
   * Tournament.stages
   */
  export type Tournament$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Tournament.teams
   */
  export type Tournament$teamsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    cursor?: TeamWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Tournament.teamStats
   */
  export type Tournament$teamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    where?: TeamStatsWhereInput
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    cursor?: TeamStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * Tournament.fields
   */
  export type Tournament$fieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    cursor?: FieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Tournament.scoreConfigs
   */
  export type Tournament$scoreConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    where?: ScoreConfigWhereInput
    orderBy?: ScoreConfigOrderByWithRelationInput | ScoreConfigOrderByWithRelationInput[]
    cursor?: ScoreConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreConfigScalarFieldEnum | ScoreConfigScalarFieldEnum[]
  }

  /**
   * Tournament without action
   */
  export type TournamentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
  }


  /**
   * Model Stage
   */

  export type AggregateStage = {
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  export type StageAvgAggregateOutputType = {
    teamsPerAlliance: number | null
  }

  export type StageSumAggregateOutputType = {
    teamsPerAlliance: number | null
  }

  export type StageMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.StageType | null
    startDate: Date | null
    endDate: Date | null
    tournamentId: string | null
    teamsPerAlliance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: $Enums.StageType | null
    startDate: Date | null
    endDate: Date | null
    tournamentId: string | null
    teamsPerAlliance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StageCountAggregateOutputType = {
    id: number
    name: number
    type: number
    startDate: number
    endDate: number
    tournamentId: number
    teamsPerAlliance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StageAvgAggregateInputType = {
    teamsPerAlliance?: true
  }

  export type StageSumAggregateInputType = {
    teamsPerAlliance?: true
  }

  export type StageMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    startDate?: true
    endDate?: true
    tournamentId?: true
    teamsPerAlliance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    startDate?: true
    endDate?: true
    tournamentId?: true
    teamsPerAlliance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StageCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    startDate?: true
    endDate?: true
    tournamentId?: true
    teamsPerAlliance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stage to aggregate.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stages
    **/
    _count?: true | StageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageMaxAggregateInputType
  }

  export type GetStageAggregateType<T extends StageAggregateArgs> = {
        [P in keyof T & keyof AggregateStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStage[P]>
      : GetScalarType<T[P], AggregateStage[P]>
  }




  export type StageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
    orderBy?: StageOrderByWithAggregationInput | StageOrderByWithAggregationInput[]
    by: StageScalarFieldEnum[] | StageScalarFieldEnum
    having?: StageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageCountAggregateInputType | true
    _avg?: StageAvgAggregateInputType
    _sum?: StageSumAggregateInputType
    _min?: StageMinAggregateInputType
    _max?: StageMaxAggregateInputType
  }

  export type StageGroupByOutputType = {
    id: string
    name: string
    type: $Enums.StageType
    startDate: Date
    endDate: Date
    tournamentId: string
    teamsPerAlliance: number
    createdAt: Date
    updatedAt: Date
    _count: StageCountAggregateOutputType | null
    _avg: StageAvgAggregateOutputType | null
    _sum: StageSumAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  type GetStageGroupByPayload<T extends StageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageGroupByOutputType[P]>
            : GetScalarType<T[P], StageGroupByOutputType[P]>
        }
      >
    >


  export type StageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    tournamentId?: boolean
    teamsPerAlliance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | Stage$matchesArgs<ExtArgs>
    teamStats?: boolean | Stage$teamStatsArgs<ExtArgs>
    _count?: boolean | StageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    tournamentId?: boolean
    teamsPerAlliance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    tournamentId?: boolean
    teamsPerAlliance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    startDate?: boolean
    endDate?: boolean
    tournamentId?: boolean
    teamsPerAlliance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "startDate" | "endDate" | "tournamentId" | "teamsPerAlliance" | "createdAt" | "updatedAt", ExtArgs["result"]["stage"]>
  export type StageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | Stage$matchesArgs<ExtArgs>
    teamStats?: boolean | Stage$teamStatsArgs<ExtArgs>
    _count?: boolean | StageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }
  export type StageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }

  export type $StagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stage"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      matches: Prisma.$MatchPayload<ExtArgs>[]
      teamStats: Prisma.$TeamStatsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: $Enums.StageType
      startDate: Date
      endDate: Date
      tournamentId: string
      teamsPerAlliance: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stage"]>
    composites: {}
  }

  type StageGetPayload<S extends boolean | null | undefined | StageDefaultArgs> = $Result.GetResult<Prisma.$StagePayload, S>

  type StageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageCountAggregateInputType | true
    }

  export interface StageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stage'], meta: { name: 'Stage' } }
    /**
     * Find zero or one Stage that matches the filter.
     * @param {StageFindUniqueArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageFindUniqueArgs>(args: SelectSubset<T, StageFindUniqueArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageFindUniqueOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageFindUniqueOrThrowArgs>(args: SelectSubset<T, StageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageFindFirstArgs>(args?: SelectSubset<T, StageFindFirstArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageFindFirstOrThrowArgs>(args?: SelectSubset<T, StageFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stages
     * const stages = await prisma.stage.findMany()
     * 
     * // Get first 10 Stages
     * const stages = await prisma.stage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageWithIdOnly = await prisma.stage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageFindManyArgs>(args?: SelectSubset<T, StageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stage.
     * @param {StageCreateArgs} args - Arguments to create a Stage.
     * @example
     * // Create one Stage
     * const Stage = await prisma.stage.create({
     *   data: {
     *     // ... data to create a Stage
     *   }
     * })
     * 
     */
    create<T extends StageCreateArgs>(args: SelectSubset<T, StageCreateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stages.
     * @param {StageCreateManyArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageCreateManyArgs>(args?: SelectSubset<T, StageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stages and returns the data saved in the database.
     * @param {StageCreateManyAndReturnArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageCreateManyAndReturnArgs>(args?: SelectSubset<T, StageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stage.
     * @param {StageDeleteArgs} args - Arguments to delete one Stage.
     * @example
     * // Delete one Stage
     * const Stage = await prisma.stage.delete({
     *   where: {
     *     // ... filter to delete one Stage
     *   }
     * })
     * 
     */
    delete<T extends StageDeleteArgs>(args: SelectSubset<T, StageDeleteArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stage.
     * @param {StageUpdateArgs} args - Arguments to update one Stage.
     * @example
     * // Update one Stage
     * const stage = await prisma.stage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageUpdateArgs>(args: SelectSubset<T, StageUpdateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stages.
     * @param {StageDeleteManyArgs} args - Arguments to filter Stages to delete.
     * @example
     * // Delete a few Stages
     * const { count } = await prisma.stage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageDeleteManyArgs>(args?: SelectSubset<T, StageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageUpdateManyArgs>(args: SelectSubset<T, StageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages and returns the data updated in the database.
     * @param {StageUpdateManyAndReturnArgs} args - Arguments to update many Stages.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageUpdateManyAndReturnArgs>(args: SelectSubset<T, StageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stage.
     * @param {StageUpsertArgs} args - Arguments to update or create a Stage.
     * @example
     * // Update or create a Stage
     * const stage = await prisma.stage.upsert({
     *   create: {
     *     // ... data to create a Stage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stage we want to update
     *   }
     * })
     */
    upsert<T extends StageUpsertArgs>(args: SelectSubset<T, StageUpsertArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageCountArgs} args - Arguments to filter Stages to count.
     * @example
     * // Count the number of Stages
     * const count = await prisma.stage.count({
     *   where: {
     *     // ... the filter for the Stages we want to count
     *   }
     * })
    **/
    count<T extends StageCountArgs>(
      args?: Subset<T, StageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageAggregateArgs>(args: Subset<T, StageAggregateArgs>): Prisma.PrismaPromise<GetStageAggregateType<T>>

    /**
     * Group by Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageGroupByArgs['orderBy'] }
        : { orderBy?: StageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stage model
   */
  readonly fields: StageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matches<T extends Stage$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Stage$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamStats<T extends Stage$teamStatsArgs<ExtArgs> = {}>(args?: Subset<T, Stage$teamStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stage model
   */
  interface StageFieldRefs {
    readonly id: FieldRef<"Stage", 'String'>
    readonly name: FieldRef<"Stage", 'String'>
    readonly type: FieldRef<"Stage", 'StageType'>
    readonly startDate: FieldRef<"Stage", 'DateTime'>
    readonly endDate: FieldRef<"Stage", 'DateTime'>
    readonly tournamentId: FieldRef<"Stage", 'String'>
    readonly teamsPerAlliance: FieldRef<"Stage", 'Int'>
    readonly createdAt: FieldRef<"Stage", 'DateTime'>
    readonly updatedAt: FieldRef<"Stage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stage findUnique
   */
  export type StageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findUniqueOrThrow
   */
  export type StageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findFirst
   */
  export type StageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findFirstOrThrow
   */
  export type StageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findMany
   */
  export type StageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stages to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage create
   */
  export type StageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to create a Stage.
     */
    data: XOR<StageCreateInput, StageUncheckedCreateInput>
  }

  /**
   * Stage createMany
   */
  export type StageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stage createManyAndReturn
   */
  export type StageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage update
   */
  export type StageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to update a Stage.
     */
    data: XOR<StageUpdateInput, StageUncheckedUpdateInput>
    /**
     * Choose, which Stage to update.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage updateMany
   */
  export type StageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
  }

  /**
   * Stage updateManyAndReturn
   */
  export type StageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage upsert
   */
  export type StageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The filter to search for the Stage to update in case it exists.
     */
    where: StageWhereUniqueInput
    /**
     * In case the Stage found by the `where` argument doesn't exist, create a new Stage with this data.
     */
    create: XOR<StageCreateInput, StageUncheckedCreateInput>
    /**
     * In case the Stage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageUpdateInput, StageUncheckedUpdateInput>
  }

  /**
   * Stage delete
   */
  export type StageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter which Stage to delete.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage deleteMany
   */
  export type StageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stages to delete
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to delete.
     */
    limit?: number
  }

  /**
   * Stage.matches
   */
  export type Stage$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Stage.teamStats
   */
  export type Stage$teamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    where?: TeamStatsWhereInput
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    cursor?: TeamStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * Stage without action
   */
  export type StageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    matchNumber: number | null
    roundNumber: number | null
    duration: number | null
    matchDuration: number | null
  }

  export type MatchSumAggregateOutputType = {
    matchNumber: number | null
    roundNumber: number | null
    duration: number | null
    matchDuration: number | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    matchNumber: number | null
    roundNumber: number | null
    status: $Enums.MatchState | null
    startTime: Date | null
    scheduledTime: Date | null
    endTime: Date | null
    duration: number | null
    winningAlliance: $Enums.AllianceColor | null
    stageId: string | null
    scoredById: string | null
    roundType: $Enums.MatchRoundType | null
    scheduleId: string | null
    fieldId: string | null
    matchType: $Enums.MatchType | null
    matchDuration: number | null
    updatedAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    matchNumber: number | null
    roundNumber: number | null
    status: $Enums.MatchState | null
    startTime: Date | null
    scheduledTime: Date | null
    endTime: Date | null
    duration: number | null
    winningAlliance: $Enums.AllianceColor | null
    stageId: string | null
    scoredById: string | null
    roundType: $Enums.MatchRoundType | null
    scheduleId: string | null
    fieldId: string | null
    matchType: $Enums.MatchType | null
    matchDuration: number | null
    updatedAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    matchNumber: number
    roundNumber: number
    status: number
    startTime: number
    scheduledTime: number
    endTime: number
    duration: number
    winningAlliance: number
    stageId: number
    scoredById: number
    roundType: number
    scheduleId: number
    fieldId: number
    matchType: number
    matchDuration: number
    updatedAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    matchNumber?: true
    roundNumber?: true
    duration?: true
    matchDuration?: true
  }

  export type MatchSumAggregateInputType = {
    matchNumber?: true
    roundNumber?: true
    duration?: true
    matchDuration?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    matchNumber?: true
    roundNumber?: true
    status?: true
    startTime?: true
    scheduledTime?: true
    endTime?: true
    duration?: true
    winningAlliance?: true
    stageId?: true
    scoredById?: true
    roundType?: true
    scheduleId?: true
    fieldId?: true
    matchType?: true
    matchDuration?: true
    updatedAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    matchNumber?: true
    roundNumber?: true
    status?: true
    startTime?: true
    scheduledTime?: true
    endTime?: true
    duration?: true
    winningAlliance?: true
    stageId?: true
    scoredById?: true
    roundType?: true
    scheduleId?: true
    fieldId?: true
    matchType?: true
    matchDuration?: true
    updatedAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    matchNumber?: true
    roundNumber?: true
    status?: true
    startTime?: true
    scheduledTime?: true
    endTime?: true
    duration?: true
    winningAlliance?: true
    stageId?: true
    scoredById?: true
    roundType?: true
    scheduleId?: true
    fieldId?: true
    matchType?: true
    matchDuration?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    matchNumber: number
    roundNumber: number | null
    status: $Enums.MatchState
    startTime: Date | null
    scheduledTime: Date | null
    endTime: Date | null
    duration: number | null
    winningAlliance: $Enums.AllianceColor | null
    stageId: string
    scoredById: string | null
    roundType: $Enums.MatchRoundType | null
    scheduleId: string | null
    fieldId: string | null
    matchType: $Enums.MatchType
    matchDuration: number | null
    updatedAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchNumber?: boolean
    roundNumber?: boolean
    status?: boolean
    startTime?: boolean
    scheduledTime?: boolean
    endTime?: boolean
    duration?: boolean
    winningAlliance?: boolean
    stageId?: boolean
    scoredById?: boolean
    roundType?: boolean
    scheduleId?: boolean
    fieldId?: boolean
    matchType?: boolean
    matchDuration?: boolean
    updatedAt?: boolean
    stage?: boolean | StageDefaultArgs<ExtArgs>
    alliances?: boolean | Match$alliancesArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    referees?: boolean | Match$refereesArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
    matchScores?: boolean | Match$matchScoresArgs<ExtArgs>
    fieldDisplays?: boolean | Match$fieldDisplaysArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchNumber?: boolean
    roundNumber?: boolean
    status?: boolean
    startTime?: boolean
    scheduledTime?: boolean
    endTime?: boolean
    duration?: boolean
    winningAlliance?: boolean
    stageId?: boolean
    scoredById?: boolean
    roundType?: boolean
    scheduleId?: boolean
    fieldId?: boolean
    matchType?: boolean
    matchDuration?: boolean
    updatedAt?: boolean
    stage?: boolean | StageDefaultArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchNumber?: boolean
    roundNumber?: boolean
    status?: boolean
    startTime?: boolean
    scheduledTime?: boolean
    endTime?: boolean
    duration?: boolean
    winningAlliance?: boolean
    stageId?: boolean
    scoredById?: boolean
    roundType?: boolean
    scheduleId?: boolean
    fieldId?: boolean
    matchType?: boolean
    matchDuration?: boolean
    updatedAt?: boolean
    stage?: boolean | StageDefaultArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    matchNumber?: boolean
    roundNumber?: boolean
    status?: boolean
    startTime?: boolean
    scheduledTime?: boolean
    endTime?: boolean
    duration?: boolean
    winningAlliance?: boolean
    stageId?: boolean
    scoredById?: boolean
    roundType?: boolean
    scheduleId?: boolean
    fieldId?: boolean
    matchType?: boolean
    matchDuration?: boolean
    updatedAt?: boolean
  }

  export type MatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "matchNumber" | "roundNumber" | "status" | "startTime" | "scheduledTime" | "endTime" | "duration" | "winningAlliance" | "stageId" | "scoredById" | "roundType" | "scheduleId" | "fieldId" | "matchType" | "matchDuration" | "updatedAt", ExtArgs["result"]["match"]>
  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stage?: boolean | StageDefaultArgs<ExtArgs>
    alliances?: boolean | Match$alliancesArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    referees?: boolean | Match$refereesArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
    matchScores?: boolean | Match$matchScoresArgs<ExtArgs>
    fieldDisplays?: boolean | Match$fieldDisplaysArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stage?: boolean | StageDefaultArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
  }
  export type MatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stage?: boolean | StageDefaultArgs<ExtArgs>
    scoredBy?: boolean | Match$scoredByArgs<ExtArgs>
    field?: boolean | Match$fieldArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      stage: Prisma.$StagePayload<ExtArgs>
      alliances: Prisma.$AlliancePayload<ExtArgs>[]
      scoredBy: Prisma.$UserPayload<ExtArgs> | null
      referees: Prisma.$MatchRefereePayload<ExtArgs>[]
      field: Prisma.$FieldPayload<ExtArgs> | null
      matchScores: Prisma.$MatchScorePayload<ExtArgs>[]
      fieldDisplays: Prisma.$FieldDisplayPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchNumber: number
      roundNumber: number | null
      status: $Enums.MatchState
      startTime: Date | null
      scheduledTime: Date | null
      endTime: Date | null
      duration: number | null
      winningAlliance: $Enums.AllianceColor | null
      stageId: string
      scoredById: string | null
      roundType: $Enums.MatchRoundType | null
      scheduleId: string | null
      fieldId: string | null
      matchType: $Enums.MatchType
      matchDuration: number | null
      updatedAt: Date
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches and returns the data updated in the database.
     * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stage<T extends StageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StageDefaultArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alliances<T extends Match$alliancesArgs<ExtArgs> = {}>(args?: Subset<T, Match$alliancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scoredBy<T extends Match$scoredByArgs<ExtArgs> = {}>(args?: Subset<T, Match$scoredByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    referees<T extends Match$refereesArgs<ExtArgs> = {}>(args?: Subset<T, Match$refereesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    field<T extends Match$fieldArgs<ExtArgs> = {}>(args?: Subset<T, Match$fieldArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    matchScores<T extends Match$matchScoresArgs<ExtArgs> = {}>(args?: Subset<T, Match$matchScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fieldDisplays<T extends Match$fieldDisplaysArgs<ExtArgs> = {}>(args?: Subset<T, Match$fieldDisplaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly matchNumber: FieldRef<"Match", 'Int'>
    readonly roundNumber: FieldRef<"Match", 'Int'>
    readonly status: FieldRef<"Match", 'MatchState'>
    readonly startTime: FieldRef<"Match", 'DateTime'>
    readonly scheduledTime: FieldRef<"Match", 'DateTime'>
    readonly endTime: FieldRef<"Match", 'DateTime'>
    readonly duration: FieldRef<"Match", 'Int'>
    readonly winningAlliance: FieldRef<"Match", 'AllianceColor'>
    readonly stageId: FieldRef<"Match", 'String'>
    readonly scoredById: FieldRef<"Match", 'String'>
    readonly roundType: FieldRef<"Match", 'MatchRoundType'>
    readonly scheduleId: FieldRef<"Match", 'String'>
    readonly fieldId: FieldRef<"Match", 'String'>
    readonly matchType: FieldRef<"Match", 'MatchType'>
    readonly matchDuration: FieldRef<"Match", 'Int'>
    readonly updatedAt: FieldRef<"Match", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
  }

  /**
   * Match updateManyAndReturn
   */
  export type MatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to delete.
     */
    limit?: number
  }

  /**
   * Match.alliances
   */
  export type Match$alliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    cursor?: AllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Match.scoredBy
   */
  export type Match$scoredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Match.referees
   */
  export type Match$refereesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    where?: MatchRefereeWhereInput
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    cursor?: MatchRefereeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchRefereeScalarFieldEnum | MatchRefereeScalarFieldEnum[]
  }

  /**
   * Match.field
   */
  export type Match$fieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    where?: FieldWhereInput
  }

  /**
   * Match.matchScores
   */
  export type Match$matchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    where?: MatchScoreWhereInput
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    cursor?: MatchScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * Match.fieldDisplays
   */
  export type Match$fieldDisplaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    where?: FieldDisplayWhereInput
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    cursor?: FieldDisplayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FieldDisplayScalarFieldEnum | FieldDisplayScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model MatchReferee
   */

  export type AggregateMatchReferee = {
    _count: MatchRefereeCountAggregateOutputType | null
    _min: MatchRefereeMinAggregateOutputType | null
    _max: MatchRefereeMaxAggregateOutputType | null
  }

  export type MatchRefereeMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    userId: string | null
    role: $Enums.UserRole | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchRefereeMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    userId: string | null
    role: $Enums.UserRole | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchRefereeCountAggregateOutputType = {
    id: number
    matchId: number
    userId: number
    role: number
    position: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchRefereeMinAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    role?: true
    position?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchRefereeMaxAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    role?: true
    position?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchRefereeCountAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    role?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchRefereeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchReferee to aggregate.
     */
    where?: MatchRefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchReferees to fetch.
     */
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchRefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchReferees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchReferees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchReferees
    **/
    _count?: true | MatchRefereeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchRefereeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchRefereeMaxAggregateInputType
  }

  export type GetMatchRefereeAggregateType<T extends MatchRefereeAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchReferee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchReferee[P]>
      : GetScalarType<T[P], AggregateMatchReferee[P]>
  }




  export type MatchRefereeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchRefereeWhereInput
    orderBy?: MatchRefereeOrderByWithAggregationInput | MatchRefereeOrderByWithAggregationInput[]
    by: MatchRefereeScalarFieldEnum[] | MatchRefereeScalarFieldEnum
    having?: MatchRefereeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchRefereeCountAggregateInputType | true
    _min?: MatchRefereeMinAggregateInputType
    _max?: MatchRefereeMaxAggregateInputType
  }

  export type MatchRefereeGroupByOutputType = {
    id: string
    matchId: string
    userId: string
    role: $Enums.UserRole
    position: string | null
    createdAt: Date
    updatedAt: Date
    _count: MatchRefereeCountAggregateOutputType | null
    _min: MatchRefereeMinAggregateOutputType | null
    _max: MatchRefereeMaxAggregateOutputType | null
  }

  type GetMatchRefereeGroupByPayload<T extends MatchRefereeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchRefereeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchRefereeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchRefereeGroupByOutputType[P]>
            : GetScalarType<T[P], MatchRefereeGroupByOutputType[P]>
        }
      >
    >


  export type MatchRefereeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    userId?: boolean
    role?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchReferee"]>

  export type MatchRefereeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    userId?: boolean
    role?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchReferee"]>

  export type MatchRefereeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    userId?: boolean
    role?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchReferee"]>

  export type MatchRefereeSelectScalar = {
    id?: boolean
    matchId?: boolean
    userId?: boolean
    role?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchRefereeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "matchId" | "userId" | "role" | "position" | "createdAt" | "updatedAt", ExtArgs["result"]["matchReferee"]>
  export type MatchRefereeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchRefereeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchRefereeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchRefereePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchReferee"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      userId: string
      role: $Enums.UserRole
      position: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["matchReferee"]>
    composites: {}
  }

  type MatchRefereeGetPayload<S extends boolean | null | undefined | MatchRefereeDefaultArgs> = $Result.GetResult<Prisma.$MatchRefereePayload, S>

  type MatchRefereeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchRefereeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchRefereeCountAggregateInputType | true
    }

  export interface MatchRefereeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchReferee'], meta: { name: 'MatchReferee' } }
    /**
     * Find zero or one MatchReferee that matches the filter.
     * @param {MatchRefereeFindUniqueArgs} args - Arguments to find a MatchReferee
     * @example
     * // Get one MatchReferee
     * const matchReferee = await prisma.matchReferee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchRefereeFindUniqueArgs>(args: SelectSubset<T, MatchRefereeFindUniqueArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchReferee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchRefereeFindUniqueOrThrowArgs} args - Arguments to find a MatchReferee
     * @example
     * // Get one MatchReferee
     * const matchReferee = await prisma.matchReferee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchRefereeFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchRefereeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchReferee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeFindFirstArgs} args - Arguments to find a MatchReferee
     * @example
     * // Get one MatchReferee
     * const matchReferee = await prisma.matchReferee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchRefereeFindFirstArgs>(args?: SelectSubset<T, MatchRefereeFindFirstArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchReferee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeFindFirstOrThrowArgs} args - Arguments to find a MatchReferee
     * @example
     * // Get one MatchReferee
     * const matchReferee = await prisma.matchReferee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchRefereeFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchRefereeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchReferees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchReferees
     * const matchReferees = await prisma.matchReferee.findMany()
     * 
     * // Get first 10 MatchReferees
     * const matchReferees = await prisma.matchReferee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchRefereeWithIdOnly = await prisma.matchReferee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchRefereeFindManyArgs>(args?: SelectSubset<T, MatchRefereeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchReferee.
     * @param {MatchRefereeCreateArgs} args - Arguments to create a MatchReferee.
     * @example
     * // Create one MatchReferee
     * const MatchReferee = await prisma.matchReferee.create({
     *   data: {
     *     // ... data to create a MatchReferee
     *   }
     * })
     * 
     */
    create<T extends MatchRefereeCreateArgs>(args: SelectSubset<T, MatchRefereeCreateArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchReferees.
     * @param {MatchRefereeCreateManyArgs} args - Arguments to create many MatchReferees.
     * @example
     * // Create many MatchReferees
     * const matchReferee = await prisma.matchReferee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchRefereeCreateManyArgs>(args?: SelectSubset<T, MatchRefereeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchReferees and returns the data saved in the database.
     * @param {MatchRefereeCreateManyAndReturnArgs} args - Arguments to create many MatchReferees.
     * @example
     * // Create many MatchReferees
     * const matchReferee = await prisma.matchReferee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchReferees and only return the `id`
     * const matchRefereeWithIdOnly = await prisma.matchReferee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchRefereeCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchRefereeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchReferee.
     * @param {MatchRefereeDeleteArgs} args - Arguments to delete one MatchReferee.
     * @example
     * // Delete one MatchReferee
     * const MatchReferee = await prisma.matchReferee.delete({
     *   where: {
     *     // ... filter to delete one MatchReferee
     *   }
     * })
     * 
     */
    delete<T extends MatchRefereeDeleteArgs>(args: SelectSubset<T, MatchRefereeDeleteArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchReferee.
     * @param {MatchRefereeUpdateArgs} args - Arguments to update one MatchReferee.
     * @example
     * // Update one MatchReferee
     * const matchReferee = await prisma.matchReferee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchRefereeUpdateArgs>(args: SelectSubset<T, MatchRefereeUpdateArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchReferees.
     * @param {MatchRefereeDeleteManyArgs} args - Arguments to filter MatchReferees to delete.
     * @example
     * // Delete a few MatchReferees
     * const { count } = await prisma.matchReferee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchRefereeDeleteManyArgs>(args?: SelectSubset<T, MatchRefereeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchReferees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchReferees
     * const matchReferee = await prisma.matchReferee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchRefereeUpdateManyArgs>(args: SelectSubset<T, MatchRefereeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchReferees and returns the data updated in the database.
     * @param {MatchRefereeUpdateManyAndReturnArgs} args - Arguments to update many MatchReferees.
     * @example
     * // Update many MatchReferees
     * const matchReferee = await prisma.matchReferee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchReferees and only return the `id`
     * const matchRefereeWithIdOnly = await prisma.matchReferee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchRefereeUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchRefereeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchReferee.
     * @param {MatchRefereeUpsertArgs} args - Arguments to update or create a MatchReferee.
     * @example
     * // Update or create a MatchReferee
     * const matchReferee = await prisma.matchReferee.upsert({
     *   create: {
     *     // ... data to create a MatchReferee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchReferee we want to update
     *   }
     * })
     */
    upsert<T extends MatchRefereeUpsertArgs>(args: SelectSubset<T, MatchRefereeUpsertArgs<ExtArgs>>): Prisma__MatchRefereeClient<$Result.GetResult<Prisma.$MatchRefereePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchReferees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeCountArgs} args - Arguments to filter MatchReferees to count.
     * @example
     * // Count the number of MatchReferees
     * const count = await prisma.matchReferee.count({
     *   where: {
     *     // ... the filter for the MatchReferees we want to count
     *   }
     * })
    **/
    count<T extends MatchRefereeCountArgs>(
      args?: Subset<T, MatchRefereeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchRefereeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchReferee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchRefereeAggregateArgs>(args: Subset<T, MatchRefereeAggregateArgs>): Prisma.PrismaPromise<GetMatchRefereeAggregateType<T>>

    /**
     * Group by MatchReferee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchRefereeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchRefereeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchRefereeGroupByArgs['orderBy'] }
        : { orderBy?: MatchRefereeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchRefereeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchRefereeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchReferee model
   */
  readonly fields: MatchRefereeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchReferee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchRefereeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchReferee model
   */
  interface MatchRefereeFieldRefs {
    readonly id: FieldRef<"MatchReferee", 'String'>
    readonly matchId: FieldRef<"MatchReferee", 'String'>
    readonly userId: FieldRef<"MatchReferee", 'String'>
    readonly role: FieldRef<"MatchReferee", 'UserRole'>
    readonly position: FieldRef<"MatchReferee", 'String'>
    readonly createdAt: FieldRef<"MatchReferee", 'DateTime'>
    readonly updatedAt: FieldRef<"MatchReferee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchReferee findUnique
   */
  export type MatchRefereeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter, which MatchReferee to fetch.
     */
    where: MatchRefereeWhereUniqueInput
  }

  /**
   * MatchReferee findUniqueOrThrow
   */
  export type MatchRefereeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter, which MatchReferee to fetch.
     */
    where: MatchRefereeWhereUniqueInput
  }

  /**
   * MatchReferee findFirst
   */
  export type MatchRefereeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter, which MatchReferee to fetch.
     */
    where?: MatchRefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchReferees to fetch.
     */
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchReferees.
     */
    cursor?: MatchRefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchReferees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchReferees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchReferees.
     */
    distinct?: MatchRefereeScalarFieldEnum | MatchRefereeScalarFieldEnum[]
  }

  /**
   * MatchReferee findFirstOrThrow
   */
  export type MatchRefereeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter, which MatchReferee to fetch.
     */
    where?: MatchRefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchReferees to fetch.
     */
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchReferees.
     */
    cursor?: MatchRefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchReferees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchReferees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchReferees.
     */
    distinct?: MatchRefereeScalarFieldEnum | MatchRefereeScalarFieldEnum[]
  }

  /**
   * MatchReferee findMany
   */
  export type MatchRefereeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter, which MatchReferees to fetch.
     */
    where?: MatchRefereeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchReferees to fetch.
     */
    orderBy?: MatchRefereeOrderByWithRelationInput | MatchRefereeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchReferees.
     */
    cursor?: MatchRefereeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchReferees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchReferees.
     */
    skip?: number
    distinct?: MatchRefereeScalarFieldEnum | MatchRefereeScalarFieldEnum[]
  }

  /**
   * MatchReferee create
   */
  export type MatchRefereeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchReferee.
     */
    data: XOR<MatchRefereeCreateInput, MatchRefereeUncheckedCreateInput>
  }

  /**
   * MatchReferee createMany
   */
  export type MatchRefereeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchReferees.
     */
    data: MatchRefereeCreateManyInput | MatchRefereeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchReferee createManyAndReturn
   */
  export type MatchRefereeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * The data used to create many MatchReferees.
     */
    data: MatchRefereeCreateManyInput | MatchRefereeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchReferee update
   */
  export type MatchRefereeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchReferee.
     */
    data: XOR<MatchRefereeUpdateInput, MatchRefereeUncheckedUpdateInput>
    /**
     * Choose, which MatchReferee to update.
     */
    where: MatchRefereeWhereUniqueInput
  }

  /**
   * MatchReferee updateMany
   */
  export type MatchRefereeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchReferees.
     */
    data: XOR<MatchRefereeUpdateManyMutationInput, MatchRefereeUncheckedUpdateManyInput>
    /**
     * Filter which MatchReferees to update
     */
    where?: MatchRefereeWhereInput
    /**
     * Limit how many MatchReferees to update.
     */
    limit?: number
  }

  /**
   * MatchReferee updateManyAndReturn
   */
  export type MatchRefereeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * The data used to update MatchReferees.
     */
    data: XOR<MatchRefereeUpdateManyMutationInput, MatchRefereeUncheckedUpdateManyInput>
    /**
     * Filter which MatchReferees to update
     */
    where?: MatchRefereeWhereInput
    /**
     * Limit how many MatchReferees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchReferee upsert
   */
  export type MatchRefereeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchReferee to update in case it exists.
     */
    where: MatchRefereeWhereUniqueInput
    /**
     * In case the MatchReferee found by the `where` argument doesn't exist, create a new MatchReferee with this data.
     */
    create: XOR<MatchRefereeCreateInput, MatchRefereeUncheckedCreateInput>
    /**
     * In case the MatchReferee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchRefereeUpdateInput, MatchRefereeUncheckedUpdateInput>
  }

  /**
   * MatchReferee delete
   */
  export type MatchRefereeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
    /**
     * Filter which MatchReferee to delete.
     */
    where: MatchRefereeWhereUniqueInput
  }

  /**
   * MatchReferee deleteMany
   */
  export type MatchRefereeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchReferees to delete
     */
    where?: MatchRefereeWhereInput
    /**
     * Limit how many MatchReferees to delete.
     */
    limit?: number
  }

  /**
   * MatchReferee without action
   */
  export type MatchRefereeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchReferee
     */
    select?: MatchRefereeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchReferee
     */
    omit?: MatchRefereeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchRefereeInclude<ExtArgs> | null
  }


  /**
   * Model Alliance
   */

  export type AggregateAlliance = {
    _count: AllianceCountAggregateOutputType | null
    _avg: AllianceAvgAggregateOutputType | null
    _sum: AllianceSumAggregateOutputType | null
    _min: AllianceMinAggregateOutputType | null
    _max: AllianceMaxAggregateOutputType | null
  }

  export type AllianceAvgAggregateOutputType = {
    score: number | null
    autoScore: number | null
    driveScore: number | null
  }

  export type AllianceSumAggregateOutputType = {
    score: number | null
    autoScore: number | null
    driveScore: number | null
  }

  export type AllianceMinAggregateOutputType = {
    id: string | null
    color: $Enums.AllianceColor | null
    score: number | null
    autoScore: number | null
    driveScore: number | null
    matchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AllianceMaxAggregateOutputType = {
    id: string | null
    color: $Enums.AllianceColor | null
    score: number | null
    autoScore: number | null
    driveScore: number | null
    matchId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AllianceCountAggregateOutputType = {
    id: number
    color: number
    score: number
    autoScore: number
    driveScore: number
    matchId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AllianceAvgAggregateInputType = {
    score?: true
    autoScore?: true
    driveScore?: true
  }

  export type AllianceSumAggregateInputType = {
    score?: true
    autoScore?: true
    driveScore?: true
  }

  export type AllianceMinAggregateInputType = {
    id?: true
    color?: true
    score?: true
    autoScore?: true
    driveScore?: true
    matchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AllianceMaxAggregateInputType = {
    id?: true
    color?: true
    score?: true
    autoScore?: true
    driveScore?: true
    matchId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AllianceCountAggregateInputType = {
    id?: true
    color?: true
    score?: true
    autoScore?: true
    driveScore?: true
    matchId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AllianceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alliance to aggregate.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alliances
    **/
    _count?: true | AllianceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllianceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllianceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllianceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllianceMaxAggregateInputType
  }

  export type GetAllianceAggregateType<T extends AllianceAggregateArgs> = {
        [P in keyof T & keyof AggregateAlliance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlliance[P]>
      : GetScalarType<T[P], AggregateAlliance[P]>
  }




  export type AllianceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AllianceWhereInput
    orderBy?: AllianceOrderByWithAggregationInput | AllianceOrderByWithAggregationInput[]
    by: AllianceScalarFieldEnum[] | AllianceScalarFieldEnum
    having?: AllianceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllianceCountAggregateInputType | true
    _avg?: AllianceAvgAggregateInputType
    _sum?: AllianceSumAggregateInputType
    _min?: AllianceMinAggregateInputType
    _max?: AllianceMaxAggregateInputType
  }

  export type AllianceGroupByOutputType = {
    id: string
    color: $Enums.AllianceColor
    score: number
    autoScore: number
    driveScore: number
    matchId: string
    createdAt: Date
    updatedAt: Date
    _count: AllianceCountAggregateOutputType | null
    _avg: AllianceAvgAggregateOutputType | null
    _sum: AllianceSumAggregateOutputType | null
    _min: AllianceMinAggregateOutputType | null
    _max: AllianceMaxAggregateOutputType | null
  }

  type GetAllianceGroupByPayload<T extends AllianceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllianceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllianceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllianceGroupByOutputType[P]>
            : GetScalarType<T[P], AllianceGroupByOutputType[P]>
        }
      >
    >


  export type AllianceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    color?: boolean
    score?: boolean
    autoScore?: boolean
    driveScore?: boolean
    matchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    teamAlliances?: boolean | Alliance$teamAlliancesArgs<ExtArgs>
    matchScores?: boolean | Alliance$matchScoresArgs<ExtArgs>
    _count?: boolean | AllianceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alliance"]>

  export type AllianceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    color?: boolean
    score?: boolean
    autoScore?: boolean
    driveScore?: boolean
    matchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alliance"]>

  export type AllianceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    color?: boolean
    score?: boolean
    autoScore?: boolean
    driveScore?: boolean
    matchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alliance"]>

  export type AllianceSelectScalar = {
    id?: boolean
    color?: boolean
    score?: boolean
    autoScore?: boolean
    driveScore?: boolean
    matchId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AllianceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "color" | "score" | "autoScore" | "driveScore" | "matchId" | "createdAt" | "updatedAt", ExtArgs["result"]["alliance"]>
  export type AllianceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    teamAlliances?: boolean | Alliance$teamAlliancesArgs<ExtArgs>
    matchScores?: boolean | Alliance$matchScoresArgs<ExtArgs>
    _count?: boolean | AllianceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AllianceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }
  export type AllianceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
  }

  export type $AlliancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alliance"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      teamAlliances: Prisma.$TeamAlliancePayload<ExtArgs>[]
      matchScores: Prisma.$MatchScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      color: $Enums.AllianceColor
      score: number
      autoScore: number
      driveScore: number
      matchId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["alliance"]>
    composites: {}
  }

  type AllianceGetPayload<S extends boolean | null | undefined | AllianceDefaultArgs> = $Result.GetResult<Prisma.$AlliancePayload, S>

  type AllianceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AllianceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AllianceCountAggregateInputType | true
    }

  export interface AllianceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alliance'], meta: { name: 'Alliance' } }
    /**
     * Find zero or one Alliance that matches the filter.
     * @param {AllianceFindUniqueArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AllianceFindUniqueArgs>(args: SelectSubset<T, AllianceFindUniqueArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alliance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AllianceFindUniqueOrThrowArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AllianceFindUniqueOrThrowArgs>(args: SelectSubset<T, AllianceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alliance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindFirstArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AllianceFindFirstArgs>(args?: SelectSubset<T, AllianceFindFirstArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alliance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindFirstOrThrowArgs} args - Arguments to find a Alliance
     * @example
     * // Get one Alliance
     * const alliance = await prisma.alliance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AllianceFindFirstOrThrowArgs>(args?: SelectSubset<T, AllianceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alliances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alliances
     * const alliances = await prisma.alliance.findMany()
     * 
     * // Get first 10 Alliances
     * const alliances = await prisma.alliance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const allianceWithIdOnly = await prisma.alliance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AllianceFindManyArgs>(args?: SelectSubset<T, AllianceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alliance.
     * @param {AllianceCreateArgs} args - Arguments to create a Alliance.
     * @example
     * // Create one Alliance
     * const Alliance = await prisma.alliance.create({
     *   data: {
     *     // ... data to create a Alliance
     *   }
     * })
     * 
     */
    create<T extends AllianceCreateArgs>(args: SelectSubset<T, AllianceCreateArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alliances.
     * @param {AllianceCreateManyArgs} args - Arguments to create many Alliances.
     * @example
     * // Create many Alliances
     * const alliance = await prisma.alliance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AllianceCreateManyArgs>(args?: SelectSubset<T, AllianceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alliances and returns the data saved in the database.
     * @param {AllianceCreateManyAndReturnArgs} args - Arguments to create many Alliances.
     * @example
     * // Create many Alliances
     * const alliance = await prisma.alliance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alliances and only return the `id`
     * const allianceWithIdOnly = await prisma.alliance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AllianceCreateManyAndReturnArgs>(args?: SelectSubset<T, AllianceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alliance.
     * @param {AllianceDeleteArgs} args - Arguments to delete one Alliance.
     * @example
     * // Delete one Alliance
     * const Alliance = await prisma.alliance.delete({
     *   where: {
     *     // ... filter to delete one Alliance
     *   }
     * })
     * 
     */
    delete<T extends AllianceDeleteArgs>(args: SelectSubset<T, AllianceDeleteArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alliance.
     * @param {AllianceUpdateArgs} args - Arguments to update one Alliance.
     * @example
     * // Update one Alliance
     * const alliance = await prisma.alliance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AllianceUpdateArgs>(args: SelectSubset<T, AllianceUpdateArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alliances.
     * @param {AllianceDeleteManyArgs} args - Arguments to filter Alliances to delete.
     * @example
     * // Delete a few Alliances
     * const { count } = await prisma.alliance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AllianceDeleteManyArgs>(args?: SelectSubset<T, AllianceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alliances
     * const alliance = await prisma.alliance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AllianceUpdateManyArgs>(args: SelectSubset<T, AllianceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alliances and returns the data updated in the database.
     * @param {AllianceUpdateManyAndReturnArgs} args - Arguments to update many Alliances.
     * @example
     * // Update many Alliances
     * const alliance = await prisma.alliance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alliances and only return the `id`
     * const allianceWithIdOnly = await prisma.alliance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AllianceUpdateManyAndReturnArgs>(args: SelectSubset<T, AllianceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alliance.
     * @param {AllianceUpsertArgs} args - Arguments to update or create a Alliance.
     * @example
     * // Update or create a Alliance
     * const alliance = await prisma.alliance.upsert({
     *   create: {
     *     // ... data to create a Alliance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alliance we want to update
     *   }
     * })
     */
    upsert<T extends AllianceUpsertArgs>(args: SelectSubset<T, AllianceUpsertArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceCountArgs} args - Arguments to filter Alliances to count.
     * @example
     * // Count the number of Alliances
     * const count = await prisma.alliance.count({
     *   where: {
     *     // ... the filter for the Alliances we want to count
     *   }
     * })
    **/
    count<T extends AllianceCountArgs>(
      args?: Subset<T, AllianceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllianceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllianceAggregateArgs>(args: Subset<T, AllianceAggregateArgs>): Prisma.PrismaPromise<GetAllianceAggregateType<T>>

    /**
     * Group by Alliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllianceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AllianceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AllianceGroupByArgs['orderBy'] }
        : { orderBy?: AllianceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AllianceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllianceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alliance model
   */
  readonly fields: AllianceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alliance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AllianceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teamAlliances<T extends Alliance$teamAlliancesArgs<ExtArgs> = {}>(args?: Subset<T, Alliance$teamAlliancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchScores<T extends Alliance$matchScoresArgs<ExtArgs> = {}>(args?: Subset<T, Alliance$matchScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alliance model
   */
  interface AllianceFieldRefs {
    readonly id: FieldRef<"Alliance", 'String'>
    readonly color: FieldRef<"Alliance", 'AllianceColor'>
    readonly score: FieldRef<"Alliance", 'Int'>
    readonly autoScore: FieldRef<"Alliance", 'Int'>
    readonly driveScore: FieldRef<"Alliance", 'Int'>
    readonly matchId: FieldRef<"Alliance", 'String'>
    readonly createdAt: FieldRef<"Alliance", 'DateTime'>
    readonly updatedAt: FieldRef<"Alliance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alliance findUnique
   */
  export type AllianceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance findUniqueOrThrow
   */
  export type AllianceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance findFirst
   */
  export type AllianceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alliances.
     */
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance findFirstOrThrow
   */
  export type AllianceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliance to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alliances.
     */
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance findMany
   */
  export type AllianceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter, which Alliances to fetch.
     */
    where?: AllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alliances to fetch.
     */
    orderBy?: AllianceOrderByWithRelationInput | AllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alliances.
     */
    cursor?: AllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alliances.
     */
    skip?: number
    distinct?: AllianceScalarFieldEnum | AllianceScalarFieldEnum[]
  }

  /**
   * Alliance create
   */
  export type AllianceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The data needed to create a Alliance.
     */
    data: XOR<AllianceCreateInput, AllianceUncheckedCreateInput>
  }

  /**
   * Alliance createMany
   */
  export type AllianceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alliances.
     */
    data: AllianceCreateManyInput | AllianceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alliance createManyAndReturn
   */
  export type AllianceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * The data used to create many Alliances.
     */
    data: AllianceCreateManyInput | AllianceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alliance update
   */
  export type AllianceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The data needed to update a Alliance.
     */
    data: XOR<AllianceUpdateInput, AllianceUncheckedUpdateInput>
    /**
     * Choose, which Alliance to update.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance updateMany
   */
  export type AllianceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alliances.
     */
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyInput>
    /**
     * Filter which Alliances to update
     */
    where?: AllianceWhereInput
    /**
     * Limit how many Alliances to update.
     */
    limit?: number
  }

  /**
   * Alliance updateManyAndReturn
   */
  export type AllianceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * The data used to update Alliances.
     */
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyInput>
    /**
     * Filter which Alliances to update
     */
    where?: AllianceWhereInput
    /**
     * Limit how many Alliances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alliance upsert
   */
  export type AllianceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * The filter to search for the Alliance to update in case it exists.
     */
    where: AllianceWhereUniqueInput
    /**
     * In case the Alliance found by the `where` argument doesn't exist, create a new Alliance with this data.
     */
    create: XOR<AllianceCreateInput, AllianceUncheckedCreateInput>
    /**
     * In case the Alliance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AllianceUpdateInput, AllianceUncheckedUpdateInput>
  }

  /**
   * Alliance delete
   */
  export type AllianceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
    /**
     * Filter which Alliance to delete.
     */
    where: AllianceWhereUniqueInput
  }

  /**
   * Alliance deleteMany
   */
  export type AllianceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alliances to delete
     */
    where?: AllianceWhereInput
    /**
     * Limit how many Alliances to delete.
     */
    limit?: number
  }

  /**
   * Alliance.teamAlliances
   */
  export type Alliance$teamAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    where?: TeamAllianceWhereInput
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    cursor?: TeamAllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamAllianceScalarFieldEnum | TeamAllianceScalarFieldEnum[]
  }

  /**
   * Alliance.matchScores
   */
  export type Alliance$matchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    where?: MatchScoreWhereInput
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    cursor?: MatchScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * Alliance without action
   */
  export type AllianceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alliance
     */
    select?: AllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alliance
     */
    omit?: AllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AllianceInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    teamNumber: string | null
    name: string | null
    organization: string | null
    avatar: string | null
    description: string | null
    teamLead: string | null
    teamLeadId: string | null
    tournamentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    teamNumber: string | null
    name: string | null
    organization: string | null
    avatar: string | null
    description: string | null
    teamLead: string | null
    teamLeadId: string | null
    tournamentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    teamNumber: number
    name: number
    organization: number
    avatar: number
    description: number
    teamLead: number
    teamLeadId: number
    teamMembers: number
    tournamentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    teamNumber?: true
    name?: true
    organization?: true
    avatar?: true
    description?: true
    teamLead?: true
    teamLeadId?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    teamNumber?: true
    name?: true
    organization?: true
    avatar?: true
    description?: true
    teamLead?: true
    teamLeadId?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    teamNumber?: true
    name?: true
    organization?: true
    avatar?: true
    description?: true
    teamLead?: true
    teamLeadId?: true
    teamMembers?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    teamNumber: string
    name: string
    organization: string | null
    avatar: string | null
    description: string | null
    teamLead: string | null
    teamLeadId: string | null
    teamMembers: JsonValue | null
    tournamentId: string | null
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamNumber?: boolean
    name?: boolean
    organization?: boolean
    avatar?: boolean
    description?: boolean
    teamLead?: boolean
    teamLeadId?: boolean
    teamMembers?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
    teamAlliances?: boolean | Team$teamAlliancesArgs<ExtArgs>
    teamStats?: boolean | Team$teamStatsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamNumber?: boolean
    name?: boolean
    organization?: boolean
    avatar?: boolean
    description?: boolean
    teamLead?: boolean
    teamLeadId?: boolean
    teamMembers?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamNumber?: boolean
    name?: boolean
    organization?: boolean
    avatar?: boolean
    description?: boolean
    teamLead?: boolean
    teamLeadId?: boolean
    teamMembers?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    teamNumber?: boolean
    name?: boolean
    organization?: boolean
    avatar?: boolean
    description?: boolean
    teamLead?: boolean
    teamLeadId?: boolean
    teamMembers?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamNumber" | "name" | "organization" | "avatar" | "description" | "teamLead" | "teamLeadId" | "teamMembers" | "tournamentId" | "createdAt" | "updatedAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
    teamAlliances?: boolean | Team$teamAlliancesArgs<ExtArgs>
    teamStats?: boolean | Team$teamStatsArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
  }
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | Team$tournamentArgs<ExtArgs>
  }

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs> | null
      teamAlliances: Prisma.$TeamAlliancePayload<ExtArgs>[]
      teamStats: Prisma.$TeamStatsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamNumber: string
      name: string
      organization: string | null
      avatar: string | null
      description: string | null
      teamLead: string | null
      teamLeadId: string | null
      teamMembers: Prisma.JsonValue | null
      tournamentId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends Team$tournamentArgs<ExtArgs> = {}>(args?: Subset<T, Team$tournamentArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    teamAlliances<T extends Team$teamAlliancesArgs<ExtArgs> = {}>(args?: Subset<T, Team$teamAlliancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamStats<T extends Team$teamStatsArgs<ExtArgs> = {}>(args?: Subset<T, Team$teamStatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly teamNumber: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly organization: FieldRef<"Team", 'String'>
    readonly avatar: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly teamLead: FieldRef<"Team", 'String'>
    readonly teamLeadId: FieldRef<"Team", 'String'>
    readonly teamMembers: FieldRef<"Team", 'Json'>
    readonly tournamentId: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.tournament
   */
  export type Team$tournamentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tournament
     */
    select?: TournamentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tournament
     */
    omit?: TournamentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TournamentInclude<ExtArgs> | null
    where?: TournamentWhereInput
  }

  /**
   * Team.teamAlliances
   */
  export type Team$teamAlliancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    where?: TeamAllianceWhereInput
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    cursor?: TeamAllianceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamAllianceScalarFieldEnum | TeamAllianceScalarFieldEnum[]
  }

  /**
   * Team.teamStats
   */
  export type Team$teamStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    where?: TeamStatsWhereInput
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    cursor?: TeamStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamAlliance
   */

  export type AggregateTeamAlliance = {
    _count: TeamAllianceCountAggregateOutputType | null
    _avg: TeamAllianceAvgAggregateOutputType | null
    _sum: TeamAllianceSumAggregateOutputType | null
    _min: TeamAllianceMinAggregateOutputType | null
    _max: TeamAllianceMaxAggregateOutputType | null
  }

  export type TeamAllianceAvgAggregateOutputType = {
    stationPosition: number | null
  }

  export type TeamAllianceSumAggregateOutputType = {
    stationPosition: number | null
  }

  export type TeamAllianceMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    allianceId: string | null
    stationPosition: number | null
    isSurrogate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamAllianceMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    allianceId: string | null
    stationPosition: number | null
    isSurrogate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamAllianceCountAggregateOutputType = {
    id: number
    teamId: number
    allianceId: number
    stationPosition: number
    isSurrogate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamAllianceAvgAggregateInputType = {
    stationPosition?: true
  }

  export type TeamAllianceSumAggregateInputType = {
    stationPosition?: true
  }

  export type TeamAllianceMinAggregateInputType = {
    id?: true
    teamId?: true
    allianceId?: true
    stationPosition?: true
    isSurrogate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamAllianceMaxAggregateInputType = {
    id?: true
    teamId?: true
    allianceId?: true
    stationPosition?: true
    isSurrogate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamAllianceCountAggregateInputType = {
    id?: true
    teamId?: true
    allianceId?: true
    stationPosition?: true
    isSurrogate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAllianceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamAlliance to aggregate.
     */
    where?: TeamAllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAlliances to fetch.
     */
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamAllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAlliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAlliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamAlliances
    **/
    _count?: true | TeamAllianceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAllianceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamAllianceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamAllianceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamAllianceMaxAggregateInputType
  }

  export type GetTeamAllianceAggregateType<T extends TeamAllianceAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamAlliance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamAlliance[P]>
      : GetScalarType<T[P], AggregateTeamAlliance[P]>
  }




  export type TeamAllianceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamAllianceWhereInput
    orderBy?: TeamAllianceOrderByWithAggregationInput | TeamAllianceOrderByWithAggregationInput[]
    by: TeamAllianceScalarFieldEnum[] | TeamAllianceScalarFieldEnum
    having?: TeamAllianceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamAllianceCountAggregateInputType | true
    _avg?: TeamAllianceAvgAggregateInputType
    _sum?: TeamAllianceSumAggregateInputType
    _min?: TeamAllianceMinAggregateInputType
    _max?: TeamAllianceMaxAggregateInputType
  }

  export type TeamAllianceGroupByOutputType = {
    id: string
    teamId: string
    allianceId: string
    stationPosition: number
    isSurrogate: boolean
    createdAt: Date
    updatedAt: Date
    _count: TeamAllianceCountAggregateOutputType | null
    _avg: TeamAllianceAvgAggregateOutputType | null
    _sum: TeamAllianceSumAggregateOutputType | null
    _min: TeamAllianceMinAggregateOutputType | null
    _max: TeamAllianceMaxAggregateOutputType | null
  }

  type GetTeamAllianceGroupByPayload<T extends TeamAllianceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamAllianceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamAllianceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamAllianceGroupByOutputType[P]>
            : GetScalarType<T[P], TeamAllianceGroupByOutputType[P]>
        }
      >
    >


  export type TeamAllianceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    allianceId?: boolean
    stationPosition?: boolean
    isSurrogate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamAlliance"]>

  export type TeamAllianceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    allianceId?: boolean
    stationPosition?: boolean
    isSurrogate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamAlliance"]>

  export type TeamAllianceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    allianceId?: boolean
    stationPosition?: boolean
    isSurrogate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamAlliance"]>

  export type TeamAllianceSelectScalar = {
    id?: boolean
    teamId?: boolean
    allianceId?: boolean
    stationPosition?: boolean
    isSurrogate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamAllianceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "allianceId" | "stationPosition" | "isSurrogate" | "createdAt" | "updatedAt", ExtArgs["result"]["teamAlliance"]>
  export type TeamAllianceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }
  export type TeamAllianceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }
  export type TeamAllianceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
  }

  export type $TeamAlliancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamAlliance"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      alliance: Prisma.$AlliancePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      allianceId: string
      stationPosition: number
      isSurrogate: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teamAlliance"]>
    composites: {}
  }

  type TeamAllianceGetPayload<S extends boolean | null | undefined | TeamAllianceDefaultArgs> = $Result.GetResult<Prisma.$TeamAlliancePayload, S>

  type TeamAllianceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamAllianceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamAllianceCountAggregateInputType | true
    }

  export interface TeamAllianceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamAlliance'], meta: { name: 'TeamAlliance' } }
    /**
     * Find zero or one TeamAlliance that matches the filter.
     * @param {TeamAllianceFindUniqueArgs} args - Arguments to find a TeamAlliance
     * @example
     * // Get one TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamAllianceFindUniqueArgs>(args: SelectSubset<T, TeamAllianceFindUniqueArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamAlliance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamAllianceFindUniqueOrThrowArgs} args - Arguments to find a TeamAlliance
     * @example
     * // Get one TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamAllianceFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamAllianceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamAlliance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceFindFirstArgs} args - Arguments to find a TeamAlliance
     * @example
     * // Get one TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamAllianceFindFirstArgs>(args?: SelectSubset<T, TeamAllianceFindFirstArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamAlliance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceFindFirstOrThrowArgs} args - Arguments to find a TeamAlliance
     * @example
     * // Get one TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamAllianceFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamAllianceFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamAlliances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamAlliances
     * const teamAlliances = await prisma.teamAlliance.findMany()
     * 
     * // Get first 10 TeamAlliances
     * const teamAlliances = await prisma.teamAlliance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamAllianceWithIdOnly = await prisma.teamAlliance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamAllianceFindManyArgs>(args?: SelectSubset<T, TeamAllianceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamAlliance.
     * @param {TeamAllianceCreateArgs} args - Arguments to create a TeamAlliance.
     * @example
     * // Create one TeamAlliance
     * const TeamAlliance = await prisma.teamAlliance.create({
     *   data: {
     *     // ... data to create a TeamAlliance
     *   }
     * })
     * 
     */
    create<T extends TeamAllianceCreateArgs>(args: SelectSubset<T, TeamAllianceCreateArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamAlliances.
     * @param {TeamAllianceCreateManyArgs} args - Arguments to create many TeamAlliances.
     * @example
     * // Create many TeamAlliances
     * const teamAlliance = await prisma.teamAlliance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamAllianceCreateManyArgs>(args?: SelectSubset<T, TeamAllianceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamAlliances and returns the data saved in the database.
     * @param {TeamAllianceCreateManyAndReturnArgs} args - Arguments to create many TeamAlliances.
     * @example
     * // Create many TeamAlliances
     * const teamAlliance = await prisma.teamAlliance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamAlliances and only return the `id`
     * const teamAllianceWithIdOnly = await prisma.teamAlliance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamAllianceCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamAllianceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamAlliance.
     * @param {TeamAllianceDeleteArgs} args - Arguments to delete one TeamAlliance.
     * @example
     * // Delete one TeamAlliance
     * const TeamAlliance = await prisma.teamAlliance.delete({
     *   where: {
     *     // ... filter to delete one TeamAlliance
     *   }
     * })
     * 
     */
    delete<T extends TeamAllianceDeleteArgs>(args: SelectSubset<T, TeamAllianceDeleteArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamAlliance.
     * @param {TeamAllianceUpdateArgs} args - Arguments to update one TeamAlliance.
     * @example
     * // Update one TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamAllianceUpdateArgs>(args: SelectSubset<T, TeamAllianceUpdateArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamAlliances.
     * @param {TeamAllianceDeleteManyArgs} args - Arguments to filter TeamAlliances to delete.
     * @example
     * // Delete a few TeamAlliances
     * const { count } = await prisma.teamAlliance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamAllianceDeleteManyArgs>(args?: SelectSubset<T, TeamAllianceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamAlliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamAlliances
     * const teamAlliance = await prisma.teamAlliance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamAllianceUpdateManyArgs>(args: SelectSubset<T, TeamAllianceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamAlliances and returns the data updated in the database.
     * @param {TeamAllianceUpdateManyAndReturnArgs} args - Arguments to update many TeamAlliances.
     * @example
     * // Update many TeamAlliances
     * const teamAlliance = await prisma.teamAlliance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamAlliances and only return the `id`
     * const teamAllianceWithIdOnly = await prisma.teamAlliance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamAllianceUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamAllianceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamAlliance.
     * @param {TeamAllianceUpsertArgs} args - Arguments to update or create a TeamAlliance.
     * @example
     * // Update or create a TeamAlliance
     * const teamAlliance = await prisma.teamAlliance.upsert({
     *   create: {
     *     // ... data to create a TeamAlliance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamAlliance we want to update
     *   }
     * })
     */
    upsert<T extends TeamAllianceUpsertArgs>(args: SelectSubset<T, TeamAllianceUpsertArgs<ExtArgs>>): Prisma__TeamAllianceClient<$Result.GetResult<Prisma.$TeamAlliancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamAlliances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceCountArgs} args - Arguments to filter TeamAlliances to count.
     * @example
     * // Count the number of TeamAlliances
     * const count = await prisma.teamAlliance.count({
     *   where: {
     *     // ... the filter for the TeamAlliances we want to count
     *   }
     * })
    **/
    count<T extends TeamAllianceCountArgs>(
      args?: Subset<T, TeamAllianceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamAllianceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamAlliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAllianceAggregateArgs>(args: Subset<T, TeamAllianceAggregateArgs>): Prisma.PrismaPromise<GetTeamAllianceAggregateType<T>>

    /**
     * Group by TeamAlliance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAllianceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamAllianceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamAllianceGroupByArgs['orderBy'] }
        : { orderBy?: TeamAllianceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamAllianceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamAllianceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamAlliance model
   */
  readonly fields: TeamAllianceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamAlliance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamAllianceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alliance<T extends AllianceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AllianceDefaultArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamAlliance model
   */
  interface TeamAllianceFieldRefs {
    readonly id: FieldRef<"TeamAlliance", 'String'>
    readonly teamId: FieldRef<"TeamAlliance", 'String'>
    readonly allianceId: FieldRef<"TeamAlliance", 'String'>
    readonly stationPosition: FieldRef<"TeamAlliance", 'Int'>
    readonly isSurrogate: FieldRef<"TeamAlliance", 'Boolean'>
    readonly createdAt: FieldRef<"TeamAlliance", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamAlliance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamAlliance findUnique
   */
  export type TeamAllianceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter, which TeamAlliance to fetch.
     */
    where: TeamAllianceWhereUniqueInput
  }

  /**
   * TeamAlliance findUniqueOrThrow
   */
  export type TeamAllianceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter, which TeamAlliance to fetch.
     */
    where: TeamAllianceWhereUniqueInput
  }

  /**
   * TeamAlliance findFirst
   */
  export type TeamAllianceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter, which TeamAlliance to fetch.
     */
    where?: TeamAllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAlliances to fetch.
     */
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamAlliances.
     */
    cursor?: TeamAllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAlliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAlliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamAlliances.
     */
    distinct?: TeamAllianceScalarFieldEnum | TeamAllianceScalarFieldEnum[]
  }

  /**
   * TeamAlliance findFirstOrThrow
   */
  export type TeamAllianceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter, which TeamAlliance to fetch.
     */
    where?: TeamAllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAlliances to fetch.
     */
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamAlliances.
     */
    cursor?: TeamAllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAlliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAlliances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamAlliances.
     */
    distinct?: TeamAllianceScalarFieldEnum | TeamAllianceScalarFieldEnum[]
  }

  /**
   * TeamAlliance findMany
   */
  export type TeamAllianceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter, which TeamAlliances to fetch.
     */
    where?: TeamAllianceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamAlliances to fetch.
     */
    orderBy?: TeamAllianceOrderByWithRelationInput | TeamAllianceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamAlliances.
     */
    cursor?: TeamAllianceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamAlliances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamAlliances.
     */
    skip?: number
    distinct?: TeamAllianceScalarFieldEnum | TeamAllianceScalarFieldEnum[]
  }

  /**
   * TeamAlliance create
   */
  export type TeamAllianceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamAlliance.
     */
    data: XOR<TeamAllianceCreateInput, TeamAllianceUncheckedCreateInput>
  }

  /**
   * TeamAlliance createMany
   */
  export type TeamAllianceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamAlliances.
     */
    data: TeamAllianceCreateManyInput | TeamAllianceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamAlliance createManyAndReturn
   */
  export type TeamAllianceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * The data used to create many TeamAlliances.
     */
    data: TeamAllianceCreateManyInput | TeamAllianceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamAlliance update
   */
  export type TeamAllianceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamAlliance.
     */
    data: XOR<TeamAllianceUpdateInput, TeamAllianceUncheckedUpdateInput>
    /**
     * Choose, which TeamAlliance to update.
     */
    where: TeamAllianceWhereUniqueInput
  }

  /**
   * TeamAlliance updateMany
   */
  export type TeamAllianceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamAlliances.
     */
    data: XOR<TeamAllianceUpdateManyMutationInput, TeamAllianceUncheckedUpdateManyInput>
    /**
     * Filter which TeamAlliances to update
     */
    where?: TeamAllianceWhereInput
    /**
     * Limit how many TeamAlliances to update.
     */
    limit?: number
  }

  /**
   * TeamAlliance updateManyAndReturn
   */
  export type TeamAllianceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * The data used to update TeamAlliances.
     */
    data: XOR<TeamAllianceUpdateManyMutationInput, TeamAllianceUncheckedUpdateManyInput>
    /**
     * Filter which TeamAlliances to update
     */
    where?: TeamAllianceWhereInput
    /**
     * Limit how many TeamAlliances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamAlliance upsert
   */
  export type TeamAllianceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamAlliance to update in case it exists.
     */
    where: TeamAllianceWhereUniqueInput
    /**
     * In case the TeamAlliance found by the `where` argument doesn't exist, create a new TeamAlliance with this data.
     */
    create: XOR<TeamAllianceCreateInput, TeamAllianceUncheckedCreateInput>
    /**
     * In case the TeamAlliance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamAllianceUpdateInput, TeamAllianceUncheckedUpdateInput>
  }

  /**
   * TeamAlliance delete
   */
  export type TeamAllianceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
    /**
     * Filter which TeamAlliance to delete.
     */
    where: TeamAllianceWhereUniqueInput
  }

  /**
   * TeamAlliance deleteMany
   */
  export type TeamAllianceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamAlliances to delete
     */
    where?: TeamAllianceWhereInput
    /**
     * Limit how many TeamAlliances to delete.
     */
    limit?: number
  }

  /**
   * TeamAlliance without action
   */
  export type TeamAllianceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamAlliance
     */
    select?: TeamAllianceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamAlliance
     */
    omit?: TeamAllianceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamAllianceInclude<ExtArgs> | null
  }


  /**
   * Model TeamStats
   */

  export type AggregateTeamStats = {
    _count: TeamStatsCountAggregateOutputType | null
    _avg: TeamStatsAvgAggregateOutputType | null
    _sum: TeamStatsSumAggregateOutputType | null
    _min: TeamStatsMinAggregateOutputType | null
    _max: TeamStatsMaxAggregateOutputType | null
  }

  export type TeamStatsAvgAggregateOutputType = {
    wins: number | null
    losses: number | null
    ties: number | null
    pointsScored: number | null
    pointsConceded: number | null
    matchesPlayed: number | null
    rankingPoints: number | null
    opponentWinPercentage: number | null
    pointDifferential: number | null
    rank: number | null
    tiebreaker1: number | null
    tiebreaker2: number | null
  }

  export type TeamStatsSumAggregateOutputType = {
    wins: number | null
    losses: number | null
    ties: number | null
    pointsScored: number | null
    pointsConceded: number | null
    matchesPlayed: number | null
    rankingPoints: number | null
    opponentWinPercentage: number | null
    pointDifferential: number | null
    rank: number | null
    tiebreaker1: number | null
    tiebreaker2: number | null
  }

  export type TeamStatsMinAggregateOutputType = {
    id: string | null
    teamId: string | null
    tournamentId: string | null
    stageId: string | null
    wins: number | null
    losses: number | null
    ties: number | null
    pointsScored: number | null
    pointsConceded: number | null
    matchesPlayed: number | null
    rankingPoints: number | null
    opponentWinPercentage: number | null
    pointDifferential: number | null
    rank: number | null
    tiebreaker1: number | null
    tiebreaker2: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamStatsMaxAggregateOutputType = {
    id: string | null
    teamId: string | null
    tournamentId: string | null
    stageId: string | null
    wins: number | null
    losses: number | null
    ties: number | null
    pointsScored: number | null
    pointsConceded: number | null
    matchesPlayed: number | null
    rankingPoints: number | null
    opponentWinPercentage: number | null
    pointDifferential: number | null
    rank: number | null
    tiebreaker1: number | null
    tiebreaker2: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamStatsCountAggregateOutputType = {
    id: number
    teamId: number
    tournamentId: number
    stageId: number
    wins: number
    losses: number
    ties: number
    pointsScored: number
    pointsConceded: number
    matchesPlayed: number
    rankingPoints: number
    opponentWinPercentage: number
    pointDifferential: number
    rank: number
    tiebreaker1: number
    tiebreaker2: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamStatsAvgAggregateInputType = {
    wins?: true
    losses?: true
    ties?: true
    pointsScored?: true
    pointsConceded?: true
    matchesPlayed?: true
    rankingPoints?: true
    opponentWinPercentage?: true
    pointDifferential?: true
    rank?: true
    tiebreaker1?: true
    tiebreaker2?: true
  }

  export type TeamStatsSumAggregateInputType = {
    wins?: true
    losses?: true
    ties?: true
    pointsScored?: true
    pointsConceded?: true
    matchesPlayed?: true
    rankingPoints?: true
    opponentWinPercentage?: true
    pointDifferential?: true
    rank?: true
    tiebreaker1?: true
    tiebreaker2?: true
  }

  export type TeamStatsMinAggregateInputType = {
    id?: true
    teamId?: true
    tournamentId?: true
    stageId?: true
    wins?: true
    losses?: true
    ties?: true
    pointsScored?: true
    pointsConceded?: true
    matchesPlayed?: true
    rankingPoints?: true
    opponentWinPercentage?: true
    pointDifferential?: true
    rank?: true
    tiebreaker1?: true
    tiebreaker2?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamStatsMaxAggregateInputType = {
    id?: true
    teamId?: true
    tournamentId?: true
    stageId?: true
    wins?: true
    losses?: true
    ties?: true
    pointsScored?: true
    pointsConceded?: true
    matchesPlayed?: true
    rankingPoints?: true
    opponentWinPercentage?: true
    pointDifferential?: true
    rank?: true
    tiebreaker1?: true
    tiebreaker2?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamStatsCountAggregateInputType = {
    id?: true
    teamId?: true
    tournamentId?: true
    stageId?: true
    wins?: true
    losses?: true
    ties?: true
    pointsScored?: true
    pointsConceded?: true
    matchesPlayed?: true
    rankingPoints?: true
    opponentWinPercentage?: true
    pointDifferential?: true
    rank?: true
    tiebreaker1?: true
    tiebreaker2?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamStats to aggregate.
     */
    where?: TeamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStats to fetch.
     */
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamStats
    **/
    _count?: true | TeamStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamStatsMaxAggregateInputType
  }

  export type GetTeamStatsAggregateType<T extends TeamStatsAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamStats[P]>
      : GetScalarType<T[P], AggregateTeamStats[P]>
  }




  export type TeamStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamStatsWhereInput
    orderBy?: TeamStatsOrderByWithAggregationInput | TeamStatsOrderByWithAggregationInput[]
    by: TeamStatsScalarFieldEnum[] | TeamStatsScalarFieldEnum
    having?: TeamStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamStatsCountAggregateInputType | true
    _avg?: TeamStatsAvgAggregateInputType
    _sum?: TeamStatsSumAggregateInputType
    _min?: TeamStatsMinAggregateInputType
    _max?: TeamStatsMaxAggregateInputType
  }

  export type TeamStatsGroupByOutputType = {
    id: string
    teamId: string
    tournamentId: string
    stageId: string | null
    wins: number
    losses: number
    ties: number
    pointsScored: number
    pointsConceded: number
    matchesPlayed: number
    rankingPoints: number
    opponentWinPercentage: number
    pointDifferential: number
    rank: number | null
    tiebreaker1: number
    tiebreaker2: number
    createdAt: Date
    updatedAt: Date
    _count: TeamStatsCountAggregateOutputType | null
    _avg: TeamStatsAvgAggregateOutputType | null
    _sum: TeamStatsSumAggregateOutputType | null
    _min: TeamStatsMinAggregateOutputType | null
    _max: TeamStatsMaxAggregateOutputType | null
  }

  type GetTeamStatsGroupByPayload<T extends TeamStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamStatsGroupByOutputType[P]>
            : GetScalarType<T[P], TeamStatsGroupByOutputType[P]>
        }
      >
    >


  export type TeamStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    tournamentId?: boolean
    stageId?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    pointsScored?: boolean
    pointsConceded?: boolean
    matchesPlayed?: boolean
    rankingPoints?: boolean
    opponentWinPercentage?: boolean
    pointDifferential?: boolean
    rank?: boolean
    tiebreaker1?: boolean
    tiebreaker2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }, ExtArgs["result"]["teamStats"]>

  export type TeamStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    tournamentId?: boolean
    stageId?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    pointsScored?: boolean
    pointsConceded?: boolean
    matchesPlayed?: boolean
    rankingPoints?: boolean
    opponentWinPercentage?: boolean
    pointDifferential?: boolean
    rank?: boolean
    tiebreaker1?: boolean
    tiebreaker2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }, ExtArgs["result"]["teamStats"]>

  export type TeamStatsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teamId?: boolean
    tournamentId?: boolean
    stageId?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    pointsScored?: boolean
    pointsConceded?: boolean
    matchesPlayed?: boolean
    rankingPoints?: boolean
    opponentWinPercentage?: boolean
    pointDifferential?: boolean
    rank?: boolean
    tiebreaker1?: boolean
    tiebreaker2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }, ExtArgs["result"]["teamStats"]>

  export type TeamStatsSelectScalar = {
    id?: boolean
    teamId?: boolean
    tournamentId?: boolean
    stageId?: boolean
    wins?: boolean
    losses?: boolean
    ties?: boolean
    pointsScored?: boolean
    pointsConceded?: boolean
    matchesPlayed?: boolean
    rankingPoints?: boolean
    opponentWinPercentage?: boolean
    pointDifferential?: boolean
    rank?: boolean
    tiebreaker1?: boolean
    tiebreaker2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamStatsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teamId" | "tournamentId" | "stageId" | "wins" | "losses" | "ties" | "pointsScored" | "pointsConceded" | "matchesPlayed" | "rankingPoints" | "opponentWinPercentage" | "pointDifferential" | "rank" | "tiebreaker1" | "tiebreaker2" | "createdAt" | "updatedAt", ExtArgs["result"]["teamStats"]>
  export type TeamStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }
  export type TeamStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }
  export type TeamStatsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    stage?: boolean | TeamStats$stageArgs<ExtArgs>
  }

  export type $TeamStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamStats"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      tournament: Prisma.$TournamentPayload<ExtArgs>
      stage: Prisma.$StagePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teamId: string
      tournamentId: string
      stageId: string | null
      wins: number
      losses: number
      ties: number
      pointsScored: number
      pointsConceded: number
      matchesPlayed: number
      rankingPoints: number
      opponentWinPercentage: number
      pointDifferential: number
      rank: number | null
      tiebreaker1: number
      tiebreaker2: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teamStats"]>
    composites: {}
  }

  type TeamStatsGetPayload<S extends boolean | null | undefined | TeamStatsDefaultArgs> = $Result.GetResult<Prisma.$TeamStatsPayload, S>

  type TeamStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamStatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamStatsCountAggregateInputType | true
    }

  export interface TeamStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamStats'], meta: { name: 'TeamStats' } }
    /**
     * Find zero or one TeamStats that matches the filter.
     * @param {TeamStatsFindUniqueArgs} args - Arguments to find a TeamStats
     * @example
     * // Get one TeamStats
     * const teamStats = await prisma.teamStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamStatsFindUniqueArgs>(args: SelectSubset<T, TeamStatsFindUniqueArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamStats that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamStatsFindUniqueOrThrowArgs} args - Arguments to find a TeamStats
     * @example
     * // Get one TeamStats
     * const teamStats = await prisma.teamStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsFindFirstArgs} args - Arguments to find a TeamStats
     * @example
     * // Get one TeamStats
     * const teamStats = await prisma.teamStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamStatsFindFirstArgs>(args?: SelectSubset<T, TeamStatsFindFirstArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsFindFirstOrThrowArgs} args - Arguments to find a TeamStats
     * @example
     * // Get one TeamStats
     * const teamStats = await prisma.teamStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamStats
     * const teamStats = await prisma.teamStats.findMany()
     * 
     * // Get first 10 TeamStats
     * const teamStats = await prisma.teamStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamStatsWithIdOnly = await prisma.teamStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamStatsFindManyArgs>(args?: SelectSubset<T, TeamStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamStats.
     * @param {TeamStatsCreateArgs} args - Arguments to create a TeamStats.
     * @example
     * // Create one TeamStats
     * const TeamStats = await prisma.teamStats.create({
     *   data: {
     *     // ... data to create a TeamStats
     *   }
     * })
     * 
     */
    create<T extends TeamStatsCreateArgs>(args: SelectSubset<T, TeamStatsCreateArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamStats.
     * @param {TeamStatsCreateManyArgs} args - Arguments to create many TeamStats.
     * @example
     * // Create many TeamStats
     * const teamStats = await prisma.teamStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamStatsCreateManyArgs>(args?: SelectSubset<T, TeamStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamStats and returns the data saved in the database.
     * @param {TeamStatsCreateManyAndReturnArgs} args - Arguments to create many TeamStats.
     * @example
     * // Create many TeamStats
     * const teamStats = await prisma.teamStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamStats and only return the `id`
     * const teamStatsWithIdOnly = await prisma.teamStats.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamStats.
     * @param {TeamStatsDeleteArgs} args - Arguments to delete one TeamStats.
     * @example
     * // Delete one TeamStats
     * const TeamStats = await prisma.teamStats.delete({
     *   where: {
     *     // ... filter to delete one TeamStats
     *   }
     * })
     * 
     */
    delete<T extends TeamStatsDeleteArgs>(args: SelectSubset<T, TeamStatsDeleteArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamStats.
     * @param {TeamStatsUpdateArgs} args - Arguments to update one TeamStats.
     * @example
     * // Update one TeamStats
     * const teamStats = await prisma.teamStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamStatsUpdateArgs>(args: SelectSubset<T, TeamStatsUpdateArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamStats.
     * @param {TeamStatsDeleteManyArgs} args - Arguments to filter TeamStats to delete.
     * @example
     * // Delete a few TeamStats
     * const { count } = await prisma.teamStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamStatsDeleteManyArgs>(args?: SelectSubset<T, TeamStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamStats
     * const teamStats = await prisma.teamStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamStatsUpdateManyArgs>(args: SelectSubset<T, TeamStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamStats and returns the data updated in the database.
     * @param {TeamStatsUpdateManyAndReturnArgs} args - Arguments to update many TeamStats.
     * @example
     * // Update many TeamStats
     * const teamStats = await prisma.teamStats.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamStats and only return the `id`
     * const teamStatsWithIdOnly = await prisma.teamStats.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamStatsUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamStatsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamStats.
     * @param {TeamStatsUpsertArgs} args - Arguments to update or create a TeamStats.
     * @example
     * // Update or create a TeamStats
     * const teamStats = await prisma.teamStats.upsert({
     *   create: {
     *     // ... data to create a TeamStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamStats we want to update
     *   }
     * })
     */
    upsert<T extends TeamStatsUpsertArgs>(args: SelectSubset<T, TeamStatsUpsertArgs<ExtArgs>>): Prisma__TeamStatsClient<$Result.GetResult<Prisma.$TeamStatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsCountArgs} args - Arguments to filter TeamStats to count.
     * @example
     * // Count the number of TeamStats
     * const count = await prisma.teamStats.count({
     *   where: {
     *     // ... the filter for the TeamStats we want to count
     *   }
     * })
    **/
    count<T extends TeamStatsCountArgs>(
      args?: Subset<T, TeamStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamStatsAggregateArgs>(args: Subset<T, TeamStatsAggregateArgs>): Prisma.PrismaPromise<GetTeamStatsAggregateType<T>>

    /**
     * Group by TeamStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamStatsGroupByArgs['orderBy'] }
        : { orderBy?: TeamStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamStats model
   */
  readonly fields: TeamStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stage<T extends TeamStats$stageArgs<ExtArgs> = {}>(args?: Subset<T, TeamStats$stageArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamStats model
   */
  interface TeamStatsFieldRefs {
    readonly id: FieldRef<"TeamStats", 'String'>
    readonly teamId: FieldRef<"TeamStats", 'String'>
    readonly tournamentId: FieldRef<"TeamStats", 'String'>
    readonly stageId: FieldRef<"TeamStats", 'String'>
    readonly wins: FieldRef<"TeamStats", 'Int'>
    readonly losses: FieldRef<"TeamStats", 'Int'>
    readonly ties: FieldRef<"TeamStats", 'Int'>
    readonly pointsScored: FieldRef<"TeamStats", 'Int'>
    readonly pointsConceded: FieldRef<"TeamStats", 'Int'>
    readonly matchesPlayed: FieldRef<"TeamStats", 'Int'>
    readonly rankingPoints: FieldRef<"TeamStats", 'Int'>
    readonly opponentWinPercentage: FieldRef<"TeamStats", 'Float'>
    readonly pointDifferential: FieldRef<"TeamStats", 'Int'>
    readonly rank: FieldRef<"TeamStats", 'Int'>
    readonly tiebreaker1: FieldRef<"TeamStats", 'Float'>
    readonly tiebreaker2: FieldRef<"TeamStats", 'Float'>
    readonly createdAt: FieldRef<"TeamStats", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamStats", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeamStats findUnique
   */
  export type TeamStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter, which TeamStats to fetch.
     */
    where: TeamStatsWhereUniqueInput
  }

  /**
   * TeamStats findUniqueOrThrow
   */
  export type TeamStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter, which TeamStats to fetch.
     */
    where: TeamStatsWhereUniqueInput
  }

  /**
   * TeamStats findFirst
   */
  export type TeamStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter, which TeamStats to fetch.
     */
    where?: TeamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStats to fetch.
     */
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStats.
     */
    cursor?: TeamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStats.
     */
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * TeamStats findFirstOrThrow
   */
  export type TeamStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter, which TeamStats to fetch.
     */
    where?: TeamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStats to fetch.
     */
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamStats.
     */
    cursor?: TeamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamStats.
     */
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * TeamStats findMany
   */
  export type TeamStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter, which TeamStats to fetch.
     */
    where?: TeamStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamStats to fetch.
     */
    orderBy?: TeamStatsOrderByWithRelationInput | TeamStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamStats.
     */
    cursor?: TeamStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamStats.
     */
    skip?: number
    distinct?: TeamStatsScalarFieldEnum | TeamStatsScalarFieldEnum[]
  }

  /**
   * TeamStats create
   */
  export type TeamStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamStats.
     */
    data: XOR<TeamStatsCreateInput, TeamStatsUncheckedCreateInput>
  }

  /**
   * TeamStats createMany
   */
  export type TeamStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamStats.
     */
    data: TeamStatsCreateManyInput | TeamStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamStats createManyAndReturn
   */
  export type TeamStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * The data used to create many TeamStats.
     */
    data: TeamStatsCreateManyInput | TeamStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamStats update
   */
  export type TeamStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamStats.
     */
    data: XOR<TeamStatsUpdateInput, TeamStatsUncheckedUpdateInput>
    /**
     * Choose, which TeamStats to update.
     */
    where: TeamStatsWhereUniqueInput
  }

  /**
   * TeamStats updateMany
   */
  export type TeamStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamStats.
     */
    data: XOR<TeamStatsUpdateManyMutationInput, TeamStatsUncheckedUpdateManyInput>
    /**
     * Filter which TeamStats to update
     */
    where?: TeamStatsWhereInput
    /**
     * Limit how many TeamStats to update.
     */
    limit?: number
  }

  /**
   * TeamStats updateManyAndReturn
   */
  export type TeamStatsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * The data used to update TeamStats.
     */
    data: XOR<TeamStatsUpdateManyMutationInput, TeamStatsUncheckedUpdateManyInput>
    /**
     * Filter which TeamStats to update
     */
    where?: TeamStatsWhereInput
    /**
     * Limit how many TeamStats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamStats upsert
   */
  export type TeamStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamStats to update in case it exists.
     */
    where: TeamStatsWhereUniqueInput
    /**
     * In case the TeamStats found by the `where` argument doesn't exist, create a new TeamStats with this data.
     */
    create: XOR<TeamStatsCreateInput, TeamStatsUncheckedCreateInput>
    /**
     * In case the TeamStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamStatsUpdateInput, TeamStatsUncheckedUpdateInput>
  }

  /**
   * TeamStats delete
   */
  export type TeamStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
    /**
     * Filter which TeamStats to delete.
     */
    where: TeamStatsWhereUniqueInput
  }

  /**
   * TeamStats deleteMany
   */
  export type TeamStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamStats to delete
     */
    where?: TeamStatsWhereInput
    /**
     * Limit how many TeamStats to delete.
     */
    limit?: number
  }

  /**
   * TeamStats.stage
   */
  export type TeamStats$stageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
  }

  /**
   * TeamStats without action
   */
  export type TeamStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamStats
     */
    select?: TeamStatsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamStats
     */
    omit?: TeamStatsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamStatsInclude<ExtArgs> | null
  }


  /**
   * Model Field
   */

  export type AggregateField = {
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  export type FieldAvgAggregateOutputType = {
    number: number | null
  }

  export type FieldSumAggregateOutputType = {
    number: number | null
  }

  export type FieldMinAggregateOutputType = {
    id: string | null
    name: string | null
    number: number | null
    location: string | null
    description: string | null
    tournamentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldMaxAggregateOutputType = {
    id: string | null
    name: string | null
    number: number | null
    location: string | null
    description: string | null
    tournamentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldCountAggregateOutputType = {
    id: number
    name: number
    number: number
    location: number
    description: number
    tournamentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FieldAvgAggregateInputType = {
    number?: true
  }

  export type FieldSumAggregateInputType = {
    number?: true
  }

  export type FieldMinAggregateInputType = {
    id?: true
    name?: true
    number?: true
    location?: true
    description?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldMaxAggregateInputType = {
    id?: true
    name?: true
    number?: true
    location?: true
    description?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldCountAggregateInputType = {
    id?: true
    name?: true
    number?: true
    location?: true
    description?: true
    tournamentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Field to aggregate.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Fields
    **/
    _count?: true | FieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldMaxAggregateInputType
  }

  export type GetFieldAggregateType<T extends FieldAggregateArgs> = {
        [P in keyof T & keyof AggregateField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateField[P]>
      : GetScalarType<T[P], AggregateField[P]>
  }




  export type FieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldWhereInput
    orderBy?: FieldOrderByWithAggregationInput | FieldOrderByWithAggregationInput[]
    by: FieldScalarFieldEnum[] | FieldScalarFieldEnum
    having?: FieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldCountAggregateInputType | true
    _avg?: FieldAvgAggregateInputType
    _sum?: FieldSumAggregateInputType
    _min?: FieldMinAggregateInputType
    _max?: FieldMaxAggregateInputType
  }

  export type FieldGroupByOutputType = {
    id: string
    name: string
    number: number
    location: string | null
    description: string | null
    tournamentId: string
    createdAt: Date
    updatedAt: Date
    _count: FieldCountAggregateOutputType | null
    _avg: FieldAvgAggregateOutputType | null
    _sum: FieldSumAggregateOutputType | null
    _min: FieldMinAggregateOutputType | null
    _max: FieldMaxAggregateOutputType | null
  }

  type GetFieldGroupByPayload<T extends FieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldGroupByOutputType[P]>
            : GetScalarType<T[P], FieldGroupByOutputType[P]>
        }
      >
    >


  export type FieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    location?: boolean
    description?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | Field$matchesArgs<ExtArgs>
    fieldDisplay?: boolean | Field$fieldDisplayArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    location?: boolean
    description?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    number?: boolean
    location?: boolean
    description?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["field"]>

  export type FieldSelectScalar = {
    id?: boolean
    name?: boolean
    number?: boolean
    location?: boolean
    description?: boolean
    tournamentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FieldOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "number" | "location" | "description" | "tournamentId" | "createdAt" | "updatedAt", ExtArgs["result"]["field"]>
  export type FieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    matches?: boolean | Field$matchesArgs<ExtArgs>
    fieldDisplay?: boolean | Field$fieldDisplayArgs<ExtArgs>
    _count?: boolean | FieldCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }
  export type FieldIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }

  export type $FieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Field"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      matches: Prisma.$MatchPayload<ExtArgs>[]
      fieldDisplay: Prisma.$FieldDisplayPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      number: number
      location: string | null
      description: string | null
      tournamentId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["field"]>
    composites: {}
  }

  type FieldGetPayload<S extends boolean | null | undefined | FieldDefaultArgs> = $Result.GetResult<Prisma.$FieldPayload, S>

  type FieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FieldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FieldCountAggregateInputType | true
    }

  export interface FieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Field'], meta: { name: 'Field' } }
    /**
     * Find zero or one Field that matches the filter.
     * @param {FieldFindUniqueArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldFindUniqueArgs>(args: SelectSubset<T, FieldFindUniqueArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Field that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FieldFindUniqueOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Field that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldFindFirstArgs>(args?: SelectSubset<T, FieldFindFirstArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Field that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindFirstOrThrowArgs} args - Arguments to find a Field
     * @example
     * // Get one Field
     * const field = await prisma.field.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Fields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fields
     * const fields = await prisma.field.findMany()
     * 
     * // Get first 10 Fields
     * const fields = await prisma.field.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldWithIdOnly = await prisma.field.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldFindManyArgs>(args?: SelectSubset<T, FieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Field.
     * @param {FieldCreateArgs} args - Arguments to create a Field.
     * @example
     * // Create one Field
     * const Field = await prisma.field.create({
     *   data: {
     *     // ... data to create a Field
     *   }
     * })
     * 
     */
    create<T extends FieldCreateArgs>(args: SelectSubset<T, FieldCreateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Fields.
     * @param {FieldCreateManyArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldCreateManyArgs>(args?: SelectSubset<T, FieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fields and returns the data saved in the database.
     * @param {FieldCreateManyAndReturnArgs} args - Arguments to create many Fields.
     * @example
     * // Create many Fields
     * const field = await prisma.field.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fields and only return the `id`
     * const fieldWithIdOnly = await prisma.field.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Field.
     * @param {FieldDeleteArgs} args - Arguments to delete one Field.
     * @example
     * // Delete one Field
     * const Field = await prisma.field.delete({
     *   where: {
     *     // ... filter to delete one Field
     *   }
     * })
     * 
     */
    delete<T extends FieldDeleteArgs>(args: SelectSubset<T, FieldDeleteArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Field.
     * @param {FieldUpdateArgs} args - Arguments to update one Field.
     * @example
     * // Update one Field
     * const field = await prisma.field.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldUpdateArgs>(args: SelectSubset<T, FieldUpdateArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Fields.
     * @param {FieldDeleteManyArgs} args - Arguments to filter Fields to delete.
     * @example
     * // Delete a few Fields
     * const { count } = await prisma.field.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldDeleteManyArgs>(args?: SelectSubset<T, FieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fields
     * const field = await prisma.field.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldUpdateManyArgs>(args: SelectSubset<T, FieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fields and returns the data updated in the database.
     * @param {FieldUpdateManyAndReturnArgs} args - Arguments to update many Fields.
     * @example
     * // Update many Fields
     * const field = await prisma.field.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Fields and only return the `id`
     * const fieldWithIdOnly = await prisma.field.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FieldUpdateManyAndReturnArgs>(args: SelectSubset<T, FieldUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Field.
     * @param {FieldUpsertArgs} args - Arguments to update or create a Field.
     * @example
     * // Update or create a Field
     * const field = await prisma.field.upsert({
     *   create: {
     *     // ... data to create a Field
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Field we want to update
     *   }
     * })
     */
    upsert<T extends FieldUpsertArgs>(args: SelectSubset<T, FieldUpsertArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Fields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldCountArgs} args - Arguments to filter Fields to count.
     * @example
     * // Count the number of Fields
     * const count = await prisma.field.count({
     *   where: {
     *     // ... the filter for the Fields we want to count
     *   }
     * })
    **/
    count<T extends FieldCountArgs>(
      args?: Subset<T, FieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldAggregateArgs>(args: Subset<T, FieldAggregateArgs>): Prisma.PrismaPromise<GetFieldAggregateType<T>>

    /**
     * Group by Field.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldGroupByArgs['orderBy'] }
        : { orderBy?: FieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Field model
   */
  readonly fields: FieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Field.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matches<T extends Field$matchesArgs<ExtArgs> = {}>(args?: Subset<T, Field$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fieldDisplay<T extends Field$fieldDisplayArgs<ExtArgs> = {}>(args?: Subset<T, Field$fieldDisplayArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Field model
   */
  interface FieldFieldRefs {
    readonly id: FieldRef<"Field", 'String'>
    readonly name: FieldRef<"Field", 'String'>
    readonly number: FieldRef<"Field", 'Int'>
    readonly location: FieldRef<"Field", 'String'>
    readonly description: FieldRef<"Field", 'String'>
    readonly tournamentId: FieldRef<"Field", 'String'>
    readonly createdAt: FieldRef<"Field", 'DateTime'>
    readonly updatedAt: FieldRef<"Field", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Field findUnique
   */
  export type FieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findUniqueOrThrow
   */
  export type FieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field findFirst
   */
  export type FieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findFirstOrThrow
   */
  export type FieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Field to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Fields.
     */
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field findMany
   */
  export type FieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter, which Fields to fetch.
     */
    where?: FieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Fields to fetch.
     */
    orderBy?: FieldOrderByWithRelationInput | FieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Fields.
     */
    cursor?: FieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Fields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Fields.
     */
    skip?: number
    distinct?: FieldScalarFieldEnum | FieldScalarFieldEnum[]
  }

  /**
   * Field create
   */
  export type FieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to create a Field.
     */
    data: XOR<FieldCreateInput, FieldUncheckedCreateInput>
  }

  /**
   * Field createMany
   */
  export type FieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Field createManyAndReturn
   */
  export type FieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * The data used to create many Fields.
     */
    data: FieldCreateManyInput | FieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Field update
   */
  export type FieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The data needed to update a Field.
     */
    data: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
    /**
     * Choose, which Field to update.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field updateMany
   */
  export type FieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Fields.
     */
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyInput>
    /**
     * Filter which Fields to update
     */
    where?: FieldWhereInput
    /**
     * Limit how many Fields to update.
     */
    limit?: number
  }

  /**
   * Field updateManyAndReturn
   */
  export type FieldUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * The data used to update Fields.
     */
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyInput>
    /**
     * Filter which Fields to update
     */
    where?: FieldWhereInput
    /**
     * Limit how many Fields to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Field upsert
   */
  export type FieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * The filter to search for the Field to update in case it exists.
     */
    where: FieldWhereUniqueInput
    /**
     * In case the Field found by the `where` argument doesn't exist, create a new Field with this data.
     */
    create: XOR<FieldCreateInput, FieldUncheckedCreateInput>
    /**
     * In case the Field was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldUpdateInput, FieldUncheckedUpdateInput>
  }

  /**
   * Field delete
   */
  export type FieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
    /**
     * Filter which Field to delete.
     */
    where: FieldWhereUniqueInput
  }

  /**
   * Field deleteMany
   */
  export type FieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fields to delete
     */
    where?: FieldWhereInput
    /**
     * Limit how many Fields to delete.
     */
    limit?: number
  }

  /**
   * Field.matches
   */
  export type Field$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Field.fieldDisplay
   */
  export type Field$fieldDisplayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    where?: FieldDisplayWhereInput
  }

  /**
   * Field without action
   */
  export type FieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Field
     */
    select?: FieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Field
     */
    omit?: FieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldInclude<ExtArgs> | null
  }


  /**
   * Model FieldDisplay
   */

  export type AggregateFieldDisplay = {
    _count: FieldDisplayCountAggregateOutputType | null
    _min: FieldDisplayMinAggregateOutputType | null
    _max: FieldDisplayMaxAggregateOutputType | null
  }

  export type FieldDisplayMinAggregateOutputType = {
    id: string | null
    fieldId: string | null
    displayState: $Enums.DisplayState | null
    currentMatchId: string | null
    customMessage: string | null
    lastUpdatedBy: string | null
    autoAdvance: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldDisplayMaxAggregateOutputType = {
    id: string | null
    fieldId: string | null
    displayState: $Enums.DisplayState | null
    currentMatchId: string | null
    customMessage: string | null
    lastUpdatedBy: string | null
    autoAdvance: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FieldDisplayCountAggregateOutputType = {
    id: number
    fieldId: number
    displayState: number
    currentMatchId: number
    customMessage: number
    lastUpdatedBy: number
    autoAdvance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FieldDisplayMinAggregateInputType = {
    id?: true
    fieldId?: true
    displayState?: true
    currentMatchId?: true
    customMessage?: true
    lastUpdatedBy?: true
    autoAdvance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldDisplayMaxAggregateInputType = {
    id?: true
    fieldId?: true
    displayState?: true
    currentMatchId?: true
    customMessage?: true
    lastUpdatedBy?: true
    autoAdvance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FieldDisplayCountAggregateInputType = {
    id?: true
    fieldId?: true
    displayState?: true
    currentMatchId?: true
    customMessage?: true
    lastUpdatedBy?: true
    autoAdvance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FieldDisplayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldDisplay to aggregate.
     */
    where?: FieldDisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldDisplays to fetch.
     */
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FieldDisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldDisplays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldDisplays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FieldDisplays
    **/
    _count?: true | FieldDisplayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FieldDisplayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FieldDisplayMaxAggregateInputType
  }

  export type GetFieldDisplayAggregateType<T extends FieldDisplayAggregateArgs> = {
        [P in keyof T & keyof AggregateFieldDisplay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFieldDisplay[P]>
      : GetScalarType<T[P], AggregateFieldDisplay[P]>
  }




  export type FieldDisplayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FieldDisplayWhereInput
    orderBy?: FieldDisplayOrderByWithAggregationInput | FieldDisplayOrderByWithAggregationInput[]
    by: FieldDisplayScalarFieldEnum[] | FieldDisplayScalarFieldEnum
    having?: FieldDisplayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FieldDisplayCountAggregateInputType | true
    _min?: FieldDisplayMinAggregateInputType
    _max?: FieldDisplayMaxAggregateInputType
  }

  export type FieldDisplayGroupByOutputType = {
    id: string
    fieldId: string
    displayState: $Enums.DisplayState
    currentMatchId: string | null
    customMessage: string | null
    lastUpdatedBy: string | null
    autoAdvance: boolean
    createdAt: Date
    updatedAt: Date
    _count: FieldDisplayCountAggregateOutputType | null
    _min: FieldDisplayMinAggregateOutputType | null
    _max: FieldDisplayMaxAggregateOutputType | null
  }

  type GetFieldDisplayGroupByPayload<T extends FieldDisplayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FieldDisplayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FieldDisplayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FieldDisplayGroupByOutputType[P]>
            : GetScalarType<T[P], FieldDisplayGroupByOutputType[P]>
        }
      >
    >


  export type FieldDisplaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    displayState?: boolean
    currentMatchId?: boolean
    customMessage?: boolean
    lastUpdatedBy?: boolean
    autoAdvance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }, ExtArgs["result"]["fieldDisplay"]>

  export type FieldDisplaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    displayState?: boolean
    currentMatchId?: boolean
    customMessage?: boolean
    lastUpdatedBy?: boolean
    autoAdvance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }, ExtArgs["result"]["fieldDisplay"]>

  export type FieldDisplaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldId?: boolean
    displayState?: boolean
    currentMatchId?: boolean
    customMessage?: boolean
    lastUpdatedBy?: boolean
    autoAdvance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }, ExtArgs["result"]["fieldDisplay"]>

  export type FieldDisplaySelectScalar = {
    id?: boolean
    fieldId?: boolean
    displayState?: boolean
    currentMatchId?: boolean
    customMessage?: boolean
    lastUpdatedBy?: boolean
    autoAdvance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FieldDisplayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fieldId" | "displayState" | "currentMatchId" | "customMessage" | "lastUpdatedBy" | "autoAdvance" | "createdAt" | "updatedAt", ExtArgs["result"]["fieldDisplay"]>
  export type FieldDisplayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }
  export type FieldDisplayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }
  export type FieldDisplayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    field?: boolean | FieldDefaultArgs<ExtArgs>
    currentMatch?: boolean | FieldDisplay$currentMatchArgs<ExtArgs>
    lastUpdatedUser?: boolean | FieldDisplay$lastUpdatedUserArgs<ExtArgs>
  }

  export type $FieldDisplayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FieldDisplay"
    objects: {
      field: Prisma.$FieldPayload<ExtArgs>
      currentMatch: Prisma.$MatchPayload<ExtArgs> | null
      lastUpdatedUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fieldId: string
      displayState: $Enums.DisplayState
      currentMatchId: string | null
      customMessage: string | null
      lastUpdatedBy: string | null
      autoAdvance: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fieldDisplay"]>
    composites: {}
  }

  type FieldDisplayGetPayload<S extends boolean | null | undefined | FieldDisplayDefaultArgs> = $Result.GetResult<Prisma.$FieldDisplayPayload, S>

  type FieldDisplayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FieldDisplayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FieldDisplayCountAggregateInputType | true
    }

  export interface FieldDisplayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FieldDisplay'], meta: { name: 'FieldDisplay' } }
    /**
     * Find zero or one FieldDisplay that matches the filter.
     * @param {FieldDisplayFindUniqueArgs} args - Arguments to find a FieldDisplay
     * @example
     * // Get one FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FieldDisplayFindUniqueArgs>(args: SelectSubset<T, FieldDisplayFindUniqueArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FieldDisplay that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FieldDisplayFindUniqueOrThrowArgs} args - Arguments to find a FieldDisplay
     * @example
     * // Get one FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FieldDisplayFindUniqueOrThrowArgs>(args: SelectSubset<T, FieldDisplayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FieldDisplay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayFindFirstArgs} args - Arguments to find a FieldDisplay
     * @example
     * // Get one FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FieldDisplayFindFirstArgs>(args?: SelectSubset<T, FieldDisplayFindFirstArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FieldDisplay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayFindFirstOrThrowArgs} args - Arguments to find a FieldDisplay
     * @example
     * // Get one FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FieldDisplayFindFirstOrThrowArgs>(args?: SelectSubset<T, FieldDisplayFindFirstOrThrowArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FieldDisplays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FieldDisplays
     * const fieldDisplays = await prisma.fieldDisplay.findMany()
     * 
     * // Get first 10 FieldDisplays
     * const fieldDisplays = await prisma.fieldDisplay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fieldDisplayWithIdOnly = await prisma.fieldDisplay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FieldDisplayFindManyArgs>(args?: SelectSubset<T, FieldDisplayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FieldDisplay.
     * @param {FieldDisplayCreateArgs} args - Arguments to create a FieldDisplay.
     * @example
     * // Create one FieldDisplay
     * const FieldDisplay = await prisma.fieldDisplay.create({
     *   data: {
     *     // ... data to create a FieldDisplay
     *   }
     * })
     * 
     */
    create<T extends FieldDisplayCreateArgs>(args: SelectSubset<T, FieldDisplayCreateArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FieldDisplays.
     * @param {FieldDisplayCreateManyArgs} args - Arguments to create many FieldDisplays.
     * @example
     * // Create many FieldDisplays
     * const fieldDisplay = await prisma.fieldDisplay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FieldDisplayCreateManyArgs>(args?: SelectSubset<T, FieldDisplayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FieldDisplays and returns the data saved in the database.
     * @param {FieldDisplayCreateManyAndReturnArgs} args - Arguments to create many FieldDisplays.
     * @example
     * // Create many FieldDisplays
     * const fieldDisplay = await prisma.fieldDisplay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FieldDisplays and only return the `id`
     * const fieldDisplayWithIdOnly = await prisma.fieldDisplay.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FieldDisplayCreateManyAndReturnArgs>(args?: SelectSubset<T, FieldDisplayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FieldDisplay.
     * @param {FieldDisplayDeleteArgs} args - Arguments to delete one FieldDisplay.
     * @example
     * // Delete one FieldDisplay
     * const FieldDisplay = await prisma.fieldDisplay.delete({
     *   where: {
     *     // ... filter to delete one FieldDisplay
     *   }
     * })
     * 
     */
    delete<T extends FieldDisplayDeleteArgs>(args: SelectSubset<T, FieldDisplayDeleteArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FieldDisplay.
     * @param {FieldDisplayUpdateArgs} args - Arguments to update one FieldDisplay.
     * @example
     * // Update one FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FieldDisplayUpdateArgs>(args: SelectSubset<T, FieldDisplayUpdateArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FieldDisplays.
     * @param {FieldDisplayDeleteManyArgs} args - Arguments to filter FieldDisplays to delete.
     * @example
     * // Delete a few FieldDisplays
     * const { count } = await prisma.fieldDisplay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FieldDisplayDeleteManyArgs>(args?: SelectSubset<T, FieldDisplayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldDisplays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FieldDisplays
     * const fieldDisplay = await prisma.fieldDisplay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FieldDisplayUpdateManyArgs>(args: SelectSubset<T, FieldDisplayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FieldDisplays and returns the data updated in the database.
     * @param {FieldDisplayUpdateManyAndReturnArgs} args - Arguments to update many FieldDisplays.
     * @example
     * // Update many FieldDisplays
     * const fieldDisplay = await prisma.fieldDisplay.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FieldDisplays and only return the `id`
     * const fieldDisplayWithIdOnly = await prisma.fieldDisplay.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FieldDisplayUpdateManyAndReturnArgs>(args: SelectSubset<T, FieldDisplayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FieldDisplay.
     * @param {FieldDisplayUpsertArgs} args - Arguments to update or create a FieldDisplay.
     * @example
     * // Update or create a FieldDisplay
     * const fieldDisplay = await prisma.fieldDisplay.upsert({
     *   create: {
     *     // ... data to create a FieldDisplay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FieldDisplay we want to update
     *   }
     * })
     */
    upsert<T extends FieldDisplayUpsertArgs>(args: SelectSubset<T, FieldDisplayUpsertArgs<ExtArgs>>): Prisma__FieldDisplayClient<$Result.GetResult<Prisma.$FieldDisplayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FieldDisplays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayCountArgs} args - Arguments to filter FieldDisplays to count.
     * @example
     * // Count the number of FieldDisplays
     * const count = await prisma.fieldDisplay.count({
     *   where: {
     *     // ... the filter for the FieldDisplays we want to count
     *   }
     * })
    **/
    count<T extends FieldDisplayCountArgs>(
      args?: Subset<T, FieldDisplayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FieldDisplayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FieldDisplay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FieldDisplayAggregateArgs>(args: Subset<T, FieldDisplayAggregateArgs>): Prisma.PrismaPromise<GetFieldDisplayAggregateType<T>>

    /**
     * Group by FieldDisplay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FieldDisplayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FieldDisplayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FieldDisplayGroupByArgs['orderBy'] }
        : { orderBy?: FieldDisplayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FieldDisplayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFieldDisplayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FieldDisplay model
   */
  readonly fields: FieldDisplayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FieldDisplay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FieldDisplayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    field<T extends FieldDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FieldDefaultArgs<ExtArgs>>): Prisma__FieldClient<$Result.GetResult<Prisma.$FieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    currentMatch<T extends FieldDisplay$currentMatchArgs<ExtArgs> = {}>(args?: Subset<T, FieldDisplay$currentMatchArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    lastUpdatedUser<T extends FieldDisplay$lastUpdatedUserArgs<ExtArgs> = {}>(args?: Subset<T, FieldDisplay$lastUpdatedUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FieldDisplay model
   */
  interface FieldDisplayFieldRefs {
    readonly id: FieldRef<"FieldDisplay", 'String'>
    readonly fieldId: FieldRef<"FieldDisplay", 'String'>
    readonly displayState: FieldRef<"FieldDisplay", 'DisplayState'>
    readonly currentMatchId: FieldRef<"FieldDisplay", 'String'>
    readonly customMessage: FieldRef<"FieldDisplay", 'String'>
    readonly lastUpdatedBy: FieldRef<"FieldDisplay", 'String'>
    readonly autoAdvance: FieldRef<"FieldDisplay", 'Boolean'>
    readonly createdAt: FieldRef<"FieldDisplay", 'DateTime'>
    readonly updatedAt: FieldRef<"FieldDisplay", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FieldDisplay findUnique
   */
  export type FieldDisplayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter, which FieldDisplay to fetch.
     */
    where: FieldDisplayWhereUniqueInput
  }

  /**
   * FieldDisplay findUniqueOrThrow
   */
  export type FieldDisplayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter, which FieldDisplay to fetch.
     */
    where: FieldDisplayWhereUniqueInput
  }

  /**
   * FieldDisplay findFirst
   */
  export type FieldDisplayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter, which FieldDisplay to fetch.
     */
    where?: FieldDisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldDisplays to fetch.
     */
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldDisplays.
     */
    cursor?: FieldDisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldDisplays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldDisplays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldDisplays.
     */
    distinct?: FieldDisplayScalarFieldEnum | FieldDisplayScalarFieldEnum[]
  }

  /**
   * FieldDisplay findFirstOrThrow
   */
  export type FieldDisplayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter, which FieldDisplay to fetch.
     */
    where?: FieldDisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldDisplays to fetch.
     */
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FieldDisplays.
     */
    cursor?: FieldDisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldDisplays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldDisplays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FieldDisplays.
     */
    distinct?: FieldDisplayScalarFieldEnum | FieldDisplayScalarFieldEnum[]
  }

  /**
   * FieldDisplay findMany
   */
  export type FieldDisplayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter, which FieldDisplays to fetch.
     */
    where?: FieldDisplayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FieldDisplays to fetch.
     */
    orderBy?: FieldDisplayOrderByWithRelationInput | FieldDisplayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FieldDisplays.
     */
    cursor?: FieldDisplayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FieldDisplays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FieldDisplays.
     */
    skip?: number
    distinct?: FieldDisplayScalarFieldEnum | FieldDisplayScalarFieldEnum[]
  }

  /**
   * FieldDisplay create
   */
  export type FieldDisplayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * The data needed to create a FieldDisplay.
     */
    data: XOR<FieldDisplayCreateInput, FieldDisplayUncheckedCreateInput>
  }

  /**
   * FieldDisplay createMany
   */
  export type FieldDisplayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FieldDisplays.
     */
    data: FieldDisplayCreateManyInput | FieldDisplayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FieldDisplay createManyAndReturn
   */
  export type FieldDisplayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * The data used to create many FieldDisplays.
     */
    data: FieldDisplayCreateManyInput | FieldDisplayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FieldDisplay update
   */
  export type FieldDisplayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * The data needed to update a FieldDisplay.
     */
    data: XOR<FieldDisplayUpdateInput, FieldDisplayUncheckedUpdateInput>
    /**
     * Choose, which FieldDisplay to update.
     */
    where: FieldDisplayWhereUniqueInput
  }

  /**
   * FieldDisplay updateMany
   */
  export type FieldDisplayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FieldDisplays.
     */
    data: XOR<FieldDisplayUpdateManyMutationInput, FieldDisplayUncheckedUpdateManyInput>
    /**
     * Filter which FieldDisplays to update
     */
    where?: FieldDisplayWhereInput
    /**
     * Limit how many FieldDisplays to update.
     */
    limit?: number
  }

  /**
   * FieldDisplay updateManyAndReturn
   */
  export type FieldDisplayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * The data used to update FieldDisplays.
     */
    data: XOR<FieldDisplayUpdateManyMutationInput, FieldDisplayUncheckedUpdateManyInput>
    /**
     * Filter which FieldDisplays to update
     */
    where?: FieldDisplayWhereInput
    /**
     * Limit how many FieldDisplays to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FieldDisplay upsert
   */
  export type FieldDisplayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * The filter to search for the FieldDisplay to update in case it exists.
     */
    where: FieldDisplayWhereUniqueInput
    /**
     * In case the FieldDisplay found by the `where` argument doesn't exist, create a new FieldDisplay with this data.
     */
    create: XOR<FieldDisplayCreateInput, FieldDisplayUncheckedCreateInput>
    /**
     * In case the FieldDisplay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FieldDisplayUpdateInput, FieldDisplayUncheckedUpdateInput>
  }

  /**
   * FieldDisplay delete
   */
  export type FieldDisplayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
    /**
     * Filter which FieldDisplay to delete.
     */
    where: FieldDisplayWhereUniqueInput
  }

  /**
   * FieldDisplay deleteMany
   */
  export type FieldDisplayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FieldDisplays to delete
     */
    where?: FieldDisplayWhereInput
    /**
     * Limit how many FieldDisplays to delete.
     */
    limit?: number
  }

  /**
   * FieldDisplay.currentMatch
   */
  export type FieldDisplay$currentMatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
  }

  /**
   * FieldDisplay.lastUpdatedUser
   */
  export type FieldDisplay$lastUpdatedUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FieldDisplay without action
   */
  export type FieldDisplayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FieldDisplay
     */
    select?: FieldDisplaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FieldDisplay
     */
    omit?: FieldDisplayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FieldDisplayInclude<ExtArgs> | null
  }


  /**
   * Model ScoreConfig
   */

  export type AggregateScoreConfig = {
    _count: ScoreConfigCountAggregateOutputType | null
    _min: ScoreConfigMinAggregateOutputType | null
    _max: ScoreConfigMaxAggregateOutputType | null
  }

  export type ScoreConfigMinAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreConfigMaxAggregateOutputType = {
    id: string | null
    tournamentId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScoreConfigCountAggregateOutputType = {
    id: number
    tournamentId: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScoreConfigMinAggregateInputType = {
    id?: true
    tournamentId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreConfigMaxAggregateInputType = {
    id?: true
    tournamentId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScoreConfigCountAggregateInputType = {
    id?: true
    tournamentId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScoreConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreConfig to aggregate.
     */
    where?: ScoreConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreConfigs to fetch.
     */
    orderBy?: ScoreConfigOrderByWithRelationInput | ScoreConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreConfigs
    **/
    _count?: true | ScoreConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreConfigMaxAggregateInputType
  }

  export type GetScoreConfigAggregateType<T extends ScoreConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreConfig[P]>
      : GetScalarType<T[P], AggregateScoreConfig[P]>
  }




  export type ScoreConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreConfigWhereInput
    orderBy?: ScoreConfigOrderByWithAggregationInput | ScoreConfigOrderByWithAggregationInput[]
    by: ScoreConfigScalarFieldEnum[] | ScoreConfigScalarFieldEnum
    having?: ScoreConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreConfigCountAggregateInputType | true
    _min?: ScoreConfigMinAggregateInputType
    _max?: ScoreConfigMaxAggregateInputType
  }

  export type ScoreConfigGroupByOutputType = {
    id: string
    tournamentId: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: ScoreConfigCountAggregateOutputType | null
    _min: ScoreConfigMinAggregateOutputType | null
    _max: ScoreConfigMaxAggregateOutputType | null
  }

  type GetScoreConfigGroupByPayload<T extends ScoreConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreConfigGroupByOutputType[P]>
        }
      >
    >


  export type ScoreConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    scoreElements?: boolean | ScoreConfig$scoreElementsArgs<ExtArgs>
    bonusConditions?: boolean | ScoreConfig$bonusConditionsArgs<ExtArgs>
    penaltyConditions?: boolean | ScoreConfig$penaltyConditionsArgs<ExtArgs>
    _count?: boolean | ScoreConfigCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreConfig"]>

  export type ScoreConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreConfig"]>

  export type ScoreConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tournamentId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreConfig"]>

  export type ScoreConfigSelectScalar = {
    id?: boolean
    tournamentId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScoreConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tournamentId" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["scoreConfig"]>
  export type ScoreConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
    scoreElements?: boolean | ScoreConfig$scoreElementsArgs<ExtArgs>
    bonusConditions?: boolean | ScoreConfig$bonusConditionsArgs<ExtArgs>
    penaltyConditions?: boolean | ScoreConfig$penaltyConditionsArgs<ExtArgs>
    _count?: boolean | ScoreConfigCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScoreConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }
  export type ScoreConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tournament?: boolean | TournamentDefaultArgs<ExtArgs>
  }

  export type $ScoreConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreConfig"
    objects: {
      tournament: Prisma.$TournamentPayload<ExtArgs>
      scoreElements: Prisma.$ScoreElementPayload<ExtArgs>[]
      bonusConditions: Prisma.$BonusConditionPayload<ExtArgs>[]
      penaltyConditions: Prisma.$PenaltyConditionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tournamentId: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["scoreConfig"]>
    composites: {}
  }

  type ScoreConfigGetPayload<S extends boolean | null | undefined | ScoreConfigDefaultArgs> = $Result.GetResult<Prisma.$ScoreConfigPayload, S>

  type ScoreConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreConfigCountAggregateInputType | true
    }

  export interface ScoreConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreConfig'], meta: { name: 'ScoreConfig' } }
    /**
     * Find zero or one ScoreConfig that matches the filter.
     * @param {ScoreConfigFindUniqueArgs} args - Arguments to find a ScoreConfig
     * @example
     * // Get one ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreConfigFindUniqueArgs>(args: SelectSubset<T, ScoreConfigFindUniqueArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScoreConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreConfigFindUniqueOrThrowArgs} args - Arguments to find a ScoreConfig
     * @example
     * // Get one ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigFindFirstArgs} args - Arguments to find a ScoreConfig
     * @example
     * // Get one ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreConfigFindFirstArgs>(args?: SelectSubset<T, ScoreConfigFindFirstArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigFindFirstOrThrowArgs} args - Arguments to find a ScoreConfig
     * @example
     * // Get one ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScoreConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreConfigs
     * const scoreConfigs = await prisma.scoreConfig.findMany()
     * 
     * // Get first 10 ScoreConfigs
     * const scoreConfigs = await prisma.scoreConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreConfigWithIdOnly = await prisma.scoreConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreConfigFindManyArgs>(args?: SelectSubset<T, ScoreConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScoreConfig.
     * @param {ScoreConfigCreateArgs} args - Arguments to create a ScoreConfig.
     * @example
     * // Create one ScoreConfig
     * const ScoreConfig = await prisma.scoreConfig.create({
     *   data: {
     *     // ... data to create a ScoreConfig
     *   }
     * })
     * 
     */
    create<T extends ScoreConfigCreateArgs>(args: SelectSubset<T, ScoreConfigCreateArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScoreConfigs.
     * @param {ScoreConfigCreateManyArgs} args - Arguments to create many ScoreConfigs.
     * @example
     * // Create many ScoreConfigs
     * const scoreConfig = await prisma.scoreConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreConfigCreateManyArgs>(args?: SelectSubset<T, ScoreConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreConfigs and returns the data saved in the database.
     * @param {ScoreConfigCreateManyAndReturnArgs} args - Arguments to create many ScoreConfigs.
     * @example
     * // Create many ScoreConfigs
     * const scoreConfig = await prisma.scoreConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreConfigs and only return the `id`
     * const scoreConfigWithIdOnly = await prisma.scoreConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScoreConfig.
     * @param {ScoreConfigDeleteArgs} args - Arguments to delete one ScoreConfig.
     * @example
     * // Delete one ScoreConfig
     * const ScoreConfig = await prisma.scoreConfig.delete({
     *   where: {
     *     // ... filter to delete one ScoreConfig
     *   }
     * })
     * 
     */
    delete<T extends ScoreConfigDeleteArgs>(args: SelectSubset<T, ScoreConfigDeleteArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScoreConfig.
     * @param {ScoreConfigUpdateArgs} args - Arguments to update one ScoreConfig.
     * @example
     * // Update one ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreConfigUpdateArgs>(args: SelectSubset<T, ScoreConfigUpdateArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScoreConfigs.
     * @param {ScoreConfigDeleteManyArgs} args - Arguments to filter ScoreConfigs to delete.
     * @example
     * // Delete a few ScoreConfigs
     * const { count } = await prisma.scoreConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreConfigDeleteManyArgs>(args?: SelectSubset<T, ScoreConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreConfigs
     * const scoreConfig = await prisma.scoreConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreConfigUpdateManyArgs>(args: SelectSubset<T, ScoreConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreConfigs and returns the data updated in the database.
     * @param {ScoreConfigUpdateManyAndReturnArgs} args - Arguments to update many ScoreConfigs.
     * @example
     * // Update many ScoreConfigs
     * const scoreConfig = await prisma.scoreConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScoreConfigs and only return the `id`
     * const scoreConfigWithIdOnly = await prisma.scoreConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScoreConfig.
     * @param {ScoreConfigUpsertArgs} args - Arguments to update or create a ScoreConfig.
     * @example
     * // Update or create a ScoreConfig
     * const scoreConfig = await prisma.scoreConfig.upsert({
     *   create: {
     *     // ... data to create a ScoreConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreConfig we want to update
     *   }
     * })
     */
    upsert<T extends ScoreConfigUpsertArgs>(args: SelectSubset<T, ScoreConfigUpsertArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScoreConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigCountArgs} args - Arguments to filter ScoreConfigs to count.
     * @example
     * // Count the number of ScoreConfigs
     * const count = await prisma.scoreConfig.count({
     *   where: {
     *     // ... the filter for the ScoreConfigs we want to count
     *   }
     * })
    **/
    count<T extends ScoreConfigCountArgs>(
      args?: Subset<T, ScoreConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreConfigAggregateArgs>(args: Subset<T, ScoreConfigAggregateArgs>): Prisma.PrismaPromise<GetScoreConfigAggregateType<T>>

    /**
     * Group by ScoreConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreConfigGroupByArgs['orderBy'] }
        : { orderBy?: ScoreConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreConfig model
   */
  readonly fields: ScoreConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tournament<T extends TournamentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TournamentDefaultArgs<ExtArgs>>): Prisma__TournamentClient<$Result.GetResult<Prisma.$TournamentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scoreElements<T extends ScoreConfig$scoreElementsArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfig$scoreElementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bonusConditions<T extends ScoreConfig$bonusConditionsArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfig$bonusConditionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    penaltyConditions<T extends ScoreConfig$penaltyConditionsArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfig$penaltyConditionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreConfig model
   */
  interface ScoreConfigFieldRefs {
    readonly id: FieldRef<"ScoreConfig", 'String'>
    readonly tournamentId: FieldRef<"ScoreConfig", 'String'>
    readonly name: FieldRef<"ScoreConfig", 'String'>
    readonly description: FieldRef<"ScoreConfig", 'String'>
    readonly createdAt: FieldRef<"ScoreConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"ScoreConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScoreConfig findUnique
   */
  export type ScoreConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScoreConfig to fetch.
     */
    where: ScoreConfigWhereUniqueInput
  }

  /**
   * ScoreConfig findUniqueOrThrow
   */
  export type ScoreConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScoreConfig to fetch.
     */
    where: ScoreConfigWhereUniqueInput
  }

  /**
   * ScoreConfig findFirst
   */
  export type ScoreConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScoreConfig to fetch.
     */
    where?: ScoreConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreConfigs to fetch.
     */
    orderBy?: ScoreConfigOrderByWithRelationInput | ScoreConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreConfigs.
     */
    cursor?: ScoreConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreConfigs.
     */
    distinct?: ScoreConfigScalarFieldEnum | ScoreConfigScalarFieldEnum[]
  }

  /**
   * ScoreConfig findFirstOrThrow
   */
  export type ScoreConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScoreConfig to fetch.
     */
    where?: ScoreConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreConfigs to fetch.
     */
    orderBy?: ScoreConfigOrderByWithRelationInput | ScoreConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreConfigs.
     */
    cursor?: ScoreConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreConfigs.
     */
    distinct?: ScoreConfigScalarFieldEnum | ScoreConfigScalarFieldEnum[]
  }

  /**
   * ScoreConfig findMany
   */
  export type ScoreConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScoreConfigs to fetch.
     */
    where?: ScoreConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreConfigs to fetch.
     */
    orderBy?: ScoreConfigOrderByWithRelationInput | ScoreConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreConfigs.
     */
    cursor?: ScoreConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreConfigs.
     */
    skip?: number
    distinct?: ScoreConfigScalarFieldEnum | ScoreConfigScalarFieldEnum[]
  }

  /**
   * ScoreConfig create
   */
  export type ScoreConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreConfig.
     */
    data: XOR<ScoreConfigCreateInput, ScoreConfigUncheckedCreateInput>
  }

  /**
   * ScoreConfig createMany
   */
  export type ScoreConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreConfigs.
     */
    data: ScoreConfigCreateManyInput | ScoreConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreConfig createManyAndReturn
   */
  export type ScoreConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * The data used to create many ScoreConfigs.
     */
    data: ScoreConfigCreateManyInput | ScoreConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreConfig update
   */
  export type ScoreConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreConfig.
     */
    data: XOR<ScoreConfigUpdateInput, ScoreConfigUncheckedUpdateInput>
    /**
     * Choose, which ScoreConfig to update.
     */
    where: ScoreConfigWhereUniqueInput
  }

  /**
   * ScoreConfig updateMany
   */
  export type ScoreConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreConfigs.
     */
    data: XOR<ScoreConfigUpdateManyMutationInput, ScoreConfigUncheckedUpdateManyInput>
    /**
     * Filter which ScoreConfigs to update
     */
    where?: ScoreConfigWhereInput
    /**
     * Limit how many ScoreConfigs to update.
     */
    limit?: number
  }

  /**
   * ScoreConfig updateManyAndReturn
   */
  export type ScoreConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * The data used to update ScoreConfigs.
     */
    data: XOR<ScoreConfigUpdateManyMutationInput, ScoreConfigUncheckedUpdateManyInput>
    /**
     * Filter which ScoreConfigs to update
     */
    where?: ScoreConfigWhereInput
    /**
     * Limit how many ScoreConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreConfig upsert
   */
  export type ScoreConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreConfig to update in case it exists.
     */
    where: ScoreConfigWhereUniqueInput
    /**
     * In case the ScoreConfig found by the `where` argument doesn't exist, create a new ScoreConfig with this data.
     */
    create: XOR<ScoreConfigCreateInput, ScoreConfigUncheckedCreateInput>
    /**
     * In case the ScoreConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreConfigUpdateInput, ScoreConfigUncheckedUpdateInput>
  }

  /**
   * ScoreConfig delete
   */
  export type ScoreConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
    /**
     * Filter which ScoreConfig to delete.
     */
    where: ScoreConfigWhereUniqueInput
  }

  /**
   * ScoreConfig deleteMany
   */
  export type ScoreConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreConfigs to delete
     */
    where?: ScoreConfigWhereInput
    /**
     * Limit how many ScoreConfigs to delete.
     */
    limit?: number
  }

  /**
   * ScoreConfig.scoreElements
   */
  export type ScoreConfig$scoreElementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    where?: ScoreElementWhereInput
    orderBy?: ScoreElementOrderByWithRelationInput | ScoreElementOrderByWithRelationInput[]
    cursor?: ScoreElementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreElementScalarFieldEnum | ScoreElementScalarFieldEnum[]
  }

  /**
   * ScoreConfig.bonusConditions
   */
  export type ScoreConfig$bonusConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    where?: BonusConditionWhereInput
    orderBy?: BonusConditionOrderByWithRelationInput | BonusConditionOrderByWithRelationInput[]
    cursor?: BonusConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BonusConditionScalarFieldEnum | BonusConditionScalarFieldEnum[]
  }

  /**
   * ScoreConfig.penaltyConditions
   */
  export type ScoreConfig$penaltyConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    where?: PenaltyConditionWhereInput
    orderBy?: PenaltyConditionOrderByWithRelationInput | PenaltyConditionOrderByWithRelationInput[]
    cursor?: PenaltyConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PenaltyConditionScalarFieldEnum | PenaltyConditionScalarFieldEnum[]
  }

  /**
   * ScoreConfig without action
   */
  export type ScoreConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreConfig
     */
    select?: ScoreConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreConfig
     */
    omit?: ScoreConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreConfigInclude<ExtArgs> | null
  }


  /**
   * Model ScoreElement
   */

  export type AggregateScoreElement = {
    _count: ScoreElementCountAggregateOutputType | null
    _avg: ScoreElementAvgAggregateOutputType | null
    _sum: ScoreElementSumAggregateOutputType | null
    _min: ScoreElementMinAggregateOutputType | null
    _max: ScoreElementMaxAggregateOutputType | null
  }

  export type ScoreElementAvgAggregateOutputType = {
    pointsPerUnit: number | null
    displayOrder: number | null
  }

  export type ScoreElementSumAggregateOutputType = {
    pointsPerUnit: number | null
    displayOrder: number | null
  }

  export type ScoreElementMinAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    pointsPerUnit: number | null
    category: string | null
    elementType: $Enums.ElementType | null
    displayOrder: number | null
    icon: string | null
    color: string | null
  }

  export type ScoreElementMaxAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    pointsPerUnit: number | null
    category: string | null
    elementType: $Enums.ElementType | null
    displayOrder: number | null
    icon: string | null
    color: string | null
  }

  export type ScoreElementCountAggregateOutputType = {
    id: number
    scoreConfigId: number
    name: number
    code: number
    description: number
    pointsPerUnit: number
    category: number
    elementType: number
    displayOrder: number
    icon: number
    color: number
    _all: number
  }


  export type ScoreElementAvgAggregateInputType = {
    pointsPerUnit?: true
    displayOrder?: true
  }

  export type ScoreElementSumAggregateInputType = {
    pointsPerUnit?: true
    displayOrder?: true
  }

  export type ScoreElementMinAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    pointsPerUnit?: true
    category?: true
    elementType?: true
    displayOrder?: true
    icon?: true
    color?: true
  }

  export type ScoreElementMaxAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    pointsPerUnit?: true
    category?: true
    elementType?: true
    displayOrder?: true
    icon?: true
    color?: true
  }

  export type ScoreElementCountAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    pointsPerUnit?: true
    category?: true
    elementType?: true
    displayOrder?: true
    icon?: true
    color?: true
    _all?: true
  }

  export type ScoreElementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreElement to aggregate.
     */
    where?: ScoreElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreElements to fetch.
     */
    orderBy?: ScoreElementOrderByWithRelationInput | ScoreElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreElements
    **/
    _count?: true | ScoreElementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreElementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreElementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreElementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreElementMaxAggregateInputType
  }

  export type GetScoreElementAggregateType<T extends ScoreElementAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreElement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreElement[P]>
      : GetScalarType<T[P], AggregateScoreElement[P]>
  }




  export type ScoreElementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreElementWhereInput
    orderBy?: ScoreElementOrderByWithAggregationInput | ScoreElementOrderByWithAggregationInput[]
    by: ScoreElementScalarFieldEnum[] | ScoreElementScalarFieldEnum
    having?: ScoreElementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreElementCountAggregateInputType | true
    _avg?: ScoreElementAvgAggregateInputType
    _sum?: ScoreElementSumAggregateInputType
    _min?: ScoreElementMinAggregateInputType
    _max?: ScoreElementMaxAggregateInputType
  }

  export type ScoreElementGroupByOutputType = {
    id: string
    scoreConfigId: string
    name: string
    code: string
    description: string | null
    pointsPerUnit: number
    category: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon: string | null
    color: string | null
    _count: ScoreElementCountAggregateOutputType | null
    _avg: ScoreElementAvgAggregateOutputType | null
    _sum: ScoreElementSumAggregateOutputType | null
    _min: ScoreElementMinAggregateOutputType | null
    _max: ScoreElementMaxAggregateOutputType | null
  }

  type GetScoreElementGroupByPayload<T extends ScoreElementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreElementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreElementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreElementGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreElementGroupByOutputType[P]>
        }
      >
    >


  export type ScoreElementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    pointsPerUnit?: boolean
    category?: boolean
    elementType?: boolean
    displayOrder?: boolean
    icon?: boolean
    color?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
    matchScores?: boolean | ScoreElement$matchScoresArgs<ExtArgs>
    _count?: boolean | ScoreElementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreElement"]>

  export type ScoreElementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    pointsPerUnit?: boolean
    category?: boolean
    elementType?: boolean
    displayOrder?: boolean
    icon?: boolean
    color?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreElement"]>

  export type ScoreElementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    pointsPerUnit?: boolean
    category?: boolean
    elementType?: boolean
    displayOrder?: boolean
    icon?: boolean
    color?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreElement"]>

  export type ScoreElementSelectScalar = {
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    pointsPerUnit?: boolean
    category?: boolean
    elementType?: boolean
    displayOrder?: boolean
    icon?: boolean
    color?: boolean
  }

  export type ScoreElementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scoreConfigId" | "name" | "code" | "description" | "pointsPerUnit" | "category" | "elementType" | "displayOrder" | "icon" | "color", ExtArgs["result"]["scoreElement"]>
  export type ScoreElementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
    matchScores?: boolean | ScoreElement$matchScoresArgs<ExtArgs>
    _count?: boolean | ScoreElementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScoreElementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }
  export type ScoreElementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }

  export type $ScoreElementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreElement"
    objects: {
      scoreConfig: Prisma.$ScoreConfigPayload<ExtArgs>
      matchScores: Prisma.$MatchScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scoreConfigId: string
      name: string
      code: string
      description: string | null
      pointsPerUnit: number
      category: string | null
      elementType: $Enums.ElementType
      displayOrder: number
      icon: string | null
      color: string | null
    }, ExtArgs["result"]["scoreElement"]>
    composites: {}
  }

  type ScoreElementGetPayload<S extends boolean | null | undefined | ScoreElementDefaultArgs> = $Result.GetResult<Prisma.$ScoreElementPayload, S>

  type ScoreElementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreElementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreElementCountAggregateInputType | true
    }

  export interface ScoreElementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreElement'], meta: { name: 'ScoreElement' } }
    /**
     * Find zero or one ScoreElement that matches the filter.
     * @param {ScoreElementFindUniqueArgs} args - Arguments to find a ScoreElement
     * @example
     * // Get one ScoreElement
     * const scoreElement = await prisma.scoreElement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreElementFindUniqueArgs>(args: SelectSubset<T, ScoreElementFindUniqueArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScoreElement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreElementFindUniqueOrThrowArgs} args - Arguments to find a ScoreElement
     * @example
     * // Get one ScoreElement
     * const scoreElement = await prisma.scoreElement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreElementFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreElementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreElement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementFindFirstArgs} args - Arguments to find a ScoreElement
     * @example
     * // Get one ScoreElement
     * const scoreElement = await prisma.scoreElement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreElementFindFirstArgs>(args?: SelectSubset<T, ScoreElementFindFirstArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreElement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementFindFirstOrThrowArgs} args - Arguments to find a ScoreElement
     * @example
     * // Get one ScoreElement
     * const scoreElement = await prisma.scoreElement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreElementFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreElementFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScoreElements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreElements
     * const scoreElements = await prisma.scoreElement.findMany()
     * 
     * // Get first 10 ScoreElements
     * const scoreElements = await prisma.scoreElement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreElementWithIdOnly = await prisma.scoreElement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreElementFindManyArgs>(args?: SelectSubset<T, ScoreElementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScoreElement.
     * @param {ScoreElementCreateArgs} args - Arguments to create a ScoreElement.
     * @example
     * // Create one ScoreElement
     * const ScoreElement = await prisma.scoreElement.create({
     *   data: {
     *     // ... data to create a ScoreElement
     *   }
     * })
     * 
     */
    create<T extends ScoreElementCreateArgs>(args: SelectSubset<T, ScoreElementCreateArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScoreElements.
     * @param {ScoreElementCreateManyArgs} args - Arguments to create many ScoreElements.
     * @example
     * // Create many ScoreElements
     * const scoreElement = await prisma.scoreElement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreElementCreateManyArgs>(args?: SelectSubset<T, ScoreElementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreElements and returns the data saved in the database.
     * @param {ScoreElementCreateManyAndReturnArgs} args - Arguments to create many ScoreElements.
     * @example
     * // Create many ScoreElements
     * const scoreElement = await prisma.scoreElement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreElements and only return the `id`
     * const scoreElementWithIdOnly = await prisma.scoreElement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreElementCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreElementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScoreElement.
     * @param {ScoreElementDeleteArgs} args - Arguments to delete one ScoreElement.
     * @example
     * // Delete one ScoreElement
     * const ScoreElement = await prisma.scoreElement.delete({
     *   where: {
     *     // ... filter to delete one ScoreElement
     *   }
     * })
     * 
     */
    delete<T extends ScoreElementDeleteArgs>(args: SelectSubset<T, ScoreElementDeleteArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScoreElement.
     * @param {ScoreElementUpdateArgs} args - Arguments to update one ScoreElement.
     * @example
     * // Update one ScoreElement
     * const scoreElement = await prisma.scoreElement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreElementUpdateArgs>(args: SelectSubset<T, ScoreElementUpdateArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScoreElements.
     * @param {ScoreElementDeleteManyArgs} args - Arguments to filter ScoreElements to delete.
     * @example
     * // Delete a few ScoreElements
     * const { count } = await prisma.scoreElement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreElementDeleteManyArgs>(args?: SelectSubset<T, ScoreElementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreElements
     * const scoreElement = await prisma.scoreElement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreElementUpdateManyArgs>(args: SelectSubset<T, ScoreElementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreElements and returns the data updated in the database.
     * @param {ScoreElementUpdateManyAndReturnArgs} args - Arguments to update many ScoreElements.
     * @example
     * // Update many ScoreElements
     * const scoreElement = await prisma.scoreElement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScoreElements and only return the `id`
     * const scoreElementWithIdOnly = await prisma.scoreElement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreElementUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreElementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScoreElement.
     * @param {ScoreElementUpsertArgs} args - Arguments to update or create a ScoreElement.
     * @example
     * // Update or create a ScoreElement
     * const scoreElement = await prisma.scoreElement.upsert({
     *   create: {
     *     // ... data to create a ScoreElement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreElement we want to update
     *   }
     * })
     */
    upsert<T extends ScoreElementUpsertArgs>(args: SelectSubset<T, ScoreElementUpsertArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScoreElements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementCountArgs} args - Arguments to filter ScoreElements to count.
     * @example
     * // Count the number of ScoreElements
     * const count = await prisma.scoreElement.count({
     *   where: {
     *     // ... the filter for the ScoreElements we want to count
     *   }
     * })
    **/
    count<T extends ScoreElementCountArgs>(
      args?: Subset<T, ScoreElementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreElementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreElementAggregateArgs>(args: Subset<T, ScoreElementAggregateArgs>): Prisma.PrismaPromise<GetScoreElementAggregateType<T>>

    /**
     * Group by ScoreElement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreElementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreElementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreElementGroupByArgs['orderBy'] }
        : { orderBy?: ScoreElementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreElementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreElementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreElement model
   */
  readonly fields: ScoreElementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreElement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreElementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scoreConfig<T extends ScoreConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfigDefaultArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matchScores<T extends ScoreElement$matchScoresArgs<ExtArgs> = {}>(args?: Subset<T, ScoreElement$matchScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreElement model
   */
  interface ScoreElementFieldRefs {
    readonly id: FieldRef<"ScoreElement", 'String'>
    readonly scoreConfigId: FieldRef<"ScoreElement", 'String'>
    readonly name: FieldRef<"ScoreElement", 'String'>
    readonly code: FieldRef<"ScoreElement", 'String'>
    readonly description: FieldRef<"ScoreElement", 'String'>
    readonly pointsPerUnit: FieldRef<"ScoreElement", 'Int'>
    readonly category: FieldRef<"ScoreElement", 'String'>
    readonly elementType: FieldRef<"ScoreElement", 'ElementType'>
    readonly displayOrder: FieldRef<"ScoreElement", 'Int'>
    readonly icon: FieldRef<"ScoreElement", 'String'>
    readonly color: FieldRef<"ScoreElement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScoreElement findUnique
   */
  export type ScoreElementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter, which ScoreElement to fetch.
     */
    where: ScoreElementWhereUniqueInput
  }

  /**
   * ScoreElement findUniqueOrThrow
   */
  export type ScoreElementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter, which ScoreElement to fetch.
     */
    where: ScoreElementWhereUniqueInput
  }

  /**
   * ScoreElement findFirst
   */
  export type ScoreElementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter, which ScoreElement to fetch.
     */
    where?: ScoreElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreElements to fetch.
     */
    orderBy?: ScoreElementOrderByWithRelationInput | ScoreElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreElements.
     */
    cursor?: ScoreElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreElements.
     */
    distinct?: ScoreElementScalarFieldEnum | ScoreElementScalarFieldEnum[]
  }

  /**
   * ScoreElement findFirstOrThrow
   */
  export type ScoreElementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter, which ScoreElement to fetch.
     */
    where?: ScoreElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreElements to fetch.
     */
    orderBy?: ScoreElementOrderByWithRelationInput | ScoreElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreElements.
     */
    cursor?: ScoreElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreElements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreElements.
     */
    distinct?: ScoreElementScalarFieldEnum | ScoreElementScalarFieldEnum[]
  }

  /**
   * ScoreElement findMany
   */
  export type ScoreElementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter, which ScoreElements to fetch.
     */
    where?: ScoreElementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreElements to fetch.
     */
    orderBy?: ScoreElementOrderByWithRelationInput | ScoreElementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreElements.
     */
    cursor?: ScoreElementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreElements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreElements.
     */
    skip?: number
    distinct?: ScoreElementScalarFieldEnum | ScoreElementScalarFieldEnum[]
  }

  /**
   * ScoreElement create
   */
  export type ScoreElementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreElement.
     */
    data: XOR<ScoreElementCreateInput, ScoreElementUncheckedCreateInput>
  }

  /**
   * ScoreElement createMany
   */
  export type ScoreElementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreElements.
     */
    data: ScoreElementCreateManyInput | ScoreElementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreElement createManyAndReturn
   */
  export type ScoreElementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * The data used to create many ScoreElements.
     */
    data: ScoreElementCreateManyInput | ScoreElementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreElement update
   */
  export type ScoreElementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreElement.
     */
    data: XOR<ScoreElementUpdateInput, ScoreElementUncheckedUpdateInput>
    /**
     * Choose, which ScoreElement to update.
     */
    where: ScoreElementWhereUniqueInput
  }

  /**
   * ScoreElement updateMany
   */
  export type ScoreElementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreElements.
     */
    data: XOR<ScoreElementUpdateManyMutationInput, ScoreElementUncheckedUpdateManyInput>
    /**
     * Filter which ScoreElements to update
     */
    where?: ScoreElementWhereInput
    /**
     * Limit how many ScoreElements to update.
     */
    limit?: number
  }

  /**
   * ScoreElement updateManyAndReturn
   */
  export type ScoreElementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * The data used to update ScoreElements.
     */
    data: XOR<ScoreElementUpdateManyMutationInput, ScoreElementUncheckedUpdateManyInput>
    /**
     * Filter which ScoreElements to update
     */
    where?: ScoreElementWhereInput
    /**
     * Limit how many ScoreElements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreElement upsert
   */
  export type ScoreElementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreElement to update in case it exists.
     */
    where: ScoreElementWhereUniqueInput
    /**
     * In case the ScoreElement found by the `where` argument doesn't exist, create a new ScoreElement with this data.
     */
    create: XOR<ScoreElementCreateInput, ScoreElementUncheckedCreateInput>
    /**
     * In case the ScoreElement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreElementUpdateInput, ScoreElementUncheckedUpdateInput>
  }

  /**
   * ScoreElement delete
   */
  export type ScoreElementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
    /**
     * Filter which ScoreElement to delete.
     */
    where: ScoreElementWhereUniqueInput
  }

  /**
   * ScoreElement deleteMany
   */
  export type ScoreElementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreElements to delete
     */
    where?: ScoreElementWhereInput
    /**
     * Limit how many ScoreElements to delete.
     */
    limit?: number
  }

  /**
   * ScoreElement.matchScores
   */
  export type ScoreElement$matchScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    where?: MatchScoreWhereInput
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    cursor?: MatchScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * ScoreElement without action
   */
  export type ScoreElementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreElement
     */
    select?: ScoreElementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreElement
     */
    omit?: ScoreElementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreElementInclude<ExtArgs> | null
  }


  /**
   * Model BonusCondition
   */

  export type AggregateBonusCondition = {
    _count: BonusConditionCountAggregateOutputType | null
    _avg: BonusConditionAvgAggregateOutputType | null
    _sum: BonusConditionSumAggregateOutputType | null
    _min: BonusConditionMinAggregateOutputType | null
    _max: BonusConditionMaxAggregateOutputType | null
  }

  export type BonusConditionAvgAggregateOutputType = {
    bonusPoints: number | null
    displayOrder: number | null
  }

  export type BonusConditionSumAggregateOutputType = {
    bonusPoints: number | null
    displayOrder: number | null
  }

  export type BonusConditionMinAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    bonusPoints: number | null
    displayOrder: number | null
  }

  export type BonusConditionMaxAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    bonusPoints: number | null
    displayOrder: number | null
  }

  export type BonusConditionCountAggregateOutputType = {
    id: number
    scoreConfigId: number
    name: number
    code: number
    description: number
    bonusPoints: number
    condition: number
    displayOrder: number
    _all: number
  }


  export type BonusConditionAvgAggregateInputType = {
    bonusPoints?: true
    displayOrder?: true
  }

  export type BonusConditionSumAggregateInputType = {
    bonusPoints?: true
    displayOrder?: true
  }

  export type BonusConditionMinAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    bonusPoints?: true
    displayOrder?: true
  }

  export type BonusConditionMaxAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    bonusPoints?: true
    displayOrder?: true
  }

  export type BonusConditionCountAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    bonusPoints?: true
    condition?: true
    displayOrder?: true
    _all?: true
  }

  export type BonusConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonusCondition to aggregate.
     */
    where?: BonusConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonusConditions to fetch.
     */
    orderBy?: BonusConditionOrderByWithRelationInput | BonusConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BonusConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonusConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonusConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BonusConditions
    **/
    _count?: true | BonusConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BonusConditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BonusConditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BonusConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BonusConditionMaxAggregateInputType
  }

  export type GetBonusConditionAggregateType<T extends BonusConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateBonusCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBonusCondition[P]>
      : GetScalarType<T[P], AggregateBonusCondition[P]>
  }




  export type BonusConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BonusConditionWhereInput
    orderBy?: BonusConditionOrderByWithAggregationInput | BonusConditionOrderByWithAggregationInput[]
    by: BonusConditionScalarFieldEnum[] | BonusConditionScalarFieldEnum
    having?: BonusConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BonusConditionCountAggregateInputType | true
    _avg?: BonusConditionAvgAggregateInputType
    _sum?: BonusConditionSumAggregateInputType
    _min?: BonusConditionMinAggregateInputType
    _max?: BonusConditionMaxAggregateInputType
  }

  export type BonusConditionGroupByOutputType = {
    id: string
    scoreConfigId: string
    name: string
    code: string
    description: string | null
    bonusPoints: number
    condition: JsonValue
    displayOrder: number
    _count: BonusConditionCountAggregateOutputType | null
    _avg: BonusConditionAvgAggregateOutputType | null
    _sum: BonusConditionSumAggregateOutputType | null
    _min: BonusConditionMinAggregateOutputType | null
    _max: BonusConditionMaxAggregateOutputType | null
  }

  type GetBonusConditionGroupByPayload<T extends BonusConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BonusConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BonusConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BonusConditionGroupByOutputType[P]>
            : GetScalarType<T[P], BonusConditionGroupByOutputType[P]>
        }
      >
    >


  export type BonusConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    bonusPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonusCondition"]>

  export type BonusConditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    bonusPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonusCondition"]>

  export type BonusConditionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    bonusPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bonusCondition"]>

  export type BonusConditionSelectScalar = {
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    bonusPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
  }

  export type BonusConditionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scoreConfigId" | "name" | "code" | "description" | "bonusPoints" | "condition" | "displayOrder", ExtArgs["result"]["bonusCondition"]>
  export type BonusConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }
  export type BonusConditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }
  export type BonusConditionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }

  export type $BonusConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BonusCondition"
    objects: {
      scoreConfig: Prisma.$ScoreConfigPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scoreConfigId: string
      name: string
      code: string
      description: string | null
      bonusPoints: number
      condition: Prisma.JsonValue
      displayOrder: number
    }, ExtArgs["result"]["bonusCondition"]>
    composites: {}
  }

  type BonusConditionGetPayload<S extends boolean | null | undefined | BonusConditionDefaultArgs> = $Result.GetResult<Prisma.$BonusConditionPayload, S>

  type BonusConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BonusConditionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BonusConditionCountAggregateInputType | true
    }

  export interface BonusConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BonusCondition'], meta: { name: 'BonusCondition' } }
    /**
     * Find zero or one BonusCondition that matches the filter.
     * @param {BonusConditionFindUniqueArgs} args - Arguments to find a BonusCondition
     * @example
     * // Get one BonusCondition
     * const bonusCondition = await prisma.bonusCondition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BonusConditionFindUniqueArgs>(args: SelectSubset<T, BonusConditionFindUniqueArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BonusCondition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BonusConditionFindUniqueOrThrowArgs} args - Arguments to find a BonusCondition
     * @example
     * // Get one BonusCondition
     * const bonusCondition = await prisma.bonusCondition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BonusConditionFindUniqueOrThrowArgs>(args: SelectSubset<T, BonusConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonusCondition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionFindFirstArgs} args - Arguments to find a BonusCondition
     * @example
     * // Get one BonusCondition
     * const bonusCondition = await prisma.bonusCondition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BonusConditionFindFirstArgs>(args?: SelectSubset<T, BonusConditionFindFirstArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BonusCondition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionFindFirstOrThrowArgs} args - Arguments to find a BonusCondition
     * @example
     * // Get one BonusCondition
     * const bonusCondition = await prisma.bonusCondition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BonusConditionFindFirstOrThrowArgs>(args?: SelectSubset<T, BonusConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BonusConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BonusConditions
     * const bonusConditions = await prisma.bonusCondition.findMany()
     * 
     * // Get first 10 BonusConditions
     * const bonusConditions = await prisma.bonusCondition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bonusConditionWithIdOnly = await prisma.bonusCondition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BonusConditionFindManyArgs>(args?: SelectSubset<T, BonusConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BonusCondition.
     * @param {BonusConditionCreateArgs} args - Arguments to create a BonusCondition.
     * @example
     * // Create one BonusCondition
     * const BonusCondition = await prisma.bonusCondition.create({
     *   data: {
     *     // ... data to create a BonusCondition
     *   }
     * })
     * 
     */
    create<T extends BonusConditionCreateArgs>(args: SelectSubset<T, BonusConditionCreateArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BonusConditions.
     * @param {BonusConditionCreateManyArgs} args - Arguments to create many BonusConditions.
     * @example
     * // Create many BonusConditions
     * const bonusCondition = await prisma.bonusCondition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BonusConditionCreateManyArgs>(args?: SelectSubset<T, BonusConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BonusConditions and returns the data saved in the database.
     * @param {BonusConditionCreateManyAndReturnArgs} args - Arguments to create many BonusConditions.
     * @example
     * // Create many BonusConditions
     * const bonusCondition = await prisma.bonusCondition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BonusConditions and only return the `id`
     * const bonusConditionWithIdOnly = await prisma.bonusCondition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BonusConditionCreateManyAndReturnArgs>(args?: SelectSubset<T, BonusConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BonusCondition.
     * @param {BonusConditionDeleteArgs} args - Arguments to delete one BonusCondition.
     * @example
     * // Delete one BonusCondition
     * const BonusCondition = await prisma.bonusCondition.delete({
     *   where: {
     *     // ... filter to delete one BonusCondition
     *   }
     * })
     * 
     */
    delete<T extends BonusConditionDeleteArgs>(args: SelectSubset<T, BonusConditionDeleteArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BonusCondition.
     * @param {BonusConditionUpdateArgs} args - Arguments to update one BonusCondition.
     * @example
     * // Update one BonusCondition
     * const bonusCondition = await prisma.bonusCondition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BonusConditionUpdateArgs>(args: SelectSubset<T, BonusConditionUpdateArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BonusConditions.
     * @param {BonusConditionDeleteManyArgs} args - Arguments to filter BonusConditions to delete.
     * @example
     * // Delete a few BonusConditions
     * const { count } = await prisma.bonusCondition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BonusConditionDeleteManyArgs>(args?: SelectSubset<T, BonusConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BonusConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BonusConditions
     * const bonusCondition = await prisma.bonusCondition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BonusConditionUpdateManyArgs>(args: SelectSubset<T, BonusConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BonusConditions and returns the data updated in the database.
     * @param {BonusConditionUpdateManyAndReturnArgs} args - Arguments to update many BonusConditions.
     * @example
     * // Update many BonusConditions
     * const bonusCondition = await prisma.bonusCondition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BonusConditions and only return the `id`
     * const bonusConditionWithIdOnly = await prisma.bonusCondition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BonusConditionUpdateManyAndReturnArgs>(args: SelectSubset<T, BonusConditionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BonusCondition.
     * @param {BonusConditionUpsertArgs} args - Arguments to update or create a BonusCondition.
     * @example
     * // Update or create a BonusCondition
     * const bonusCondition = await prisma.bonusCondition.upsert({
     *   create: {
     *     // ... data to create a BonusCondition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BonusCondition we want to update
     *   }
     * })
     */
    upsert<T extends BonusConditionUpsertArgs>(args: SelectSubset<T, BonusConditionUpsertArgs<ExtArgs>>): Prisma__BonusConditionClient<$Result.GetResult<Prisma.$BonusConditionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BonusConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionCountArgs} args - Arguments to filter BonusConditions to count.
     * @example
     * // Count the number of BonusConditions
     * const count = await prisma.bonusCondition.count({
     *   where: {
     *     // ... the filter for the BonusConditions we want to count
     *   }
     * })
    **/
    count<T extends BonusConditionCountArgs>(
      args?: Subset<T, BonusConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BonusConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BonusCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BonusConditionAggregateArgs>(args: Subset<T, BonusConditionAggregateArgs>): Prisma.PrismaPromise<GetBonusConditionAggregateType<T>>

    /**
     * Group by BonusCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BonusConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BonusConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BonusConditionGroupByArgs['orderBy'] }
        : { orderBy?: BonusConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BonusConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBonusConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BonusCondition model
   */
  readonly fields: BonusConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BonusCondition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BonusConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scoreConfig<T extends ScoreConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfigDefaultArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BonusCondition model
   */
  interface BonusConditionFieldRefs {
    readonly id: FieldRef<"BonusCondition", 'String'>
    readonly scoreConfigId: FieldRef<"BonusCondition", 'String'>
    readonly name: FieldRef<"BonusCondition", 'String'>
    readonly code: FieldRef<"BonusCondition", 'String'>
    readonly description: FieldRef<"BonusCondition", 'String'>
    readonly bonusPoints: FieldRef<"BonusCondition", 'Int'>
    readonly condition: FieldRef<"BonusCondition", 'Json'>
    readonly displayOrder: FieldRef<"BonusCondition", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * BonusCondition findUnique
   */
  export type BonusConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter, which BonusCondition to fetch.
     */
    where: BonusConditionWhereUniqueInput
  }

  /**
   * BonusCondition findUniqueOrThrow
   */
  export type BonusConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter, which BonusCondition to fetch.
     */
    where: BonusConditionWhereUniqueInput
  }

  /**
   * BonusCondition findFirst
   */
  export type BonusConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter, which BonusCondition to fetch.
     */
    where?: BonusConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonusConditions to fetch.
     */
    orderBy?: BonusConditionOrderByWithRelationInput | BonusConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonusConditions.
     */
    cursor?: BonusConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonusConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonusConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonusConditions.
     */
    distinct?: BonusConditionScalarFieldEnum | BonusConditionScalarFieldEnum[]
  }

  /**
   * BonusCondition findFirstOrThrow
   */
  export type BonusConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter, which BonusCondition to fetch.
     */
    where?: BonusConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonusConditions to fetch.
     */
    orderBy?: BonusConditionOrderByWithRelationInput | BonusConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BonusConditions.
     */
    cursor?: BonusConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonusConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonusConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BonusConditions.
     */
    distinct?: BonusConditionScalarFieldEnum | BonusConditionScalarFieldEnum[]
  }

  /**
   * BonusCondition findMany
   */
  export type BonusConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter, which BonusConditions to fetch.
     */
    where?: BonusConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BonusConditions to fetch.
     */
    orderBy?: BonusConditionOrderByWithRelationInput | BonusConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BonusConditions.
     */
    cursor?: BonusConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BonusConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BonusConditions.
     */
    skip?: number
    distinct?: BonusConditionScalarFieldEnum | BonusConditionScalarFieldEnum[]
  }

  /**
   * BonusCondition create
   */
  export type BonusConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a BonusCondition.
     */
    data: XOR<BonusConditionCreateInput, BonusConditionUncheckedCreateInput>
  }

  /**
   * BonusCondition createMany
   */
  export type BonusConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BonusConditions.
     */
    data: BonusConditionCreateManyInput | BonusConditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BonusCondition createManyAndReturn
   */
  export type BonusConditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * The data used to create many BonusConditions.
     */
    data: BonusConditionCreateManyInput | BonusConditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BonusCondition update
   */
  export type BonusConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a BonusCondition.
     */
    data: XOR<BonusConditionUpdateInput, BonusConditionUncheckedUpdateInput>
    /**
     * Choose, which BonusCondition to update.
     */
    where: BonusConditionWhereUniqueInput
  }

  /**
   * BonusCondition updateMany
   */
  export type BonusConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BonusConditions.
     */
    data: XOR<BonusConditionUpdateManyMutationInput, BonusConditionUncheckedUpdateManyInput>
    /**
     * Filter which BonusConditions to update
     */
    where?: BonusConditionWhereInput
    /**
     * Limit how many BonusConditions to update.
     */
    limit?: number
  }

  /**
   * BonusCondition updateManyAndReturn
   */
  export type BonusConditionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * The data used to update BonusConditions.
     */
    data: XOR<BonusConditionUpdateManyMutationInput, BonusConditionUncheckedUpdateManyInput>
    /**
     * Filter which BonusConditions to update
     */
    where?: BonusConditionWhereInput
    /**
     * Limit how many BonusConditions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BonusCondition upsert
   */
  export type BonusConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the BonusCondition to update in case it exists.
     */
    where: BonusConditionWhereUniqueInput
    /**
     * In case the BonusCondition found by the `where` argument doesn't exist, create a new BonusCondition with this data.
     */
    create: XOR<BonusConditionCreateInput, BonusConditionUncheckedCreateInput>
    /**
     * In case the BonusCondition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BonusConditionUpdateInput, BonusConditionUncheckedUpdateInput>
  }

  /**
   * BonusCondition delete
   */
  export type BonusConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
    /**
     * Filter which BonusCondition to delete.
     */
    where: BonusConditionWhereUniqueInput
  }

  /**
   * BonusCondition deleteMany
   */
  export type BonusConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BonusConditions to delete
     */
    where?: BonusConditionWhereInput
    /**
     * Limit how many BonusConditions to delete.
     */
    limit?: number
  }

  /**
   * BonusCondition without action
   */
  export type BonusConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BonusCondition
     */
    select?: BonusConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BonusCondition
     */
    omit?: BonusConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BonusConditionInclude<ExtArgs> | null
  }


  /**
   * Model PenaltyCondition
   */

  export type AggregatePenaltyCondition = {
    _count: PenaltyConditionCountAggregateOutputType | null
    _avg: PenaltyConditionAvgAggregateOutputType | null
    _sum: PenaltyConditionSumAggregateOutputType | null
    _min: PenaltyConditionMinAggregateOutputType | null
    _max: PenaltyConditionMaxAggregateOutputType | null
  }

  export type PenaltyConditionAvgAggregateOutputType = {
    penaltyPoints: number | null
    displayOrder: number | null
  }

  export type PenaltyConditionSumAggregateOutputType = {
    penaltyPoints: number | null
    displayOrder: number | null
  }

  export type PenaltyConditionMinAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    penaltyPoints: number | null
    displayOrder: number | null
  }

  export type PenaltyConditionMaxAggregateOutputType = {
    id: string | null
    scoreConfigId: string | null
    name: string | null
    code: string | null
    description: string | null
    penaltyPoints: number | null
    displayOrder: number | null
  }

  export type PenaltyConditionCountAggregateOutputType = {
    id: number
    scoreConfigId: number
    name: number
    code: number
    description: number
    penaltyPoints: number
    condition: number
    displayOrder: number
    _all: number
  }


  export type PenaltyConditionAvgAggregateInputType = {
    penaltyPoints?: true
    displayOrder?: true
  }

  export type PenaltyConditionSumAggregateInputType = {
    penaltyPoints?: true
    displayOrder?: true
  }

  export type PenaltyConditionMinAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    penaltyPoints?: true
    displayOrder?: true
  }

  export type PenaltyConditionMaxAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    penaltyPoints?: true
    displayOrder?: true
  }

  export type PenaltyConditionCountAggregateInputType = {
    id?: true
    scoreConfigId?: true
    name?: true
    code?: true
    description?: true
    penaltyPoints?: true
    condition?: true
    displayOrder?: true
    _all?: true
  }

  export type PenaltyConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PenaltyCondition to aggregate.
     */
    where?: PenaltyConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PenaltyConditions to fetch.
     */
    orderBy?: PenaltyConditionOrderByWithRelationInput | PenaltyConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PenaltyConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PenaltyConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PenaltyConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PenaltyConditions
    **/
    _count?: true | PenaltyConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PenaltyConditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PenaltyConditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PenaltyConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PenaltyConditionMaxAggregateInputType
  }

  export type GetPenaltyConditionAggregateType<T extends PenaltyConditionAggregateArgs> = {
        [P in keyof T & keyof AggregatePenaltyCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePenaltyCondition[P]>
      : GetScalarType<T[P], AggregatePenaltyCondition[P]>
  }




  export type PenaltyConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PenaltyConditionWhereInput
    orderBy?: PenaltyConditionOrderByWithAggregationInput | PenaltyConditionOrderByWithAggregationInput[]
    by: PenaltyConditionScalarFieldEnum[] | PenaltyConditionScalarFieldEnum
    having?: PenaltyConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PenaltyConditionCountAggregateInputType | true
    _avg?: PenaltyConditionAvgAggregateInputType
    _sum?: PenaltyConditionSumAggregateInputType
    _min?: PenaltyConditionMinAggregateInputType
    _max?: PenaltyConditionMaxAggregateInputType
  }

  export type PenaltyConditionGroupByOutputType = {
    id: string
    scoreConfigId: string
    name: string
    code: string
    description: string | null
    penaltyPoints: number
    condition: JsonValue
    displayOrder: number
    _count: PenaltyConditionCountAggregateOutputType | null
    _avg: PenaltyConditionAvgAggregateOutputType | null
    _sum: PenaltyConditionSumAggregateOutputType | null
    _min: PenaltyConditionMinAggregateOutputType | null
    _max: PenaltyConditionMaxAggregateOutputType | null
  }

  type GetPenaltyConditionGroupByPayload<T extends PenaltyConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PenaltyConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PenaltyConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PenaltyConditionGroupByOutputType[P]>
            : GetScalarType<T[P], PenaltyConditionGroupByOutputType[P]>
        }
      >
    >


  export type PenaltyConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    penaltyPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penaltyCondition"]>

  export type PenaltyConditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    penaltyPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penaltyCondition"]>

  export type PenaltyConditionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    penaltyPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["penaltyCondition"]>

  export type PenaltyConditionSelectScalar = {
    id?: boolean
    scoreConfigId?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    penaltyPoints?: boolean
    condition?: boolean
    displayOrder?: boolean
  }

  export type PenaltyConditionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "scoreConfigId" | "name" | "code" | "description" | "penaltyPoints" | "condition" | "displayOrder", ExtArgs["result"]["penaltyCondition"]>
  export type PenaltyConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }
  export type PenaltyConditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }
  export type PenaltyConditionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreConfig?: boolean | ScoreConfigDefaultArgs<ExtArgs>
  }

  export type $PenaltyConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PenaltyCondition"
    objects: {
      scoreConfig: Prisma.$ScoreConfigPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      scoreConfigId: string
      name: string
      code: string
      description: string | null
      penaltyPoints: number
      condition: Prisma.JsonValue
      displayOrder: number
    }, ExtArgs["result"]["penaltyCondition"]>
    composites: {}
  }

  type PenaltyConditionGetPayload<S extends boolean | null | undefined | PenaltyConditionDefaultArgs> = $Result.GetResult<Prisma.$PenaltyConditionPayload, S>

  type PenaltyConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PenaltyConditionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PenaltyConditionCountAggregateInputType | true
    }

  export interface PenaltyConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PenaltyCondition'], meta: { name: 'PenaltyCondition' } }
    /**
     * Find zero or one PenaltyCondition that matches the filter.
     * @param {PenaltyConditionFindUniqueArgs} args - Arguments to find a PenaltyCondition
     * @example
     * // Get one PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PenaltyConditionFindUniqueArgs>(args: SelectSubset<T, PenaltyConditionFindUniqueArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PenaltyCondition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PenaltyConditionFindUniqueOrThrowArgs} args - Arguments to find a PenaltyCondition
     * @example
     * // Get one PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PenaltyConditionFindUniqueOrThrowArgs>(args: SelectSubset<T, PenaltyConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PenaltyCondition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionFindFirstArgs} args - Arguments to find a PenaltyCondition
     * @example
     * // Get one PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PenaltyConditionFindFirstArgs>(args?: SelectSubset<T, PenaltyConditionFindFirstArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PenaltyCondition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionFindFirstOrThrowArgs} args - Arguments to find a PenaltyCondition
     * @example
     * // Get one PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PenaltyConditionFindFirstOrThrowArgs>(args?: SelectSubset<T, PenaltyConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PenaltyConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PenaltyConditions
     * const penaltyConditions = await prisma.penaltyCondition.findMany()
     * 
     * // Get first 10 PenaltyConditions
     * const penaltyConditions = await prisma.penaltyCondition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const penaltyConditionWithIdOnly = await prisma.penaltyCondition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PenaltyConditionFindManyArgs>(args?: SelectSubset<T, PenaltyConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PenaltyCondition.
     * @param {PenaltyConditionCreateArgs} args - Arguments to create a PenaltyCondition.
     * @example
     * // Create one PenaltyCondition
     * const PenaltyCondition = await prisma.penaltyCondition.create({
     *   data: {
     *     // ... data to create a PenaltyCondition
     *   }
     * })
     * 
     */
    create<T extends PenaltyConditionCreateArgs>(args: SelectSubset<T, PenaltyConditionCreateArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PenaltyConditions.
     * @param {PenaltyConditionCreateManyArgs} args - Arguments to create many PenaltyConditions.
     * @example
     * // Create many PenaltyConditions
     * const penaltyCondition = await prisma.penaltyCondition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PenaltyConditionCreateManyArgs>(args?: SelectSubset<T, PenaltyConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PenaltyConditions and returns the data saved in the database.
     * @param {PenaltyConditionCreateManyAndReturnArgs} args - Arguments to create many PenaltyConditions.
     * @example
     * // Create many PenaltyConditions
     * const penaltyCondition = await prisma.penaltyCondition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PenaltyConditions and only return the `id`
     * const penaltyConditionWithIdOnly = await prisma.penaltyCondition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PenaltyConditionCreateManyAndReturnArgs>(args?: SelectSubset<T, PenaltyConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PenaltyCondition.
     * @param {PenaltyConditionDeleteArgs} args - Arguments to delete one PenaltyCondition.
     * @example
     * // Delete one PenaltyCondition
     * const PenaltyCondition = await prisma.penaltyCondition.delete({
     *   where: {
     *     // ... filter to delete one PenaltyCondition
     *   }
     * })
     * 
     */
    delete<T extends PenaltyConditionDeleteArgs>(args: SelectSubset<T, PenaltyConditionDeleteArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PenaltyCondition.
     * @param {PenaltyConditionUpdateArgs} args - Arguments to update one PenaltyCondition.
     * @example
     * // Update one PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PenaltyConditionUpdateArgs>(args: SelectSubset<T, PenaltyConditionUpdateArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PenaltyConditions.
     * @param {PenaltyConditionDeleteManyArgs} args - Arguments to filter PenaltyConditions to delete.
     * @example
     * // Delete a few PenaltyConditions
     * const { count } = await prisma.penaltyCondition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PenaltyConditionDeleteManyArgs>(args?: SelectSubset<T, PenaltyConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PenaltyConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PenaltyConditions
     * const penaltyCondition = await prisma.penaltyCondition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PenaltyConditionUpdateManyArgs>(args: SelectSubset<T, PenaltyConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PenaltyConditions and returns the data updated in the database.
     * @param {PenaltyConditionUpdateManyAndReturnArgs} args - Arguments to update many PenaltyConditions.
     * @example
     * // Update many PenaltyConditions
     * const penaltyCondition = await prisma.penaltyCondition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PenaltyConditions and only return the `id`
     * const penaltyConditionWithIdOnly = await prisma.penaltyCondition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PenaltyConditionUpdateManyAndReturnArgs>(args: SelectSubset<T, PenaltyConditionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PenaltyCondition.
     * @param {PenaltyConditionUpsertArgs} args - Arguments to update or create a PenaltyCondition.
     * @example
     * // Update or create a PenaltyCondition
     * const penaltyCondition = await prisma.penaltyCondition.upsert({
     *   create: {
     *     // ... data to create a PenaltyCondition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PenaltyCondition we want to update
     *   }
     * })
     */
    upsert<T extends PenaltyConditionUpsertArgs>(args: SelectSubset<T, PenaltyConditionUpsertArgs<ExtArgs>>): Prisma__PenaltyConditionClient<$Result.GetResult<Prisma.$PenaltyConditionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PenaltyConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionCountArgs} args - Arguments to filter PenaltyConditions to count.
     * @example
     * // Count the number of PenaltyConditions
     * const count = await prisma.penaltyCondition.count({
     *   where: {
     *     // ... the filter for the PenaltyConditions we want to count
     *   }
     * })
    **/
    count<T extends PenaltyConditionCountArgs>(
      args?: Subset<T, PenaltyConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PenaltyConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PenaltyCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PenaltyConditionAggregateArgs>(args: Subset<T, PenaltyConditionAggregateArgs>): Prisma.PrismaPromise<GetPenaltyConditionAggregateType<T>>

    /**
     * Group by PenaltyCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PenaltyConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PenaltyConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PenaltyConditionGroupByArgs['orderBy'] }
        : { orderBy?: PenaltyConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PenaltyConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPenaltyConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PenaltyCondition model
   */
  readonly fields: PenaltyConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PenaltyCondition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PenaltyConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scoreConfig<T extends ScoreConfigDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScoreConfigDefaultArgs<ExtArgs>>): Prisma__ScoreConfigClient<$Result.GetResult<Prisma.$ScoreConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PenaltyCondition model
   */
  interface PenaltyConditionFieldRefs {
    readonly id: FieldRef<"PenaltyCondition", 'String'>
    readonly scoreConfigId: FieldRef<"PenaltyCondition", 'String'>
    readonly name: FieldRef<"PenaltyCondition", 'String'>
    readonly code: FieldRef<"PenaltyCondition", 'String'>
    readonly description: FieldRef<"PenaltyCondition", 'String'>
    readonly penaltyPoints: FieldRef<"PenaltyCondition", 'Int'>
    readonly condition: FieldRef<"PenaltyCondition", 'Json'>
    readonly displayOrder: FieldRef<"PenaltyCondition", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PenaltyCondition findUnique
   */
  export type PenaltyConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter, which PenaltyCondition to fetch.
     */
    where: PenaltyConditionWhereUniqueInput
  }

  /**
   * PenaltyCondition findUniqueOrThrow
   */
  export type PenaltyConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter, which PenaltyCondition to fetch.
     */
    where: PenaltyConditionWhereUniqueInput
  }

  /**
   * PenaltyCondition findFirst
   */
  export type PenaltyConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter, which PenaltyCondition to fetch.
     */
    where?: PenaltyConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PenaltyConditions to fetch.
     */
    orderBy?: PenaltyConditionOrderByWithRelationInput | PenaltyConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PenaltyConditions.
     */
    cursor?: PenaltyConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PenaltyConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PenaltyConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PenaltyConditions.
     */
    distinct?: PenaltyConditionScalarFieldEnum | PenaltyConditionScalarFieldEnum[]
  }

  /**
   * PenaltyCondition findFirstOrThrow
   */
  export type PenaltyConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter, which PenaltyCondition to fetch.
     */
    where?: PenaltyConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PenaltyConditions to fetch.
     */
    orderBy?: PenaltyConditionOrderByWithRelationInput | PenaltyConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PenaltyConditions.
     */
    cursor?: PenaltyConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PenaltyConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PenaltyConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PenaltyConditions.
     */
    distinct?: PenaltyConditionScalarFieldEnum | PenaltyConditionScalarFieldEnum[]
  }

  /**
   * PenaltyCondition findMany
   */
  export type PenaltyConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter, which PenaltyConditions to fetch.
     */
    where?: PenaltyConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PenaltyConditions to fetch.
     */
    orderBy?: PenaltyConditionOrderByWithRelationInput | PenaltyConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PenaltyConditions.
     */
    cursor?: PenaltyConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PenaltyConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PenaltyConditions.
     */
    skip?: number
    distinct?: PenaltyConditionScalarFieldEnum | PenaltyConditionScalarFieldEnum[]
  }

  /**
   * PenaltyCondition create
   */
  export type PenaltyConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a PenaltyCondition.
     */
    data: XOR<PenaltyConditionCreateInput, PenaltyConditionUncheckedCreateInput>
  }

  /**
   * PenaltyCondition createMany
   */
  export type PenaltyConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PenaltyConditions.
     */
    data: PenaltyConditionCreateManyInput | PenaltyConditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PenaltyCondition createManyAndReturn
   */
  export type PenaltyConditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * The data used to create many PenaltyConditions.
     */
    data: PenaltyConditionCreateManyInput | PenaltyConditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PenaltyCondition update
   */
  export type PenaltyConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a PenaltyCondition.
     */
    data: XOR<PenaltyConditionUpdateInput, PenaltyConditionUncheckedUpdateInput>
    /**
     * Choose, which PenaltyCondition to update.
     */
    where: PenaltyConditionWhereUniqueInput
  }

  /**
   * PenaltyCondition updateMany
   */
  export type PenaltyConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PenaltyConditions.
     */
    data: XOR<PenaltyConditionUpdateManyMutationInput, PenaltyConditionUncheckedUpdateManyInput>
    /**
     * Filter which PenaltyConditions to update
     */
    where?: PenaltyConditionWhereInput
    /**
     * Limit how many PenaltyConditions to update.
     */
    limit?: number
  }

  /**
   * PenaltyCondition updateManyAndReturn
   */
  export type PenaltyConditionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * The data used to update PenaltyConditions.
     */
    data: XOR<PenaltyConditionUpdateManyMutationInput, PenaltyConditionUncheckedUpdateManyInput>
    /**
     * Filter which PenaltyConditions to update
     */
    where?: PenaltyConditionWhereInput
    /**
     * Limit how many PenaltyConditions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PenaltyCondition upsert
   */
  export type PenaltyConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the PenaltyCondition to update in case it exists.
     */
    where: PenaltyConditionWhereUniqueInput
    /**
     * In case the PenaltyCondition found by the `where` argument doesn't exist, create a new PenaltyCondition with this data.
     */
    create: XOR<PenaltyConditionCreateInput, PenaltyConditionUncheckedCreateInput>
    /**
     * In case the PenaltyCondition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PenaltyConditionUpdateInput, PenaltyConditionUncheckedUpdateInput>
  }

  /**
   * PenaltyCondition delete
   */
  export type PenaltyConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
    /**
     * Filter which PenaltyCondition to delete.
     */
    where: PenaltyConditionWhereUniqueInput
  }

  /**
   * PenaltyCondition deleteMany
   */
  export type PenaltyConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PenaltyConditions to delete
     */
    where?: PenaltyConditionWhereInput
    /**
     * Limit how many PenaltyConditions to delete.
     */
    limit?: number
  }

  /**
   * PenaltyCondition without action
   */
  export type PenaltyConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PenaltyCondition
     */
    select?: PenaltyConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PenaltyCondition
     */
    omit?: PenaltyConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PenaltyConditionInclude<ExtArgs> | null
  }


  /**
   * Model MatchScore
   */

  export type AggregateMatchScore = {
    _count: MatchScoreCountAggregateOutputType | null
    _avg: MatchScoreAvgAggregateOutputType | null
    _sum: MatchScoreSumAggregateOutputType | null
    _min: MatchScoreMinAggregateOutputType | null
    _max: MatchScoreMaxAggregateOutputType | null
  }

  export type MatchScoreAvgAggregateOutputType = {
    units: number | null
    totalPoints: number | null
  }

  export type MatchScoreSumAggregateOutputType = {
    units: number | null
    totalPoints: number | null
  }

  export type MatchScoreMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    allianceId: string | null
    scoreElementId: string | null
    units: number | null
    totalPoints: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchScoreMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    allianceId: string | null
    scoreElementId: string | null
    units: number | null
    totalPoints: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchScoreCountAggregateOutputType = {
    id: number
    matchId: number
    allianceId: number
    scoreElementId: number
    units: number
    totalPoints: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchScoreAvgAggregateInputType = {
    units?: true
    totalPoints?: true
  }

  export type MatchScoreSumAggregateInputType = {
    units?: true
    totalPoints?: true
  }

  export type MatchScoreMinAggregateInputType = {
    id?: true
    matchId?: true
    allianceId?: true
    scoreElementId?: true
    units?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchScoreMaxAggregateInputType = {
    id?: true
    matchId?: true
    allianceId?: true
    scoreElementId?: true
    units?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchScoreCountAggregateInputType = {
    id?: true
    matchId?: true
    allianceId?: true
    scoreElementId?: true
    units?: true
    totalPoints?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchScore to aggregate.
     */
    where?: MatchScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchScores to fetch.
     */
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchScores
    **/
    _count?: true | MatchScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchScoreMaxAggregateInputType
  }

  export type GetMatchScoreAggregateType<T extends MatchScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchScore[P]>
      : GetScalarType<T[P], AggregateMatchScore[P]>
  }




  export type MatchScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchScoreWhereInput
    orderBy?: MatchScoreOrderByWithAggregationInput | MatchScoreOrderByWithAggregationInput[]
    by: MatchScoreScalarFieldEnum[] | MatchScoreScalarFieldEnum
    having?: MatchScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchScoreCountAggregateInputType | true
    _avg?: MatchScoreAvgAggregateInputType
    _sum?: MatchScoreSumAggregateInputType
    _min?: MatchScoreMinAggregateInputType
    _max?: MatchScoreMaxAggregateInputType
  }

  export type MatchScoreGroupByOutputType = {
    id: string
    matchId: string
    allianceId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt: Date
    updatedAt: Date
    _count: MatchScoreCountAggregateOutputType | null
    _avg: MatchScoreAvgAggregateOutputType | null
    _sum: MatchScoreSumAggregateOutputType | null
    _min: MatchScoreMinAggregateOutputType | null
    _max: MatchScoreMaxAggregateOutputType | null
  }

  type GetMatchScoreGroupByPayload<T extends MatchScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchScoreGroupByOutputType[P]>
            : GetScalarType<T[P], MatchScoreGroupByOutputType[P]>
        }
      >
    >


  export type MatchScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    allianceId?: boolean
    scoreElementId?: boolean
    units?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchScore"]>

  export type MatchScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    allianceId?: boolean
    scoreElementId?: boolean
    units?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchScore"]>

  export type MatchScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    allianceId?: boolean
    scoreElementId?: boolean
    units?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchScore"]>

  export type MatchScoreSelectScalar = {
    id?: boolean
    matchId?: boolean
    allianceId?: boolean
    scoreElementId?: boolean
    units?: boolean
    totalPoints?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "matchId" | "allianceId" | "scoreElementId" | "units" | "totalPoints" | "createdAt" | "updatedAt", ExtArgs["result"]["matchScore"]>
  export type MatchScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }
  export type MatchScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }
  export type MatchScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    alliance?: boolean | AllianceDefaultArgs<ExtArgs>
    scoreElement?: boolean | ScoreElementDefaultArgs<ExtArgs>
  }

  export type $MatchScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchScore"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      alliance: Prisma.$AlliancePayload<ExtArgs>
      scoreElement: Prisma.$ScoreElementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      allianceId: string
      scoreElementId: string
      units: number
      totalPoints: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["matchScore"]>
    composites: {}
  }

  type MatchScoreGetPayload<S extends boolean | null | undefined | MatchScoreDefaultArgs> = $Result.GetResult<Prisma.$MatchScorePayload, S>

  type MatchScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchScoreCountAggregateInputType | true
    }

  export interface MatchScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchScore'], meta: { name: 'MatchScore' } }
    /**
     * Find zero or one MatchScore that matches the filter.
     * @param {MatchScoreFindUniqueArgs} args - Arguments to find a MatchScore
     * @example
     * // Get one MatchScore
     * const matchScore = await prisma.matchScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchScoreFindUniqueArgs>(args: SelectSubset<T, MatchScoreFindUniqueArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MatchScore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchScoreFindUniqueOrThrowArgs} args - Arguments to find a MatchScore
     * @example
     * // Get one MatchScore
     * const matchScore = await prisma.matchScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreFindFirstArgs} args - Arguments to find a MatchScore
     * @example
     * // Get one MatchScore
     * const matchScore = await prisma.matchScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchScoreFindFirstArgs>(args?: SelectSubset<T, MatchScoreFindFirstArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MatchScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreFindFirstOrThrowArgs} args - Arguments to find a MatchScore
     * @example
     * // Get one MatchScore
     * const matchScore = await prisma.matchScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MatchScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchScores
     * const matchScores = await prisma.matchScore.findMany()
     * 
     * // Get first 10 MatchScores
     * const matchScores = await prisma.matchScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchScoreWithIdOnly = await prisma.matchScore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchScoreFindManyArgs>(args?: SelectSubset<T, MatchScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MatchScore.
     * @param {MatchScoreCreateArgs} args - Arguments to create a MatchScore.
     * @example
     * // Create one MatchScore
     * const MatchScore = await prisma.matchScore.create({
     *   data: {
     *     // ... data to create a MatchScore
     *   }
     * })
     * 
     */
    create<T extends MatchScoreCreateArgs>(args: SelectSubset<T, MatchScoreCreateArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MatchScores.
     * @param {MatchScoreCreateManyArgs} args - Arguments to create many MatchScores.
     * @example
     * // Create many MatchScores
     * const matchScore = await prisma.matchScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchScoreCreateManyArgs>(args?: SelectSubset<T, MatchScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchScores and returns the data saved in the database.
     * @param {MatchScoreCreateManyAndReturnArgs} args - Arguments to create many MatchScores.
     * @example
     * // Create many MatchScores
     * const matchScore = await prisma.matchScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchScores and only return the `id`
     * const matchScoreWithIdOnly = await prisma.matchScore.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MatchScore.
     * @param {MatchScoreDeleteArgs} args - Arguments to delete one MatchScore.
     * @example
     * // Delete one MatchScore
     * const MatchScore = await prisma.matchScore.delete({
     *   where: {
     *     // ... filter to delete one MatchScore
     *   }
     * })
     * 
     */
    delete<T extends MatchScoreDeleteArgs>(args: SelectSubset<T, MatchScoreDeleteArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MatchScore.
     * @param {MatchScoreUpdateArgs} args - Arguments to update one MatchScore.
     * @example
     * // Update one MatchScore
     * const matchScore = await prisma.matchScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchScoreUpdateArgs>(args: SelectSubset<T, MatchScoreUpdateArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MatchScores.
     * @param {MatchScoreDeleteManyArgs} args - Arguments to filter MatchScores to delete.
     * @example
     * // Delete a few MatchScores
     * const { count } = await prisma.matchScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchScoreDeleteManyArgs>(args?: SelectSubset<T, MatchScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchScores
     * const matchScore = await prisma.matchScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchScoreUpdateManyArgs>(args: SelectSubset<T, MatchScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchScores and returns the data updated in the database.
     * @param {MatchScoreUpdateManyAndReturnArgs} args - Arguments to update many MatchScores.
     * @example
     * // Update many MatchScores
     * const matchScore = await prisma.matchScore.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MatchScores and only return the `id`
     * const matchScoreWithIdOnly = await prisma.matchScore.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MatchScore.
     * @param {MatchScoreUpsertArgs} args - Arguments to update or create a MatchScore.
     * @example
     * // Update or create a MatchScore
     * const matchScore = await prisma.matchScore.upsert({
     *   create: {
     *     // ... data to create a MatchScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchScore we want to update
     *   }
     * })
     */
    upsert<T extends MatchScoreUpsertArgs>(args: SelectSubset<T, MatchScoreUpsertArgs<ExtArgs>>): Prisma__MatchScoreClient<$Result.GetResult<Prisma.$MatchScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MatchScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreCountArgs} args - Arguments to filter MatchScores to count.
     * @example
     * // Count the number of MatchScores
     * const count = await prisma.matchScore.count({
     *   where: {
     *     // ... the filter for the MatchScores we want to count
     *   }
     * })
    **/
    count<T extends MatchScoreCountArgs>(
      args?: Subset<T, MatchScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchScoreAggregateArgs>(args: Subset<T, MatchScoreAggregateArgs>): Prisma.PrismaPromise<GetMatchScoreAggregateType<T>>

    /**
     * Group by MatchScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchScoreGroupByArgs['orderBy'] }
        : { orderBy?: MatchScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchScore model
   */
  readonly fields: MatchScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    alliance<T extends AllianceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AllianceDefaultArgs<ExtArgs>>): Prisma__AllianceClient<$Result.GetResult<Prisma.$AlliancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    scoreElement<T extends ScoreElementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScoreElementDefaultArgs<ExtArgs>>): Prisma__ScoreElementClient<$Result.GetResult<Prisma.$ScoreElementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchScore model
   */
  interface MatchScoreFieldRefs {
    readonly id: FieldRef<"MatchScore", 'String'>
    readonly matchId: FieldRef<"MatchScore", 'String'>
    readonly allianceId: FieldRef<"MatchScore", 'String'>
    readonly scoreElementId: FieldRef<"MatchScore", 'String'>
    readonly units: FieldRef<"MatchScore", 'Int'>
    readonly totalPoints: FieldRef<"MatchScore", 'Int'>
    readonly createdAt: FieldRef<"MatchScore", 'DateTime'>
    readonly updatedAt: FieldRef<"MatchScore", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchScore findUnique
   */
  export type MatchScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter, which MatchScore to fetch.
     */
    where: MatchScoreWhereUniqueInput
  }

  /**
   * MatchScore findUniqueOrThrow
   */
  export type MatchScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter, which MatchScore to fetch.
     */
    where: MatchScoreWhereUniqueInput
  }

  /**
   * MatchScore findFirst
   */
  export type MatchScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter, which MatchScore to fetch.
     */
    where?: MatchScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchScores to fetch.
     */
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchScores.
     */
    cursor?: MatchScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchScores.
     */
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * MatchScore findFirstOrThrow
   */
  export type MatchScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter, which MatchScore to fetch.
     */
    where?: MatchScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchScores to fetch.
     */
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchScores.
     */
    cursor?: MatchScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchScores.
     */
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * MatchScore findMany
   */
  export type MatchScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter, which MatchScores to fetch.
     */
    where?: MatchScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchScores to fetch.
     */
    orderBy?: MatchScoreOrderByWithRelationInput | MatchScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchScores.
     */
    cursor?: MatchScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchScores.
     */
    skip?: number
    distinct?: MatchScoreScalarFieldEnum | MatchScoreScalarFieldEnum[]
  }

  /**
   * MatchScore create
   */
  export type MatchScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchScore.
     */
    data: XOR<MatchScoreCreateInput, MatchScoreUncheckedCreateInput>
  }

  /**
   * MatchScore createMany
   */
  export type MatchScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchScores.
     */
    data: MatchScoreCreateManyInput | MatchScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchScore createManyAndReturn
   */
  export type MatchScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * The data used to create many MatchScores.
     */
    data: MatchScoreCreateManyInput | MatchScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchScore update
   */
  export type MatchScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchScore.
     */
    data: XOR<MatchScoreUpdateInput, MatchScoreUncheckedUpdateInput>
    /**
     * Choose, which MatchScore to update.
     */
    where: MatchScoreWhereUniqueInput
  }

  /**
   * MatchScore updateMany
   */
  export type MatchScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchScores.
     */
    data: XOR<MatchScoreUpdateManyMutationInput, MatchScoreUncheckedUpdateManyInput>
    /**
     * Filter which MatchScores to update
     */
    where?: MatchScoreWhereInput
    /**
     * Limit how many MatchScores to update.
     */
    limit?: number
  }

  /**
   * MatchScore updateManyAndReturn
   */
  export type MatchScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * The data used to update MatchScores.
     */
    data: XOR<MatchScoreUpdateManyMutationInput, MatchScoreUncheckedUpdateManyInput>
    /**
     * Filter which MatchScores to update
     */
    where?: MatchScoreWhereInput
    /**
     * Limit how many MatchScores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchScore upsert
   */
  export type MatchScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchScore to update in case it exists.
     */
    where: MatchScoreWhereUniqueInput
    /**
     * In case the MatchScore found by the `where` argument doesn't exist, create a new MatchScore with this data.
     */
    create: XOR<MatchScoreCreateInput, MatchScoreUncheckedCreateInput>
    /**
     * In case the MatchScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchScoreUpdateInput, MatchScoreUncheckedUpdateInput>
  }

  /**
   * MatchScore delete
   */
  export type MatchScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
    /**
     * Filter which MatchScore to delete.
     */
    where: MatchScoreWhereUniqueInput
  }

  /**
   * MatchScore deleteMany
   */
  export type MatchScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchScores to delete
     */
    where?: MatchScoreWhereInput
    /**
     * Limit how many MatchScores to delete.
     */
    limit?: number
  }

  /**
   * MatchScore without action
   */
  export type MatchScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchScore
     */
    select?: MatchScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MatchScore
     */
    omit?: MatchScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchScoreInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    email: 'email',
    gender: 'gender',
    DateOfBirth: 'DateOfBirth',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TournamentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminId: 'adminId',
    numberOfFields: 'numberOfFields'
  };

  export type TournamentScalarFieldEnum = (typeof TournamentScalarFieldEnum)[keyof typeof TournamentScalarFieldEnum]


  export const StageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    startDate: 'startDate',
    endDate: 'endDate',
    tournamentId: 'tournamentId',
    teamsPerAlliance: 'teamsPerAlliance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StageScalarFieldEnum = (typeof StageScalarFieldEnum)[keyof typeof StageScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    matchNumber: 'matchNumber',
    roundNumber: 'roundNumber',
    status: 'status',
    startTime: 'startTime',
    scheduledTime: 'scheduledTime',
    endTime: 'endTime',
    duration: 'duration',
    winningAlliance: 'winningAlliance',
    stageId: 'stageId',
    scoredById: 'scoredById',
    roundType: 'roundType',
    scheduleId: 'scheduleId',
    fieldId: 'fieldId',
    matchType: 'matchType',
    matchDuration: 'matchDuration',
    updatedAt: 'updatedAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const MatchRefereeScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    userId: 'userId',
    role: 'role',
    position: 'position',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchRefereeScalarFieldEnum = (typeof MatchRefereeScalarFieldEnum)[keyof typeof MatchRefereeScalarFieldEnum]


  export const AllianceScalarFieldEnum: {
    id: 'id',
    color: 'color',
    score: 'score',
    autoScore: 'autoScore',
    driveScore: 'driveScore',
    matchId: 'matchId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AllianceScalarFieldEnum = (typeof AllianceScalarFieldEnum)[keyof typeof AllianceScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    teamNumber: 'teamNumber',
    name: 'name',
    organization: 'organization',
    avatar: 'avatar',
    description: 'description',
    teamLead: 'teamLead',
    teamLeadId: 'teamLeadId',
    teamMembers: 'teamMembers',
    tournamentId: 'tournamentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamAllianceScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    allianceId: 'allianceId',
    stationPosition: 'stationPosition',
    isSurrogate: 'isSurrogate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamAllianceScalarFieldEnum = (typeof TeamAllianceScalarFieldEnum)[keyof typeof TeamAllianceScalarFieldEnum]


  export const TeamStatsScalarFieldEnum: {
    id: 'id',
    teamId: 'teamId',
    tournamentId: 'tournamentId',
    stageId: 'stageId',
    wins: 'wins',
    losses: 'losses',
    ties: 'ties',
    pointsScored: 'pointsScored',
    pointsConceded: 'pointsConceded',
    matchesPlayed: 'matchesPlayed',
    rankingPoints: 'rankingPoints',
    opponentWinPercentage: 'opponentWinPercentage',
    pointDifferential: 'pointDifferential',
    rank: 'rank',
    tiebreaker1: 'tiebreaker1',
    tiebreaker2: 'tiebreaker2',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamStatsScalarFieldEnum = (typeof TeamStatsScalarFieldEnum)[keyof typeof TeamStatsScalarFieldEnum]


  export const FieldScalarFieldEnum: {
    id: 'id',
    name: 'name',
    number: 'number',
    location: 'location',
    description: 'description',
    tournamentId: 'tournamentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FieldScalarFieldEnum = (typeof FieldScalarFieldEnum)[keyof typeof FieldScalarFieldEnum]


  export const FieldDisplayScalarFieldEnum: {
    id: 'id',
    fieldId: 'fieldId',
    displayState: 'displayState',
    currentMatchId: 'currentMatchId',
    customMessage: 'customMessage',
    lastUpdatedBy: 'lastUpdatedBy',
    autoAdvance: 'autoAdvance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FieldDisplayScalarFieldEnum = (typeof FieldDisplayScalarFieldEnum)[keyof typeof FieldDisplayScalarFieldEnum]


  export const ScoreConfigScalarFieldEnum: {
    id: 'id',
    tournamentId: 'tournamentId',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScoreConfigScalarFieldEnum = (typeof ScoreConfigScalarFieldEnum)[keyof typeof ScoreConfigScalarFieldEnum]


  export const ScoreElementScalarFieldEnum: {
    id: 'id',
    scoreConfigId: 'scoreConfigId',
    name: 'name',
    code: 'code',
    description: 'description',
    pointsPerUnit: 'pointsPerUnit',
    category: 'category',
    elementType: 'elementType',
    displayOrder: 'displayOrder',
    icon: 'icon',
    color: 'color'
  };

  export type ScoreElementScalarFieldEnum = (typeof ScoreElementScalarFieldEnum)[keyof typeof ScoreElementScalarFieldEnum]


  export const BonusConditionScalarFieldEnum: {
    id: 'id',
    scoreConfigId: 'scoreConfigId',
    name: 'name',
    code: 'code',
    description: 'description',
    bonusPoints: 'bonusPoints',
    condition: 'condition',
    displayOrder: 'displayOrder'
  };

  export type BonusConditionScalarFieldEnum = (typeof BonusConditionScalarFieldEnum)[keyof typeof BonusConditionScalarFieldEnum]


  export const PenaltyConditionScalarFieldEnum: {
    id: 'id',
    scoreConfigId: 'scoreConfigId',
    name: 'name',
    code: 'code',
    description: 'description',
    penaltyPoints: 'penaltyPoints',
    condition: 'condition',
    displayOrder: 'displayOrder'
  };

  export type PenaltyConditionScalarFieldEnum = (typeof PenaltyConditionScalarFieldEnum)[keyof typeof PenaltyConditionScalarFieldEnum]


  export const MatchScoreScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    allianceId: 'allianceId',
    scoreElementId: 'scoreElementId',
    units: 'units',
    totalPoints: 'totalPoints',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchScoreScalarFieldEnum = (typeof MatchScoreScalarFieldEnum)[keyof typeof MatchScoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StageType'
   */
  export type EnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType'>
    


  /**
   * Reference to a field of type 'StageType[]'
   */
  export type ListEnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType[]'>
    


  /**
   * Reference to a field of type 'MatchState'
   */
  export type EnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState'>
    


  /**
   * Reference to a field of type 'MatchState[]'
   */
  export type ListEnumMatchStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchState[]'>
    


  /**
   * Reference to a field of type 'AllianceColor'
   */
  export type EnumAllianceColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AllianceColor'>
    


  /**
   * Reference to a field of type 'AllianceColor[]'
   */
  export type ListEnumAllianceColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AllianceColor[]'>
    


  /**
   * Reference to a field of type 'MatchRoundType'
   */
  export type EnumMatchRoundTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchRoundType'>
    


  /**
   * Reference to a field of type 'MatchRoundType[]'
   */
  export type ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchRoundType[]'>
    


  /**
   * Reference to a field of type 'MatchType'
   */
  export type EnumMatchTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchType'>
    


  /**
   * Reference to a field of type 'MatchType[]'
   */
  export type ListEnumMatchTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MatchType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DisplayState'
   */
  export type EnumDisplayStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DisplayState'>
    


  /**
   * Reference to a field of type 'DisplayState[]'
   */
  export type ListEnumDisplayStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DisplayState[]'>
    


  /**
   * Reference to a field of type 'ElementType'
   */
  export type EnumElementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElementType'>
    


  /**
   * Reference to a field of type 'ElementType[]'
   */
  export type ListEnumElementTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ElementType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    email?: StringNullableFilter<"User"> | string | null
    gender?: BoolNullableFilter<"User"> | boolean | null
    DateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdById?: StringNullableFilter<"User"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdUsers?: UserListRelationFilter
    tournaments?: TournamentListRelationFilter
    scoredMatches?: MatchListRelationFilter
    matchReferees?: MatchRefereeListRelationFilter
    fieldDisplays?: FieldDisplayListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    email?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    DateOfBirth?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    createdUsers?: UserOrderByRelationAggregateInput
    tournaments?: TournamentOrderByRelationAggregateInput
    scoredMatches?: MatchOrderByRelationAggregateInput
    matchReferees?: MatchRefereeOrderByRelationAggregateInput
    fieldDisplays?: FieldDisplayOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    gender?: BoolNullableFilter<"User"> | boolean | null
    DateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdById?: StringNullableFilter<"User"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    createdUsers?: UserListRelationFilter
    tournaments?: TournamentListRelationFilter
    scoredMatches?: MatchListRelationFilter
    matchReferees?: MatchRefereeListRelationFilter
    fieldDisplays?: FieldDisplayListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    email?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    DateOfBirth?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    DateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type TournamentWhereInput = {
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    id?: StringFilter<"Tournament"> | string
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    adminId?: StringFilter<"Tournament"> | string
    numberOfFields?: IntFilter<"Tournament"> | number
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    stages?: StageListRelationFilter
    teams?: TeamListRelationFilter
    teamStats?: TeamStatsListRelationFilter
    fields?: FieldListRelationFilter
    scoreConfigs?: ScoreConfigListRelationFilter
  }

  export type TournamentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    numberOfFields?: SortOrder
    admin?: UserOrderByWithRelationInput
    stages?: StageOrderByRelationAggregateInput
    teams?: TeamOrderByRelationAggregateInput
    teamStats?: TeamStatsOrderByRelationAggregateInput
    fields?: FieldOrderByRelationAggregateInput
    scoreConfigs?: ScoreConfigOrderByRelationAggregateInput
  }

  export type TournamentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TournamentWhereInput | TournamentWhereInput[]
    OR?: TournamentWhereInput[]
    NOT?: TournamentWhereInput | TournamentWhereInput[]
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    adminId?: StringFilter<"Tournament"> | string
    numberOfFields?: IntFilter<"Tournament"> | number
    admin?: XOR<UserScalarRelationFilter, UserWhereInput>
    stages?: StageListRelationFilter
    teams?: TeamListRelationFilter
    teamStats?: TeamStatsListRelationFilter
    fields?: FieldListRelationFilter
    scoreConfigs?: ScoreConfigListRelationFilter
  }, "id">

  export type TournamentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    numberOfFields?: SortOrder
    _count?: TournamentCountOrderByAggregateInput
    _avg?: TournamentAvgOrderByAggregateInput
    _max?: TournamentMaxOrderByAggregateInput
    _min?: TournamentMinOrderByAggregateInput
    _sum?: TournamentSumOrderByAggregateInput
  }

  export type TournamentScalarWhereWithAggregatesInput = {
    AND?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    OR?: TournamentScalarWhereWithAggregatesInput[]
    NOT?: TournamentScalarWhereWithAggregatesInput | TournamentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tournament"> | string
    name?: StringWithAggregatesFilter<"Tournament"> | string
    description?: StringNullableWithAggregatesFilter<"Tournament"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tournament"> | Date | string
    adminId?: StringWithAggregatesFilter<"Tournament"> | string
    numberOfFields?: IntWithAggregatesFilter<"Tournament"> | number
  }

  export type StageWhereInput = {
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    id?: StringFilter<"Stage"> | string
    name?: StringFilter<"Stage"> | string
    type?: EnumStageTypeFilter<"Stage"> | $Enums.StageType
    startDate?: DateTimeFilter<"Stage"> | Date | string
    endDate?: DateTimeFilter<"Stage"> | Date | string
    tournamentId?: StringFilter<"Stage"> | string
    teamsPerAlliance?: IntFilter<"Stage"> | number
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: MatchListRelationFilter
    teamStats?: TeamStatsListRelationFilter
  }

  export type StageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    tournamentId?: SortOrder
    teamsPerAlliance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    matches?: MatchOrderByRelationAggregateInput
    teamStats?: TeamStatsOrderByRelationAggregateInput
  }

  export type StageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    name?: StringFilter<"Stage"> | string
    type?: EnumStageTypeFilter<"Stage"> | $Enums.StageType
    startDate?: DateTimeFilter<"Stage"> | Date | string
    endDate?: DateTimeFilter<"Stage"> | Date | string
    tournamentId?: StringFilter<"Stage"> | string
    teamsPerAlliance?: IntFilter<"Stage"> | number
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: MatchListRelationFilter
    teamStats?: TeamStatsListRelationFilter
  }, "id">

  export type StageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    tournamentId?: SortOrder
    teamsPerAlliance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StageCountOrderByAggregateInput
    _avg?: StageAvgOrderByAggregateInput
    _max?: StageMaxOrderByAggregateInput
    _min?: StageMinOrderByAggregateInput
    _sum?: StageSumOrderByAggregateInput
  }

  export type StageScalarWhereWithAggregatesInput = {
    AND?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    OR?: StageScalarWhereWithAggregatesInput[]
    NOT?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stage"> | string
    name?: StringWithAggregatesFilter<"Stage"> | string
    type?: EnumStageTypeWithAggregatesFilter<"Stage"> | $Enums.StageType
    startDate?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    tournamentId?: StringWithAggregatesFilter<"Stage"> | string
    teamsPerAlliance?: IntWithAggregatesFilter<"Stage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stage"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    matchNumber?: IntFilter<"Match"> | number
    roundNumber?: IntNullableFilter<"Match"> | number | null
    status?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    startTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    scheduledTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    duration?: IntNullableFilter<"Match"> | number | null
    winningAlliance?: EnumAllianceColorNullableFilter<"Match"> | $Enums.AllianceColor | null
    stageId?: StringFilter<"Match"> | string
    scoredById?: StringNullableFilter<"Match"> | string | null
    roundType?: EnumMatchRoundTypeNullableFilter<"Match"> | $Enums.MatchRoundType | null
    scheduleId?: StringNullableFilter<"Match"> | string | null
    fieldId?: StringNullableFilter<"Match"> | string | null
    matchType?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    matchDuration?: IntNullableFilter<"Match"> | number | null
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    stage?: XOR<StageScalarRelationFilter, StageWhereInput>
    alliances?: AllianceListRelationFilter
    scoredBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referees?: MatchRefereeListRelationFilter
    field?: XOR<FieldNullableScalarRelationFilter, FieldWhereInput> | null
    matchScores?: MatchScoreListRelationFilter
    fieldDisplays?: FieldDisplayListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    matchNumber?: SortOrder
    roundNumber?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    winningAlliance?: SortOrderInput | SortOrder
    stageId?: SortOrder
    scoredById?: SortOrderInput | SortOrder
    roundType?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    fieldId?: SortOrderInput | SortOrder
    matchType?: SortOrder
    matchDuration?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    stage?: StageOrderByWithRelationInput
    alliances?: AllianceOrderByRelationAggregateInput
    scoredBy?: UserOrderByWithRelationInput
    referees?: MatchRefereeOrderByRelationAggregateInput
    field?: FieldOrderByWithRelationInput
    matchScores?: MatchScoreOrderByRelationAggregateInput
    fieldDisplays?: FieldDisplayOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    matchNumber?: IntFilter<"Match"> | number
    roundNumber?: IntNullableFilter<"Match"> | number | null
    status?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    startTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    scheduledTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    duration?: IntNullableFilter<"Match"> | number | null
    winningAlliance?: EnumAllianceColorNullableFilter<"Match"> | $Enums.AllianceColor | null
    stageId?: StringFilter<"Match"> | string
    scoredById?: StringNullableFilter<"Match"> | string | null
    roundType?: EnumMatchRoundTypeNullableFilter<"Match"> | $Enums.MatchRoundType | null
    scheduleId?: StringNullableFilter<"Match"> | string | null
    fieldId?: StringNullableFilter<"Match"> | string | null
    matchType?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    matchDuration?: IntNullableFilter<"Match"> | number | null
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    stage?: XOR<StageScalarRelationFilter, StageWhereInput>
    alliances?: AllianceListRelationFilter
    scoredBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    referees?: MatchRefereeListRelationFilter
    field?: XOR<FieldNullableScalarRelationFilter, FieldWhereInput> | null
    matchScores?: MatchScoreListRelationFilter
    fieldDisplays?: FieldDisplayListRelationFilter
  }, "id">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    matchNumber?: SortOrder
    roundNumber?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrderInput | SortOrder
    scheduledTime?: SortOrderInput | SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    winningAlliance?: SortOrderInput | SortOrder
    stageId?: SortOrder
    scoredById?: SortOrderInput | SortOrder
    roundType?: SortOrderInput | SortOrder
    scheduleId?: SortOrderInput | SortOrder
    fieldId?: SortOrderInput | SortOrder
    matchType?: SortOrder
    matchDuration?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    matchNumber?: IntWithAggregatesFilter<"Match"> | number
    roundNumber?: IntNullableWithAggregatesFilter<"Match"> | number | null
    status?: EnumMatchStateWithAggregatesFilter<"Match"> | $Enums.MatchState
    startTime?: DateTimeNullableWithAggregatesFilter<"Match"> | Date | string | null
    scheduledTime?: DateTimeNullableWithAggregatesFilter<"Match"> | Date | string | null
    endTime?: DateTimeNullableWithAggregatesFilter<"Match"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"Match"> | number | null
    winningAlliance?: EnumAllianceColorNullableWithAggregatesFilter<"Match"> | $Enums.AllianceColor | null
    stageId?: StringWithAggregatesFilter<"Match"> | string
    scoredById?: StringNullableWithAggregatesFilter<"Match"> | string | null
    roundType?: EnumMatchRoundTypeNullableWithAggregatesFilter<"Match"> | $Enums.MatchRoundType | null
    scheduleId?: StringNullableWithAggregatesFilter<"Match"> | string | null
    fieldId?: StringNullableWithAggregatesFilter<"Match"> | string | null
    matchType?: EnumMatchTypeWithAggregatesFilter<"Match"> | $Enums.MatchType
    matchDuration?: IntNullableWithAggregatesFilter<"Match"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
  }

  export type MatchRefereeWhereInput = {
    AND?: MatchRefereeWhereInput | MatchRefereeWhereInput[]
    OR?: MatchRefereeWhereInput[]
    NOT?: MatchRefereeWhereInput | MatchRefereeWhereInput[]
    id?: StringFilter<"MatchReferee"> | string
    matchId?: StringFilter<"MatchReferee"> | string
    userId?: StringFilter<"MatchReferee"> | string
    role?: EnumUserRoleFilter<"MatchReferee"> | $Enums.UserRole
    position?: StringNullableFilter<"MatchReferee"> | string | null
    createdAt?: DateTimeFilter<"MatchReferee"> | Date | string
    updatedAt?: DateTimeFilter<"MatchReferee"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MatchRefereeOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    position?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MatchRefereeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    matchId_userId?: MatchRefereeMatchIdUserIdCompoundUniqueInput
    AND?: MatchRefereeWhereInput | MatchRefereeWhereInput[]
    OR?: MatchRefereeWhereInput[]
    NOT?: MatchRefereeWhereInput | MatchRefereeWhereInput[]
    matchId?: StringFilter<"MatchReferee"> | string
    userId?: StringFilter<"MatchReferee"> | string
    role?: EnumUserRoleFilter<"MatchReferee"> | $Enums.UserRole
    position?: StringNullableFilter<"MatchReferee"> | string | null
    createdAt?: DateTimeFilter<"MatchReferee"> | Date | string
    updatedAt?: DateTimeFilter<"MatchReferee"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "matchId_userId">

  export type MatchRefereeOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    position?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchRefereeCountOrderByAggregateInput
    _max?: MatchRefereeMaxOrderByAggregateInput
    _min?: MatchRefereeMinOrderByAggregateInput
  }

  export type MatchRefereeScalarWhereWithAggregatesInput = {
    AND?: MatchRefereeScalarWhereWithAggregatesInput | MatchRefereeScalarWhereWithAggregatesInput[]
    OR?: MatchRefereeScalarWhereWithAggregatesInput[]
    NOT?: MatchRefereeScalarWhereWithAggregatesInput | MatchRefereeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchReferee"> | string
    matchId?: StringWithAggregatesFilter<"MatchReferee"> | string
    userId?: StringWithAggregatesFilter<"MatchReferee"> | string
    role?: EnumUserRoleWithAggregatesFilter<"MatchReferee"> | $Enums.UserRole
    position?: StringNullableWithAggregatesFilter<"MatchReferee"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MatchReferee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MatchReferee"> | Date | string
  }

  export type AllianceWhereInput = {
    AND?: AllianceWhereInput | AllianceWhereInput[]
    OR?: AllianceWhereInput[]
    NOT?: AllianceWhereInput | AllianceWhereInput[]
    id?: StringFilter<"Alliance"> | string
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    score?: IntFilter<"Alliance"> | number
    autoScore?: IntFilter<"Alliance"> | number
    driveScore?: IntFilter<"Alliance"> | number
    matchId?: StringFilter<"Alliance"> | string
    createdAt?: DateTimeFilter<"Alliance"> | Date | string
    updatedAt?: DateTimeFilter<"Alliance"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    teamAlliances?: TeamAllianceListRelationFilter
    matchScores?: MatchScoreListRelationFilter
  }

  export type AllianceOrderByWithRelationInput = {
    id?: SortOrder
    color?: SortOrder
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
    matchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    teamAlliances?: TeamAllianceOrderByRelationAggregateInput
    matchScores?: MatchScoreOrderByRelationAggregateInput
  }

  export type AllianceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AllianceWhereInput | AllianceWhereInput[]
    OR?: AllianceWhereInput[]
    NOT?: AllianceWhereInput | AllianceWhereInput[]
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    score?: IntFilter<"Alliance"> | number
    autoScore?: IntFilter<"Alliance"> | number
    driveScore?: IntFilter<"Alliance"> | number
    matchId?: StringFilter<"Alliance"> | string
    createdAt?: DateTimeFilter<"Alliance"> | Date | string
    updatedAt?: DateTimeFilter<"Alliance"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    teamAlliances?: TeamAllianceListRelationFilter
    matchScores?: MatchScoreListRelationFilter
  }, "id">

  export type AllianceOrderByWithAggregationInput = {
    id?: SortOrder
    color?: SortOrder
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
    matchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AllianceCountOrderByAggregateInput
    _avg?: AllianceAvgOrderByAggregateInput
    _max?: AllianceMaxOrderByAggregateInput
    _min?: AllianceMinOrderByAggregateInput
    _sum?: AllianceSumOrderByAggregateInput
  }

  export type AllianceScalarWhereWithAggregatesInput = {
    AND?: AllianceScalarWhereWithAggregatesInput | AllianceScalarWhereWithAggregatesInput[]
    OR?: AllianceScalarWhereWithAggregatesInput[]
    NOT?: AllianceScalarWhereWithAggregatesInput | AllianceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alliance"> | string
    color?: EnumAllianceColorWithAggregatesFilter<"Alliance"> | $Enums.AllianceColor
    score?: IntWithAggregatesFilter<"Alliance"> | number
    autoScore?: IntWithAggregatesFilter<"Alliance"> | number
    driveScore?: IntWithAggregatesFilter<"Alliance"> | number
    matchId?: StringWithAggregatesFilter<"Alliance"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Alliance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Alliance"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    teamNumber?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    organization?: StringNullableFilter<"Team"> | string | null
    avatar?: StringNullableFilter<"Team"> | string | null
    description?: StringNullableFilter<"Team"> | string | null
    teamLead?: StringNullableFilter<"Team"> | string | null
    teamLeadId?: StringNullableFilter<"Team"> | string | null
    teamMembers?: JsonNullableFilter<"Team">
    tournamentId?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    tournament?: XOR<TournamentNullableScalarRelationFilter, TournamentWhereInput> | null
    teamAlliances?: TeamAllianceListRelationFilter
    teamStats?: TeamStatsListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    teamNumber?: SortOrder
    name?: SortOrder
    organization?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    teamLead?: SortOrderInput | SortOrder
    teamLeadId?: SortOrderInput | SortOrder
    teamMembers?: SortOrderInput | SortOrder
    tournamentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    teamAlliances?: TeamAllianceOrderByRelationAggregateInput
    teamStats?: TeamStatsOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamNumber?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    organization?: StringNullableFilter<"Team"> | string | null
    avatar?: StringNullableFilter<"Team"> | string | null
    description?: StringNullableFilter<"Team"> | string | null
    teamLead?: StringNullableFilter<"Team"> | string | null
    teamLeadId?: StringNullableFilter<"Team"> | string | null
    teamMembers?: JsonNullableFilter<"Team">
    tournamentId?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    tournament?: XOR<TournamentNullableScalarRelationFilter, TournamentWhereInput> | null
    teamAlliances?: TeamAllianceListRelationFilter
    teamStats?: TeamStatsListRelationFilter
  }, "id" | "teamNumber">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    teamNumber?: SortOrder
    name?: SortOrder
    organization?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    teamLead?: SortOrderInput | SortOrder
    teamLeadId?: SortOrderInput | SortOrder
    teamMembers?: SortOrderInput | SortOrder
    tournamentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    teamNumber?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    organization?: StringNullableWithAggregatesFilter<"Team"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"Team"> | string | null
    description?: StringNullableWithAggregatesFilter<"Team"> | string | null
    teamLead?: StringNullableWithAggregatesFilter<"Team"> | string | null
    teamLeadId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    teamMembers?: JsonNullableWithAggregatesFilter<"Team">
    tournamentId?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamAllianceWhereInput = {
    AND?: TeamAllianceWhereInput | TeamAllianceWhereInput[]
    OR?: TeamAllianceWhereInput[]
    NOT?: TeamAllianceWhereInput | TeamAllianceWhereInput[]
    id?: StringFilter<"TeamAlliance"> | string
    teamId?: StringFilter<"TeamAlliance"> | string
    allianceId?: StringFilter<"TeamAlliance"> | string
    stationPosition?: IntFilter<"TeamAlliance"> | number
    isSurrogate?: BoolFilter<"TeamAlliance"> | boolean
    createdAt?: DateTimeFilter<"TeamAlliance"> | Date | string
    updatedAt?: DateTimeFilter<"TeamAlliance"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    alliance?: XOR<AllianceScalarRelationFilter, AllianceWhereInput>
  }

  export type TeamAllianceOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    allianceId?: SortOrder
    stationPosition?: SortOrder
    isSurrogate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    alliance?: AllianceOrderByWithRelationInput
  }

  export type TeamAllianceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamId_allianceId?: TeamAllianceTeamIdAllianceIdCompoundUniqueInput
    AND?: TeamAllianceWhereInput | TeamAllianceWhereInput[]
    OR?: TeamAllianceWhereInput[]
    NOT?: TeamAllianceWhereInput | TeamAllianceWhereInput[]
    teamId?: StringFilter<"TeamAlliance"> | string
    allianceId?: StringFilter<"TeamAlliance"> | string
    stationPosition?: IntFilter<"TeamAlliance"> | number
    isSurrogate?: BoolFilter<"TeamAlliance"> | boolean
    createdAt?: DateTimeFilter<"TeamAlliance"> | Date | string
    updatedAt?: DateTimeFilter<"TeamAlliance"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    alliance?: XOR<AllianceScalarRelationFilter, AllianceWhereInput>
  }, "id" | "teamId_allianceId">

  export type TeamAllianceOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    allianceId?: SortOrder
    stationPosition?: SortOrder
    isSurrogate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamAllianceCountOrderByAggregateInput
    _avg?: TeamAllianceAvgOrderByAggregateInput
    _max?: TeamAllianceMaxOrderByAggregateInput
    _min?: TeamAllianceMinOrderByAggregateInput
    _sum?: TeamAllianceSumOrderByAggregateInput
  }

  export type TeamAllianceScalarWhereWithAggregatesInput = {
    AND?: TeamAllianceScalarWhereWithAggregatesInput | TeamAllianceScalarWhereWithAggregatesInput[]
    OR?: TeamAllianceScalarWhereWithAggregatesInput[]
    NOT?: TeamAllianceScalarWhereWithAggregatesInput | TeamAllianceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamAlliance"> | string
    teamId?: StringWithAggregatesFilter<"TeamAlliance"> | string
    allianceId?: StringWithAggregatesFilter<"TeamAlliance"> | string
    stationPosition?: IntWithAggregatesFilter<"TeamAlliance"> | number
    isSurrogate?: BoolWithAggregatesFilter<"TeamAlliance"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TeamAlliance"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamAlliance"> | Date | string
  }

  export type TeamStatsWhereInput = {
    AND?: TeamStatsWhereInput | TeamStatsWhereInput[]
    OR?: TeamStatsWhereInput[]
    NOT?: TeamStatsWhereInput | TeamStatsWhereInput[]
    id?: StringFilter<"TeamStats"> | string
    teamId?: StringFilter<"TeamStats"> | string
    tournamentId?: StringFilter<"TeamStats"> | string
    stageId?: StringNullableFilter<"TeamStats"> | string | null
    wins?: IntFilter<"TeamStats"> | number
    losses?: IntFilter<"TeamStats"> | number
    ties?: IntFilter<"TeamStats"> | number
    pointsScored?: IntFilter<"TeamStats"> | number
    pointsConceded?: IntFilter<"TeamStats"> | number
    matchesPlayed?: IntFilter<"TeamStats"> | number
    rankingPoints?: IntFilter<"TeamStats"> | number
    opponentWinPercentage?: FloatFilter<"TeamStats"> | number
    pointDifferential?: IntFilter<"TeamStats"> | number
    rank?: IntNullableFilter<"TeamStats"> | number | null
    tiebreaker1?: FloatFilter<"TeamStats"> | number
    tiebreaker2?: FloatFilter<"TeamStats"> | number
    createdAt?: DateTimeFilter<"TeamStats"> | Date | string
    updatedAt?: DateTimeFilter<"TeamStats"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    stage?: XOR<StageNullableScalarRelationFilter, StageWhereInput> | null
  }

  export type TeamStatsOrderByWithRelationInput = {
    id?: SortOrder
    teamId?: SortOrder
    tournamentId?: SortOrder
    stageId?: SortOrderInput | SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrderInput | SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team?: TeamOrderByWithRelationInput
    tournament?: TournamentOrderByWithRelationInput
    stage?: StageOrderByWithRelationInput
  }

  export type TeamStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teamId_tournamentId?: TeamStatsTeamIdTournamentIdCompoundUniqueInput
    AND?: TeamStatsWhereInput | TeamStatsWhereInput[]
    OR?: TeamStatsWhereInput[]
    NOT?: TeamStatsWhereInput | TeamStatsWhereInput[]
    teamId?: StringFilter<"TeamStats"> | string
    tournamentId?: StringFilter<"TeamStats"> | string
    stageId?: StringNullableFilter<"TeamStats"> | string | null
    wins?: IntFilter<"TeamStats"> | number
    losses?: IntFilter<"TeamStats"> | number
    ties?: IntFilter<"TeamStats"> | number
    pointsScored?: IntFilter<"TeamStats"> | number
    pointsConceded?: IntFilter<"TeamStats"> | number
    matchesPlayed?: IntFilter<"TeamStats"> | number
    rankingPoints?: IntFilter<"TeamStats"> | number
    opponentWinPercentage?: FloatFilter<"TeamStats"> | number
    pointDifferential?: IntFilter<"TeamStats"> | number
    rank?: IntNullableFilter<"TeamStats"> | number | null
    tiebreaker1?: FloatFilter<"TeamStats"> | number
    tiebreaker2?: FloatFilter<"TeamStats"> | number
    createdAt?: DateTimeFilter<"TeamStats"> | Date | string
    updatedAt?: DateTimeFilter<"TeamStats"> | Date | string
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    stage?: XOR<StageNullableScalarRelationFilter, StageWhereInput> | null
  }, "id" | "teamId_tournamentId">

  export type TeamStatsOrderByWithAggregationInput = {
    id?: SortOrder
    teamId?: SortOrder
    tournamentId?: SortOrder
    stageId?: SortOrderInput | SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrderInput | SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamStatsCountOrderByAggregateInput
    _avg?: TeamStatsAvgOrderByAggregateInput
    _max?: TeamStatsMaxOrderByAggregateInput
    _min?: TeamStatsMinOrderByAggregateInput
    _sum?: TeamStatsSumOrderByAggregateInput
  }

  export type TeamStatsScalarWhereWithAggregatesInput = {
    AND?: TeamStatsScalarWhereWithAggregatesInput | TeamStatsScalarWhereWithAggregatesInput[]
    OR?: TeamStatsScalarWhereWithAggregatesInput[]
    NOT?: TeamStatsScalarWhereWithAggregatesInput | TeamStatsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeamStats"> | string
    teamId?: StringWithAggregatesFilter<"TeamStats"> | string
    tournamentId?: StringWithAggregatesFilter<"TeamStats"> | string
    stageId?: StringNullableWithAggregatesFilter<"TeamStats"> | string | null
    wins?: IntWithAggregatesFilter<"TeamStats"> | number
    losses?: IntWithAggregatesFilter<"TeamStats"> | number
    ties?: IntWithAggregatesFilter<"TeamStats"> | number
    pointsScored?: IntWithAggregatesFilter<"TeamStats"> | number
    pointsConceded?: IntWithAggregatesFilter<"TeamStats"> | number
    matchesPlayed?: IntWithAggregatesFilter<"TeamStats"> | number
    rankingPoints?: IntWithAggregatesFilter<"TeamStats"> | number
    opponentWinPercentage?: FloatWithAggregatesFilter<"TeamStats"> | number
    pointDifferential?: IntWithAggregatesFilter<"TeamStats"> | number
    rank?: IntNullableWithAggregatesFilter<"TeamStats"> | number | null
    tiebreaker1?: FloatWithAggregatesFilter<"TeamStats"> | number
    tiebreaker2?: FloatWithAggregatesFilter<"TeamStats"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TeamStats"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamStats"> | Date | string
  }

  export type FieldWhereInput = {
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    id?: StringFilter<"Field"> | string
    name?: StringFilter<"Field"> | string
    number?: IntFilter<"Field"> | number
    location?: StringNullableFilter<"Field"> | string | null
    description?: StringNullableFilter<"Field"> | string | null
    tournamentId?: StringFilter<"Field"> | string
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: MatchListRelationFilter
    fieldDisplay?: XOR<FieldDisplayNullableScalarRelationFilter, FieldDisplayWhereInput> | null
  }

  export type FieldOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    matches?: MatchOrderByRelationAggregateInput
    fieldDisplay?: FieldDisplayOrderByWithRelationInput
  }

  export type FieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tournamentId_number?: FieldTournamentIdNumberCompoundUniqueInput
    AND?: FieldWhereInput | FieldWhereInput[]
    OR?: FieldWhereInput[]
    NOT?: FieldWhereInput | FieldWhereInput[]
    name?: StringFilter<"Field"> | string
    number?: IntFilter<"Field"> | number
    location?: StringNullableFilter<"Field"> | string | null
    description?: StringNullableFilter<"Field"> | string | null
    tournamentId?: StringFilter<"Field"> | string
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    matches?: MatchListRelationFilter
    fieldDisplay?: XOR<FieldDisplayNullableScalarRelationFilter, FieldDisplayWhereInput> | null
  }, "id" | "tournamentId_number">

  export type FieldOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    location?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FieldCountOrderByAggregateInput
    _avg?: FieldAvgOrderByAggregateInput
    _max?: FieldMaxOrderByAggregateInput
    _min?: FieldMinOrderByAggregateInput
    _sum?: FieldSumOrderByAggregateInput
  }

  export type FieldScalarWhereWithAggregatesInput = {
    AND?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    OR?: FieldScalarWhereWithAggregatesInput[]
    NOT?: FieldScalarWhereWithAggregatesInput | FieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Field"> | string
    name?: StringWithAggregatesFilter<"Field"> | string
    number?: IntWithAggregatesFilter<"Field"> | number
    location?: StringNullableWithAggregatesFilter<"Field"> | string | null
    description?: StringNullableWithAggregatesFilter<"Field"> | string | null
    tournamentId?: StringWithAggregatesFilter<"Field"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Field"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Field"> | Date | string
  }

  export type FieldDisplayWhereInput = {
    AND?: FieldDisplayWhereInput | FieldDisplayWhereInput[]
    OR?: FieldDisplayWhereInput[]
    NOT?: FieldDisplayWhereInput | FieldDisplayWhereInput[]
    id?: StringFilter<"FieldDisplay"> | string
    fieldId?: StringFilter<"FieldDisplay"> | string
    displayState?: EnumDisplayStateFilter<"FieldDisplay"> | $Enums.DisplayState
    currentMatchId?: StringNullableFilter<"FieldDisplay"> | string | null
    customMessage?: StringNullableFilter<"FieldDisplay"> | string | null
    lastUpdatedBy?: StringNullableFilter<"FieldDisplay"> | string | null
    autoAdvance?: BoolFilter<"FieldDisplay"> | boolean
    createdAt?: DateTimeFilter<"FieldDisplay"> | Date | string
    updatedAt?: DateTimeFilter<"FieldDisplay"> | Date | string
    field?: XOR<FieldScalarRelationFilter, FieldWhereInput>
    currentMatch?: XOR<MatchNullableScalarRelationFilter, MatchWhereInput> | null
    lastUpdatedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FieldDisplayOrderByWithRelationInput = {
    id?: SortOrder
    fieldId?: SortOrder
    displayState?: SortOrder
    currentMatchId?: SortOrderInput | SortOrder
    customMessage?: SortOrderInput | SortOrder
    lastUpdatedBy?: SortOrderInput | SortOrder
    autoAdvance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    field?: FieldOrderByWithRelationInput
    currentMatch?: MatchOrderByWithRelationInput
    lastUpdatedUser?: UserOrderByWithRelationInput
  }

  export type FieldDisplayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fieldId?: string
    AND?: FieldDisplayWhereInput | FieldDisplayWhereInput[]
    OR?: FieldDisplayWhereInput[]
    NOT?: FieldDisplayWhereInput | FieldDisplayWhereInput[]
    displayState?: EnumDisplayStateFilter<"FieldDisplay"> | $Enums.DisplayState
    currentMatchId?: StringNullableFilter<"FieldDisplay"> | string | null
    customMessage?: StringNullableFilter<"FieldDisplay"> | string | null
    lastUpdatedBy?: StringNullableFilter<"FieldDisplay"> | string | null
    autoAdvance?: BoolFilter<"FieldDisplay"> | boolean
    createdAt?: DateTimeFilter<"FieldDisplay"> | Date | string
    updatedAt?: DateTimeFilter<"FieldDisplay"> | Date | string
    field?: XOR<FieldScalarRelationFilter, FieldWhereInput>
    currentMatch?: XOR<MatchNullableScalarRelationFilter, MatchWhereInput> | null
    lastUpdatedUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "fieldId">

  export type FieldDisplayOrderByWithAggregationInput = {
    id?: SortOrder
    fieldId?: SortOrder
    displayState?: SortOrder
    currentMatchId?: SortOrderInput | SortOrder
    customMessage?: SortOrderInput | SortOrder
    lastUpdatedBy?: SortOrderInput | SortOrder
    autoAdvance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FieldDisplayCountOrderByAggregateInput
    _max?: FieldDisplayMaxOrderByAggregateInput
    _min?: FieldDisplayMinOrderByAggregateInput
  }

  export type FieldDisplayScalarWhereWithAggregatesInput = {
    AND?: FieldDisplayScalarWhereWithAggregatesInput | FieldDisplayScalarWhereWithAggregatesInput[]
    OR?: FieldDisplayScalarWhereWithAggregatesInput[]
    NOT?: FieldDisplayScalarWhereWithAggregatesInput | FieldDisplayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FieldDisplay"> | string
    fieldId?: StringWithAggregatesFilter<"FieldDisplay"> | string
    displayState?: EnumDisplayStateWithAggregatesFilter<"FieldDisplay"> | $Enums.DisplayState
    currentMatchId?: StringNullableWithAggregatesFilter<"FieldDisplay"> | string | null
    customMessage?: StringNullableWithAggregatesFilter<"FieldDisplay"> | string | null
    lastUpdatedBy?: StringNullableWithAggregatesFilter<"FieldDisplay"> | string | null
    autoAdvance?: BoolWithAggregatesFilter<"FieldDisplay"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"FieldDisplay"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FieldDisplay"> | Date | string
  }

  export type ScoreConfigWhereInput = {
    AND?: ScoreConfigWhereInput | ScoreConfigWhereInput[]
    OR?: ScoreConfigWhereInput[]
    NOT?: ScoreConfigWhereInput | ScoreConfigWhereInput[]
    id?: StringFilter<"ScoreConfig"> | string
    tournamentId?: StringFilter<"ScoreConfig"> | string
    name?: StringFilter<"ScoreConfig"> | string
    description?: StringNullableFilter<"ScoreConfig"> | string | null
    createdAt?: DateTimeFilter<"ScoreConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreConfig"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    scoreElements?: ScoreElementListRelationFilter
    bonusConditions?: BonusConditionListRelationFilter
    penaltyConditions?: PenaltyConditionListRelationFilter
  }

  export type ScoreConfigOrderByWithRelationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tournament?: TournamentOrderByWithRelationInput
    scoreElements?: ScoreElementOrderByRelationAggregateInput
    bonusConditions?: BonusConditionOrderByRelationAggregateInput
    penaltyConditions?: PenaltyConditionOrderByRelationAggregateInput
  }

  export type ScoreConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScoreConfigWhereInput | ScoreConfigWhereInput[]
    OR?: ScoreConfigWhereInput[]
    NOT?: ScoreConfigWhereInput | ScoreConfigWhereInput[]
    tournamentId?: StringFilter<"ScoreConfig"> | string
    name?: StringFilter<"ScoreConfig"> | string
    description?: StringNullableFilter<"ScoreConfig"> | string | null
    createdAt?: DateTimeFilter<"ScoreConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreConfig"> | Date | string
    tournament?: XOR<TournamentScalarRelationFilter, TournamentWhereInput>
    scoreElements?: ScoreElementListRelationFilter
    bonusConditions?: BonusConditionListRelationFilter
    penaltyConditions?: PenaltyConditionListRelationFilter
  }, "id">

  export type ScoreConfigOrderByWithAggregationInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScoreConfigCountOrderByAggregateInput
    _max?: ScoreConfigMaxOrderByAggregateInput
    _min?: ScoreConfigMinOrderByAggregateInput
  }

  export type ScoreConfigScalarWhereWithAggregatesInput = {
    AND?: ScoreConfigScalarWhereWithAggregatesInput | ScoreConfigScalarWhereWithAggregatesInput[]
    OR?: ScoreConfigScalarWhereWithAggregatesInput[]
    NOT?: ScoreConfigScalarWhereWithAggregatesInput | ScoreConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScoreConfig"> | string
    tournamentId?: StringWithAggregatesFilter<"ScoreConfig"> | string
    name?: StringWithAggregatesFilter<"ScoreConfig"> | string
    description?: StringNullableWithAggregatesFilter<"ScoreConfig"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ScoreConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScoreConfig"> | Date | string
  }

  export type ScoreElementWhereInput = {
    AND?: ScoreElementWhereInput | ScoreElementWhereInput[]
    OR?: ScoreElementWhereInput[]
    NOT?: ScoreElementWhereInput | ScoreElementWhereInput[]
    id?: StringFilter<"ScoreElement"> | string
    scoreConfigId?: StringFilter<"ScoreElement"> | string
    name?: StringFilter<"ScoreElement"> | string
    code?: StringFilter<"ScoreElement"> | string
    description?: StringNullableFilter<"ScoreElement"> | string | null
    pointsPerUnit?: IntFilter<"ScoreElement"> | number
    category?: StringNullableFilter<"ScoreElement"> | string | null
    elementType?: EnumElementTypeFilter<"ScoreElement"> | $Enums.ElementType
    displayOrder?: IntFilter<"ScoreElement"> | number
    icon?: StringNullableFilter<"ScoreElement"> | string | null
    color?: StringNullableFilter<"ScoreElement"> | string | null
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
    matchScores?: MatchScoreListRelationFilter
  }

  export type ScoreElementOrderByWithRelationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    pointsPerUnit?: SortOrder
    category?: SortOrderInput | SortOrder
    elementType?: SortOrder
    displayOrder?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    scoreConfig?: ScoreConfigOrderByWithRelationInput
    matchScores?: MatchScoreOrderByRelationAggregateInput
  }

  export type ScoreElementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scoreConfigId_code?: ScoreElementScoreConfigIdCodeCompoundUniqueInput
    AND?: ScoreElementWhereInput | ScoreElementWhereInput[]
    OR?: ScoreElementWhereInput[]
    NOT?: ScoreElementWhereInput | ScoreElementWhereInput[]
    scoreConfigId?: StringFilter<"ScoreElement"> | string
    name?: StringFilter<"ScoreElement"> | string
    code?: StringFilter<"ScoreElement"> | string
    description?: StringNullableFilter<"ScoreElement"> | string | null
    pointsPerUnit?: IntFilter<"ScoreElement"> | number
    category?: StringNullableFilter<"ScoreElement"> | string | null
    elementType?: EnumElementTypeFilter<"ScoreElement"> | $Enums.ElementType
    displayOrder?: IntFilter<"ScoreElement"> | number
    icon?: StringNullableFilter<"ScoreElement"> | string | null
    color?: StringNullableFilter<"ScoreElement"> | string | null
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
    matchScores?: MatchScoreListRelationFilter
  }, "id" | "scoreConfigId_code">

  export type ScoreElementOrderByWithAggregationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    pointsPerUnit?: SortOrder
    category?: SortOrderInput | SortOrder
    elementType?: SortOrder
    displayOrder?: SortOrder
    icon?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    _count?: ScoreElementCountOrderByAggregateInput
    _avg?: ScoreElementAvgOrderByAggregateInput
    _max?: ScoreElementMaxOrderByAggregateInput
    _min?: ScoreElementMinOrderByAggregateInput
    _sum?: ScoreElementSumOrderByAggregateInput
  }

  export type ScoreElementScalarWhereWithAggregatesInput = {
    AND?: ScoreElementScalarWhereWithAggregatesInput | ScoreElementScalarWhereWithAggregatesInput[]
    OR?: ScoreElementScalarWhereWithAggregatesInput[]
    NOT?: ScoreElementScalarWhereWithAggregatesInput | ScoreElementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScoreElement"> | string
    scoreConfigId?: StringWithAggregatesFilter<"ScoreElement"> | string
    name?: StringWithAggregatesFilter<"ScoreElement"> | string
    code?: StringWithAggregatesFilter<"ScoreElement"> | string
    description?: StringNullableWithAggregatesFilter<"ScoreElement"> | string | null
    pointsPerUnit?: IntWithAggregatesFilter<"ScoreElement"> | number
    category?: StringNullableWithAggregatesFilter<"ScoreElement"> | string | null
    elementType?: EnumElementTypeWithAggregatesFilter<"ScoreElement"> | $Enums.ElementType
    displayOrder?: IntWithAggregatesFilter<"ScoreElement"> | number
    icon?: StringNullableWithAggregatesFilter<"ScoreElement"> | string | null
    color?: StringNullableWithAggregatesFilter<"ScoreElement"> | string | null
  }

  export type BonusConditionWhereInput = {
    AND?: BonusConditionWhereInput | BonusConditionWhereInput[]
    OR?: BonusConditionWhereInput[]
    NOT?: BonusConditionWhereInput | BonusConditionWhereInput[]
    id?: StringFilter<"BonusCondition"> | string
    scoreConfigId?: StringFilter<"BonusCondition"> | string
    name?: StringFilter<"BonusCondition"> | string
    code?: StringFilter<"BonusCondition"> | string
    description?: StringNullableFilter<"BonusCondition"> | string | null
    bonusPoints?: IntFilter<"BonusCondition"> | number
    condition?: JsonFilter<"BonusCondition">
    displayOrder?: IntFilter<"BonusCondition"> | number
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
  }

  export type BonusConditionOrderByWithRelationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    bonusPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
    scoreConfig?: ScoreConfigOrderByWithRelationInput
  }

  export type BonusConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scoreConfigId_code?: BonusConditionScoreConfigIdCodeCompoundUniqueInput
    AND?: BonusConditionWhereInput | BonusConditionWhereInput[]
    OR?: BonusConditionWhereInput[]
    NOT?: BonusConditionWhereInput | BonusConditionWhereInput[]
    scoreConfigId?: StringFilter<"BonusCondition"> | string
    name?: StringFilter<"BonusCondition"> | string
    code?: StringFilter<"BonusCondition"> | string
    description?: StringNullableFilter<"BonusCondition"> | string | null
    bonusPoints?: IntFilter<"BonusCondition"> | number
    condition?: JsonFilter<"BonusCondition">
    displayOrder?: IntFilter<"BonusCondition"> | number
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
  }, "id" | "scoreConfigId_code">

  export type BonusConditionOrderByWithAggregationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    bonusPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
    _count?: BonusConditionCountOrderByAggregateInput
    _avg?: BonusConditionAvgOrderByAggregateInput
    _max?: BonusConditionMaxOrderByAggregateInput
    _min?: BonusConditionMinOrderByAggregateInput
    _sum?: BonusConditionSumOrderByAggregateInput
  }

  export type BonusConditionScalarWhereWithAggregatesInput = {
    AND?: BonusConditionScalarWhereWithAggregatesInput | BonusConditionScalarWhereWithAggregatesInput[]
    OR?: BonusConditionScalarWhereWithAggregatesInput[]
    NOT?: BonusConditionScalarWhereWithAggregatesInput | BonusConditionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BonusCondition"> | string
    scoreConfigId?: StringWithAggregatesFilter<"BonusCondition"> | string
    name?: StringWithAggregatesFilter<"BonusCondition"> | string
    code?: StringWithAggregatesFilter<"BonusCondition"> | string
    description?: StringNullableWithAggregatesFilter<"BonusCondition"> | string | null
    bonusPoints?: IntWithAggregatesFilter<"BonusCondition"> | number
    condition?: JsonWithAggregatesFilter<"BonusCondition">
    displayOrder?: IntWithAggregatesFilter<"BonusCondition"> | number
  }

  export type PenaltyConditionWhereInput = {
    AND?: PenaltyConditionWhereInput | PenaltyConditionWhereInput[]
    OR?: PenaltyConditionWhereInput[]
    NOT?: PenaltyConditionWhereInput | PenaltyConditionWhereInput[]
    id?: StringFilter<"PenaltyCondition"> | string
    scoreConfigId?: StringFilter<"PenaltyCondition"> | string
    name?: StringFilter<"PenaltyCondition"> | string
    code?: StringFilter<"PenaltyCondition"> | string
    description?: StringNullableFilter<"PenaltyCondition"> | string | null
    penaltyPoints?: IntFilter<"PenaltyCondition"> | number
    condition?: JsonFilter<"PenaltyCondition">
    displayOrder?: IntFilter<"PenaltyCondition"> | number
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
  }

  export type PenaltyConditionOrderByWithRelationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    penaltyPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
    scoreConfig?: ScoreConfigOrderByWithRelationInput
  }

  export type PenaltyConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scoreConfigId_code?: PenaltyConditionScoreConfigIdCodeCompoundUniqueInput
    AND?: PenaltyConditionWhereInput | PenaltyConditionWhereInput[]
    OR?: PenaltyConditionWhereInput[]
    NOT?: PenaltyConditionWhereInput | PenaltyConditionWhereInput[]
    scoreConfigId?: StringFilter<"PenaltyCondition"> | string
    name?: StringFilter<"PenaltyCondition"> | string
    code?: StringFilter<"PenaltyCondition"> | string
    description?: StringNullableFilter<"PenaltyCondition"> | string | null
    penaltyPoints?: IntFilter<"PenaltyCondition"> | number
    condition?: JsonFilter<"PenaltyCondition">
    displayOrder?: IntFilter<"PenaltyCondition"> | number
    scoreConfig?: XOR<ScoreConfigScalarRelationFilter, ScoreConfigWhereInput>
  }, "id" | "scoreConfigId_code">

  export type PenaltyConditionOrderByWithAggregationInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    penaltyPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
    _count?: PenaltyConditionCountOrderByAggregateInput
    _avg?: PenaltyConditionAvgOrderByAggregateInput
    _max?: PenaltyConditionMaxOrderByAggregateInput
    _min?: PenaltyConditionMinOrderByAggregateInput
    _sum?: PenaltyConditionSumOrderByAggregateInput
  }

  export type PenaltyConditionScalarWhereWithAggregatesInput = {
    AND?: PenaltyConditionScalarWhereWithAggregatesInput | PenaltyConditionScalarWhereWithAggregatesInput[]
    OR?: PenaltyConditionScalarWhereWithAggregatesInput[]
    NOT?: PenaltyConditionScalarWhereWithAggregatesInput | PenaltyConditionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PenaltyCondition"> | string
    scoreConfigId?: StringWithAggregatesFilter<"PenaltyCondition"> | string
    name?: StringWithAggregatesFilter<"PenaltyCondition"> | string
    code?: StringWithAggregatesFilter<"PenaltyCondition"> | string
    description?: StringNullableWithAggregatesFilter<"PenaltyCondition"> | string | null
    penaltyPoints?: IntWithAggregatesFilter<"PenaltyCondition"> | number
    condition?: JsonWithAggregatesFilter<"PenaltyCondition">
    displayOrder?: IntWithAggregatesFilter<"PenaltyCondition"> | number
  }

  export type MatchScoreWhereInput = {
    AND?: MatchScoreWhereInput | MatchScoreWhereInput[]
    OR?: MatchScoreWhereInput[]
    NOT?: MatchScoreWhereInput | MatchScoreWhereInput[]
    id?: StringFilter<"MatchScore"> | string
    matchId?: StringFilter<"MatchScore"> | string
    allianceId?: StringFilter<"MatchScore"> | string
    scoreElementId?: StringFilter<"MatchScore"> | string
    units?: IntFilter<"MatchScore"> | number
    totalPoints?: IntFilter<"MatchScore"> | number
    createdAt?: DateTimeFilter<"MatchScore"> | Date | string
    updatedAt?: DateTimeFilter<"MatchScore"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    alliance?: XOR<AllianceScalarRelationFilter, AllianceWhereInput>
    scoreElement?: XOR<ScoreElementScalarRelationFilter, ScoreElementWhereInput>
  }

  export type MatchScoreOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    allianceId?: SortOrder
    scoreElementId?: SortOrder
    units?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    alliance?: AllianceOrderByWithRelationInput
    scoreElement?: ScoreElementOrderByWithRelationInput
  }

  export type MatchScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    matchId_allianceId_scoreElementId?: MatchScoreMatchIdAllianceIdScoreElementIdCompoundUniqueInput
    AND?: MatchScoreWhereInput | MatchScoreWhereInput[]
    OR?: MatchScoreWhereInput[]
    NOT?: MatchScoreWhereInput | MatchScoreWhereInput[]
    matchId?: StringFilter<"MatchScore"> | string
    allianceId?: StringFilter<"MatchScore"> | string
    scoreElementId?: StringFilter<"MatchScore"> | string
    units?: IntFilter<"MatchScore"> | number
    totalPoints?: IntFilter<"MatchScore"> | number
    createdAt?: DateTimeFilter<"MatchScore"> | Date | string
    updatedAt?: DateTimeFilter<"MatchScore"> | Date | string
    match?: XOR<MatchScalarRelationFilter, MatchWhereInput>
    alliance?: XOR<AllianceScalarRelationFilter, AllianceWhereInput>
    scoreElement?: XOR<ScoreElementScalarRelationFilter, ScoreElementWhereInput>
  }, "id" | "matchId_allianceId_scoreElementId">

  export type MatchScoreOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    allianceId?: SortOrder
    scoreElementId?: SortOrder
    units?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchScoreCountOrderByAggregateInput
    _avg?: MatchScoreAvgOrderByAggregateInput
    _max?: MatchScoreMaxOrderByAggregateInput
    _min?: MatchScoreMinOrderByAggregateInput
    _sum?: MatchScoreSumOrderByAggregateInput
  }

  export type MatchScoreScalarWhereWithAggregatesInput = {
    AND?: MatchScoreScalarWhereWithAggregatesInput | MatchScoreScalarWhereWithAggregatesInput[]
    OR?: MatchScoreScalarWhereWithAggregatesInput[]
    NOT?: MatchScoreScalarWhereWithAggregatesInput | MatchScoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchScore"> | string
    matchId?: StringWithAggregatesFilter<"MatchScore"> | string
    allianceId?: StringWithAggregatesFilter<"MatchScore"> | string
    scoreElementId?: StringWithAggregatesFilter<"MatchScore"> | string
    units?: IntWithAggregatesFilter<"MatchScore"> | number
    totalPoints?: IntWithAggregatesFilter<"MatchScore"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MatchScore"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MatchScore"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TournamentCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    stages?: StageCreateNestedManyWithoutTournamentInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
  }

  export type TournamentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
  }

  export type TournamentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
  }

  export type StageCreateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutStagesInput
    matches?: MatchCreateNestedManyWithoutStageInput
    teamStats?: TeamStatsCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    tournamentId: string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutStageInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutStagesNestedInput
    matches?: MatchUpdateManyWithoutStageNestedInput
    teamStats?: TeamStatsUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutStageNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutStageNestedInput
  }

  export type StageCreateManyInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    tournamentId: string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeCreateInput = {
    id?: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutRefereesInput
    user: UserCreateNestedOneWithoutMatchRefereesInput
  }

  export type MatchRefereeUncheckedCreateInput = {
    id?: string
    matchId: string
    userId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchRefereeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutRefereesNestedInput
    user?: UserUpdateOneRequiredWithoutMatchRefereesNestedInput
  }

  export type MatchRefereeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeCreateManyInput = {
    id?: string
    matchId: string
    userId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchRefereeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllianceCreateInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutAlliancesInput
    teamAlliances?: TeamAllianceCreateNestedManyWithoutAllianceInput
    matchScores?: MatchScoreCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUncheckedCreateInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    matchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutAllianceInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
    teamAlliances?: TeamAllianceUpdateManyWithoutAllianceNestedInput
    matchScores?: MatchScoreUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutAllianceNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceCreateManyInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    matchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllianceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllianceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament?: TournamentCreateNestedOneWithoutTeamsInput
    teamAlliances?: TeamAllianceCreateNestedManyWithoutTeamInput
    teamStats?: TeamStatsCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutTeamInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneWithoutTeamsNestedInput
    teamAlliances?: TeamAllianceUpdateManyWithoutTeamNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutTeamNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceCreateInput = {
    id?: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamAlliancesInput
    alliance: AllianceCreateNestedOneWithoutTeamAlliancesInput
  }

  export type TeamAllianceUncheckedCreateInput = {
    id?: string
    teamId: string
    allianceId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamAlliancesNestedInput
    alliance?: AllianceUpdateOneRequiredWithoutTeamAlliancesNestedInput
  }

  export type TeamAllianceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceCreateManyInput = {
    id?: string
    teamId: string
    allianceId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsCreateInput = {
    id?: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamStatsInput
    tournament: TournamentCreateNestedOneWithoutTeamStatsInput
    stage?: StageCreateNestedOneWithoutTeamStatsInput
  }

  export type TeamStatsUncheckedCreateInput = {
    id?: string
    teamId: string
    tournamentId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamStatsNestedInput
    tournament?: TournamentUpdateOneRequiredWithoutTeamStatsNestedInput
    stage?: StageUpdateOneWithoutTeamStatsNestedInput
  }

  export type TeamStatsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsCreateManyInput = {
    id?: string
    teamId: string
    tournamentId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldCreateInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutFieldsInput
    matches?: MatchCreateNestedManyWithoutFieldInput
    fieldDisplay?: FieldDisplayCreateNestedOneWithoutFieldInput
  }

  export type FieldUncheckedCreateInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    tournamentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutFieldInput
    fieldDisplay?: FieldDisplayUncheckedCreateNestedOneWithoutFieldInput
  }

  export type FieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutFieldsNestedInput
    matches?: MatchUpdateManyWithoutFieldNestedInput
    fieldDisplay?: FieldDisplayUpdateOneWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutFieldNestedInput
    fieldDisplay?: FieldDisplayUncheckedUpdateOneWithoutFieldNestedInput
  }

  export type FieldCreateManyInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    tournamentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayCreateInput = {
    id?: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    field: FieldCreateNestedOneWithoutFieldDisplayInput
    currentMatch?: MatchCreateNestedOneWithoutFieldDisplaysInput
    lastUpdatedUser?: UserCreateNestedOneWithoutFieldDisplaysInput
  }

  export type FieldDisplayUncheckedCreateInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    currentMatchId?: string | null
    customMessage?: string | null
    lastUpdatedBy?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    field?: FieldUpdateOneRequiredWithoutFieldDisplayNestedInput
    currentMatch?: MatchUpdateOneWithoutFieldDisplaysNestedInput
    lastUpdatedUser?: UserUpdateOneWithoutFieldDisplaysNestedInput
  }

  export type FieldDisplayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    currentMatchId?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayCreateManyInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    currentMatchId?: string | null
    customMessage?: string | null
    lastUpdatedBy?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    currentMatchId?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreConfigCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutScoreConfigsInput
    scoreElements?: ScoreElementCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUncheckedCreateInput = {
    id?: string
    tournamentId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreElements?: ScoreElementUncheckedCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionUncheckedCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionUncheckedCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutScoreConfigsNestedInput
    scoreElements?: ScoreElementUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreElements?: ScoreElementUncheckedUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigCreateManyInput = {
    id?: string
    tournamentId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreElementCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
    scoreConfig: ScoreConfigCreateNestedOneWithoutScoreElementsInput
    matchScores?: MatchScoreCreateNestedManyWithoutScoreElementInput
  }

  export type ScoreElementUncheckedCreateInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutScoreElementInput
  }

  export type ScoreElementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    scoreConfig?: ScoreConfigUpdateOneRequiredWithoutScoreElementsNestedInput
    matchScores?: MatchScoreUpdateManyWithoutScoreElementNestedInput
  }

  export type ScoreElementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    matchScores?: MatchScoreUncheckedUpdateManyWithoutScoreElementNestedInput
  }

  export type ScoreElementCreateManyInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
  }

  export type ScoreElementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScoreElementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BonusConditionCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
    scoreConfig: ScoreConfigCreateNestedOneWithoutBonusConditionsInput
  }

  export type BonusConditionUncheckedCreateInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type BonusConditionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
    scoreConfig?: ScoreConfigUpdateOneRequiredWithoutBonusConditionsNestedInput
  }

  export type BonusConditionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BonusConditionCreateManyInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type BonusConditionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BonusConditionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
    scoreConfig: ScoreConfigCreateNestedOneWithoutPenaltyConditionsInput
  }

  export type PenaltyConditionUncheckedCreateInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type PenaltyConditionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
    scoreConfig?: ScoreConfigUpdateOneRequiredWithoutPenaltyConditionsNestedInput
  }

  export type PenaltyConditionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionCreateManyInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type PenaltyConditionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type MatchScoreCreateInput = {
    id?: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutMatchScoresInput
    alliance: AllianceCreateNestedOneWithoutMatchScoresInput
    scoreElement: ScoreElementCreateNestedOneWithoutMatchScoresInput
  }

  export type MatchScoreUncheckedCreateInput = {
    id?: string
    matchId: string
    allianceId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutMatchScoresNestedInput
    alliance?: AllianceUpdateOneRequiredWithoutMatchScoresNestedInput
    scoreElement?: ScoreElementUpdateOneRequiredWithoutMatchScoresNestedInput
  }

  export type MatchScoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreCreateManyInput = {
    id?: string
    matchId: string
    allianceId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TournamentListRelationFilter = {
    every?: TournamentWhereInput
    some?: TournamentWhereInput
    none?: TournamentWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type MatchRefereeListRelationFilter = {
    every?: MatchRefereeWhereInput
    some?: MatchRefereeWhereInput
    none?: MatchRefereeWhereInput
  }

  export type FieldDisplayListRelationFilter = {
    every?: FieldDisplayWhereInput
    some?: FieldDisplayWhereInput
    none?: FieldDisplayWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchRefereeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FieldDisplayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    DateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    DateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    DateOfBirth?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StageListRelationFilter = {
    every?: StageWhereInput
    some?: StageWhereInput
    none?: StageWhereInput
  }

  export type TeamListRelationFilter = {
    every?: TeamWhereInput
    some?: TeamWhereInput
    none?: TeamWhereInput
  }

  export type TeamStatsListRelationFilter = {
    every?: TeamStatsWhereInput
    some?: TeamStatsWhereInput
    none?: TeamStatsWhereInput
  }

  export type FieldListRelationFilter = {
    every?: FieldWhereInput
    some?: FieldWhereInput
    none?: FieldWhereInput
  }

  export type ScoreConfigListRelationFilter = {
    every?: ScoreConfigWhereInput
    some?: ScoreConfigWhereInput
    none?: ScoreConfigWhereInput
  }

  export type StageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TournamentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    numberOfFields?: SortOrder
  }

  export type TournamentAvgOrderByAggregateInput = {
    numberOfFields?: SortOrder
  }

  export type TournamentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    numberOfFields?: SortOrder
  }

  export type TournamentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminId?: SortOrder
    numberOfFields?: SortOrder
  }

  export type TournamentSumOrderByAggregateInput = {
    numberOfFields?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type TournamentScalarRelationFilter = {
    is?: TournamentWhereInput
    isNot?: TournamentWhereInput
  }

  export type StageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    tournamentId?: SortOrder
    teamsPerAlliance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageAvgOrderByAggregateInput = {
    teamsPerAlliance?: SortOrder
  }

  export type StageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    tournamentId?: SortOrder
    teamsPerAlliance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    tournamentId?: SortOrder
    teamsPerAlliance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StageSumOrderByAggregateInput = {
    teamsPerAlliance?: SortOrder
  }

  export type EnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type EnumAllianceColorNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAllianceColorNullableFilter<$PrismaModel> | $Enums.AllianceColor | null
  }

  export type EnumMatchRoundTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchRoundType | EnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel> | $Enums.MatchRoundType | null
  }

  export type EnumMatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeFilter<$PrismaModel> | $Enums.MatchType
  }

  export type StageScalarRelationFilter = {
    is?: StageWhereInput
    isNot?: StageWhereInput
  }

  export type AllianceListRelationFilter = {
    every?: AllianceWhereInput
    some?: AllianceWhereInput
    none?: AllianceWhereInput
  }

  export type FieldNullableScalarRelationFilter = {
    is?: FieldWhereInput | null
    isNot?: FieldWhereInput | null
  }

  export type MatchScoreListRelationFilter = {
    every?: MatchScoreWhereInput
    some?: MatchScoreWhereInput
    none?: MatchScoreWhereInput
  }

  export type AllianceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    matchNumber?: SortOrder
    roundNumber?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    scheduledTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    winningAlliance?: SortOrder
    stageId?: SortOrder
    scoredById?: SortOrder
    roundType?: SortOrder
    scheduleId?: SortOrder
    fieldId?: SortOrder
    matchType?: SortOrder
    matchDuration?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    matchNumber?: SortOrder
    roundNumber?: SortOrder
    duration?: SortOrder
    matchDuration?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    matchNumber?: SortOrder
    roundNumber?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    scheduledTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    winningAlliance?: SortOrder
    stageId?: SortOrder
    scoredById?: SortOrder
    roundType?: SortOrder
    scheduleId?: SortOrder
    fieldId?: SortOrder
    matchType?: SortOrder
    matchDuration?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    matchNumber?: SortOrder
    roundNumber?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    scheduledTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    winningAlliance?: SortOrder
    stageId?: SortOrder
    scoredById?: SortOrder
    roundType?: SortOrder
    scheduleId?: SortOrder
    fieldId?: SortOrder
    matchType?: SortOrder
    matchDuration?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    matchNumber?: SortOrder
    roundNumber?: SortOrder
    duration?: SortOrder
    matchDuration?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type EnumAllianceColorNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAllianceColorNullableWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorNullableFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorNullableFilter<$PrismaModel>
  }

  export type EnumMatchRoundTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchRoundType | EnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMatchRoundTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.MatchRoundType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel>
  }

  export type EnumMatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.MatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchTypeFilter<$PrismaModel>
    _max?: NestedEnumMatchTypeFilter<$PrismaModel>
  }

  export type MatchScalarRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type MatchRefereeMatchIdUserIdCompoundUniqueInput = {
    matchId: string
    userId: string
  }

  export type MatchRefereeCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchRefereeMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchRefereeMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAllianceColorFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    not?: NestedEnumAllianceColorFilter<$PrismaModel> | $Enums.AllianceColor
  }

  export type TeamAllianceListRelationFilter = {
    every?: TeamAllianceWhereInput
    some?: TeamAllianceWhereInput
    none?: TeamAllianceWhereInput
  }

  export type TeamAllianceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AllianceCountOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
    matchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AllianceAvgOrderByAggregateInput = {
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
  }

  export type AllianceMaxOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
    matchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AllianceMinOrderByAggregateInput = {
    id?: SortOrder
    color?: SortOrder
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
    matchId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AllianceSumOrderByAggregateInput = {
    score?: SortOrder
    autoScore?: SortOrder
    driveScore?: SortOrder
  }

  export type EnumAllianceColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    not?: NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TournamentNullableScalarRelationFilter = {
    is?: TournamentWhereInput | null
    isNot?: TournamentWhereInput | null
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    teamNumber?: SortOrder
    name?: SortOrder
    organization?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    teamLead?: SortOrder
    teamLeadId?: SortOrder
    teamMembers?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    teamNumber?: SortOrder
    name?: SortOrder
    organization?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    teamLead?: SortOrder
    teamLeadId?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    teamNumber?: SortOrder
    name?: SortOrder
    organization?: SortOrder
    avatar?: SortOrder
    description?: SortOrder
    teamLead?: SortOrder
    teamLeadId?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type AllianceScalarRelationFilter = {
    is?: AllianceWhereInput
    isNot?: AllianceWhereInput
  }

  export type TeamAllianceTeamIdAllianceIdCompoundUniqueInput = {
    teamId: string
    allianceId: string
  }

  export type TeamAllianceCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    allianceId?: SortOrder
    stationPosition?: SortOrder
    isSurrogate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAllianceAvgOrderByAggregateInput = {
    stationPosition?: SortOrder
  }

  export type TeamAllianceMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    allianceId?: SortOrder
    stationPosition?: SortOrder
    isSurrogate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAllianceMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    allianceId?: SortOrder
    stationPosition?: SortOrder
    isSurrogate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAllianceSumOrderByAggregateInput = {
    stationPosition?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StageNullableScalarRelationFilter = {
    is?: StageWhereInput | null
    isNot?: StageWhereInput | null
  }

  export type TeamStatsTeamIdTournamentIdCompoundUniqueInput = {
    teamId: string
    tournamentId: string
  }

  export type TeamStatsCountOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tournamentId?: SortOrder
    stageId?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamStatsAvgOrderByAggregateInput = {
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
  }

  export type TeamStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tournamentId?: SortOrder
    stageId?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamStatsMinOrderByAggregateInput = {
    id?: SortOrder
    teamId?: SortOrder
    tournamentId?: SortOrder
    stageId?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamStatsSumOrderByAggregateInput = {
    wins?: SortOrder
    losses?: SortOrder
    ties?: SortOrder
    pointsScored?: SortOrder
    pointsConceded?: SortOrder
    matchesPlayed?: SortOrder
    rankingPoints?: SortOrder
    opponentWinPercentage?: SortOrder
    pointDifferential?: SortOrder
    rank?: SortOrder
    tiebreaker1?: SortOrder
    tiebreaker2?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FieldDisplayNullableScalarRelationFilter = {
    is?: FieldDisplayWhereInput | null
    isNot?: FieldDisplayWhereInput | null
  }

  export type FieldTournamentIdNumberCompoundUniqueInput = {
    tournamentId: string
    number: number
  }

  export type FieldCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    location?: SortOrder
    description?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type FieldMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    location?: SortOrder
    description?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    number?: SortOrder
    location?: SortOrder
    description?: SortOrder
    tournamentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type EnumDisplayStateFilter<$PrismaModel = never> = {
    equals?: $Enums.DisplayState | EnumDisplayStateFieldRefInput<$PrismaModel>
    in?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    not?: NestedEnumDisplayStateFilter<$PrismaModel> | $Enums.DisplayState
  }

  export type FieldScalarRelationFilter = {
    is?: FieldWhereInput
    isNot?: FieldWhereInput
  }

  export type MatchNullableScalarRelationFilter = {
    is?: MatchWhereInput | null
    isNot?: MatchWhereInput | null
  }

  export type FieldDisplayCountOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    displayState?: SortOrder
    currentMatchId?: SortOrder
    customMessage?: SortOrder
    lastUpdatedBy?: SortOrder
    autoAdvance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldDisplayMaxOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    displayState?: SortOrder
    currentMatchId?: SortOrder
    customMessage?: SortOrder
    lastUpdatedBy?: SortOrder
    autoAdvance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FieldDisplayMinOrderByAggregateInput = {
    id?: SortOrder
    fieldId?: SortOrder
    displayState?: SortOrder
    currentMatchId?: SortOrder
    customMessage?: SortOrder
    lastUpdatedBy?: SortOrder
    autoAdvance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDisplayStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DisplayState | EnumDisplayStateFieldRefInput<$PrismaModel>
    in?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    not?: NestedEnumDisplayStateWithAggregatesFilter<$PrismaModel> | $Enums.DisplayState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisplayStateFilter<$PrismaModel>
    _max?: NestedEnumDisplayStateFilter<$PrismaModel>
  }

  export type ScoreElementListRelationFilter = {
    every?: ScoreElementWhereInput
    some?: ScoreElementWhereInput
    none?: ScoreElementWhereInput
  }

  export type BonusConditionListRelationFilter = {
    every?: BonusConditionWhereInput
    some?: BonusConditionWhereInput
    none?: BonusConditionWhereInput
  }

  export type PenaltyConditionListRelationFilter = {
    every?: PenaltyConditionWhereInput
    some?: PenaltyConditionWhereInput
    none?: PenaltyConditionWhereInput
  }

  export type ScoreElementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BonusConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PenaltyConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreConfigCountOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScoreConfigMinOrderByAggregateInput = {
    id?: SortOrder
    tournamentId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumElementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementType | EnumElementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementTypeFilter<$PrismaModel> | $Enums.ElementType
  }

  export type ScoreConfigScalarRelationFilter = {
    is?: ScoreConfigWhereInput
    isNot?: ScoreConfigWhereInput
  }

  export type ScoreElementScoreConfigIdCodeCompoundUniqueInput = {
    scoreConfigId: string
    code: string
  }

  export type ScoreElementCountOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    pointsPerUnit?: SortOrder
    category?: SortOrder
    elementType?: SortOrder
    displayOrder?: SortOrder
    icon?: SortOrder
    color?: SortOrder
  }

  export type ScoreElementAvgOrderByAggregateInput = {
    pointsPerUnit?: SortOrder
    displayOrder?: SortOrder
  }

  export type ScoreElementMaxOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    pointsPerUnit?: SortOrder
    category?: SortOrder
    elementType?: SortOrder
    displayOrder?: SortOrder
    icon?: SortOrder
    color?: SortOrder
  }

  export type ScoreElementMinOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    pointsPerUnit?: SortOrder
    category?: SortOrder
    elementType?: SortOrder
    displayOrder?: SortOrder
    icon?: SortOrder
    color?: SortOrder
  }

  export type ScoreElementSumOrderByAggregateInput = {
    pointsPerUnit?: SortOrder
    displayOrder?: SortOrder
  }

  export type EnumElementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementType | EnumElementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementTypeWithAggregatesFilter<$PrismaModel> | $Enums.ElementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElementTypeFilter<$PrismaModel>
    _max?: NestedEnumElementTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BonusConditionScoreConfigIdCodeCompoundUniqueInput = {
    scoreConfigId: string
    code: string
  }

  export type BonusConditionCountOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    bonusPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
  }

  export type BonusConditionAvgOrderByAggregateInput = {
    bonusPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type BonusConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    bonusPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type BonusConditionMinOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    bonusPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type BonusConditionSumOrderByAggregateInput = {
    bonusPoints?: SortOrder
    displayOrder?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type PenaltyConditionScoreConfigIdCodeCompoundUniqueInput = {
    scoreConfigId: string
    code: string
  }

  export type PenaltyConditionCountOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    penaltyPoints?: SortOrder
    condition?: SortOrder
    displayOrder?: SortOrder
  }

  export type PenaltyConditionAvgOrderByAggregateInput = {
    penaltyPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type PenaltyConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    penaltyPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type PenaltyConditionMinOrderByAggregateInput = {
    id?: SortOrder
    scoreConfigId?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    penaltyPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type PenaltyConditionSumOrderByAggregateInput = {
    penaltyPoints?: SortOrder
    displayOrder?: SortOrder
  }

  export type ScoreElementScalarRelationFilter = {
    is?: ScoreElementWhereInput
    isNot?: ScoreElementWhereInput
  }

  export type MatchScoreMatchIdAllianceIdScoreElementIdCompoundUniqueInput = {
    matchId: string
    allianceId: string
    scoreElementId: string
  }

  export type MatchScoreCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    allianceId?: SortOrder
    scoreElementId?: SortOrder
    units?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchScoreAvgOrderByAggregateInput = {
    units?: SortOrder
    totalPoints?: SortOrder
  }

  export type MatchScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    allianceId?: SortOrder
    scoreElementId?: SortOrder
    units?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchScoreMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    allianceId?: SortOrder
    scoreElementId?: SortOrder
    units?: SortOrder
    totalPoints?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchScoreSumOrderByAggregateInput = {
    units?: SortOrder
    totalPoints?: SortOrder
  }

  export type UserCreateNestedOneWithoutCreatedUsersInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TournamentCreateNestedManyWithoutAdminInput = {
    create?: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput> | TournamentCreateWithoutAdminInput[] | TournamentUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutAdminInput | TournamentCreateOrConnectWithoutAdminInput[]
    createMany?: TournamentCreateManyAdminInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutScoredByInput = {
    create?: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput> | MatchCreateWithoutScoredByInput[] | MatchUncheckedCreateWithoutScoredByInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutScoredByInput | MatchCreateOrConnectWithoutScoredByInput[]
    createMany?: MatchCreateManyScoredByInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchRefereeCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput> | MatchRefereeCreateWithoutUserInput[] | MatchRefereeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutUserInput | MatchRefereeCreateOrConnectWithoutUserInput[]
    createMany?: MatchRefereeCreateManyUserInputEnvelope
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
  }

  export type FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput = {
    create?: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput> | FieldDisplayCreateWithoutLastUpdatedUserInput[] | FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput | FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput[]
    createMany?: FieldDisplayCreateManyLastUpdatedUserInputEnvelope
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TournamentUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput> | TournamentCreateWithoutAdminInput[] | TournamentUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutAdminInput | TournamentCreateOrConnectWithoutAdminInput[]
    createMany?: TournamentCreateManyAdminInputEnvelope
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutScoredByInput = {
    create?: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput> | MatchCreateWithoutScoredByInput[] | MatchUncheckedCreateWithoutScoredByInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutScoredByInput | MatchCreateOrConnectWithoutScoredByInput[]
    createMany?: MatchCreateManyScoredByInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchRefereeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput> | MatchRefereeCreateWithoutUserInput[] | MatchRefereeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutUserInput | MatchRefereeCreateOrConnectWithoutUserInput[]
    createMany?: MatchRefereeCreateManyUserInputEnvelope
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
  }

  export type FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput = {
    create?: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput> | FieldDisplayCreateWithoutLastUpdatedUserInput[] | FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput | FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput[]
    createMany?: FieldDisplayCreateManyLastUpdatedUserInputEnvelope
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutCreatedUsersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    upsert?: UserUpsertWithoutCreatedUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedUsersInput, UserUpdateWithoutCreatedUsersInput>, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TournamentUpdateManyWithoutAdminNestedInput = {
    create?: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput> | TournamentCreateWithoutAdminInput[] | TournamentUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutAdminInput | TournamentCreateOrConnectWithoutAdminInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutAdminInput | TournamentUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: TournamentCreateManyAdminInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutAdminInput | TournamentUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutAdminInput | TournamentUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutScoredByNestedInput = {
    create?: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput> | MatchCreateWithoutScoredByInput[] | MatchUncheckedCreateWithoutScoredByInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutScoredByInput | MatchCreateOrConnectWithoutScoredByInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutScoredByInput | MatchUpsertWithWhereUniqueWithoutScoredByInput[]
    createMany?: MatchCreateManyScoredByInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutScoredByInput | MatchUpdateWithWhereUniqueWithoutScoredByInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutScoredByInput | MatchUpdateManyWithWhereWithoutScoredByInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchRefereeUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput> | MatchRefereeCreateWithoutUserInput[] | MatchRefereeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutUserInput | MatchRefereeCreateOrConnectWithoutUserInput[]
    upsert?: MatchRefereeUpsertWithWhereUniqueWithoutUserInput | MatchRefereeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchRefereeCreateManyUserInputEnvelope
    set?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    disconnect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    delete?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    update?: MatchRefereeUpdateWithWhereUniqueWithoutUserInput | MatchRefereeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchRefereeUpdateManyWithWhereWithoutUserInput | MatchRefereeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
  }

  export type FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput> | FieldDisplayCreateWithoutLastUpdatedUserInput[] | FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput | FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput[]
    upsert?: FieldDisplayUpsertWithWhereUniqueWithoutLastUpdatedUserInput | FieldDisplayUpsertWithWhereUniqueWithoutLastUpdatedUserInput[]
    createMany?: FieldDisplayCreateManyLastUpdatedUserInputEnvelope
    set?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    disconnect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    delete?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    update?: FieldDisplayUpdateWithWhereUniqueWithoutLastUpdatedUserInput | FieldDisplayUpdateWithWhereUniqueWithoutLastUpdatedUserInput[]
    updateMany?: FieldDisplayUpdateManyWithWhereWithoutLastUpdatedUserInput | FieldDisplayUpdateManyWithWhereWithoutLastUpdatedUserInput[]
    deleteMany?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TournamentUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput> | TournamentCreateWithoutAdminInput[] | TournamentUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: TournamentCreateOrConnectWithoutAdminInput | TournamentCreateOrConnectWithoutAdminInput[]
    upsert?: TournamentUpsertWithWhereUniqueWithoutAdminInput | TournamentUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: TournamentCreateManyAdminInputEnvelope
    set?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    disconnect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    delete?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    connect?: TournamentWhereUniqueInput | TournamentWhereUniqueInput[]
    update?: TournamentUpdateWithWhereUniqueWithoutAdminInput | TournamentUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: TournamentUpdateManyWithWhereWithoutAdminInput | TournamentUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutScoredByNestedInput = {
    create?: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput> | MatchCreateWithoutScoredByInput[] | MatchUncheckedCreateWithoutScoredByInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutScoredByInput | MatchCreateOrConnectWithoutScoredByInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutScoredByInput | MatchUpsertWithWhereUniqueWithoutScoredByInput[]
    createMany?: MatchCreateManyScoredByInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutScoredByInput | MatchUpdateWithWhereUniqueWithoutScoredByInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutScoredByInput | MatchUpdateManyWithWhereWithoutScoredByInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchRefereeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput> | MatchRefereeCreateWithoutUserInput[] | MatchRefereeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutUserInput | MatchRefereeCreateOrConnectWithoutUserInput[]
    upsert?: MatchRefereeUpsertWithWhereUniqueWithoutUserInput | MatchRefereeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchRefereeCreateManyUserInputEnvelope
    set?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    disconnect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    delete?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    update?: MatchRefereeUpdateWithWhereUniqueWithoutUserInput | MatchRefereeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchRefereeUpdateManyWithWhereWithoutUserInput | MatchRefereeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
  }

  export type FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput> | FieldDisplayCreateWithoutLastUpdatedUserInput[] | FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput | FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput[]
    upsert?: FieldDisplayUpsertWithWhereUniqueWithoutLastUpdatedUserInput | FieldDisplayUpsertWithWhereUniqueWithoutLastUpdatedUserInput[]
    createMany?: FieldDisplayCreateManyLastUpdatedUserInputEnvelope
    set?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    disconnect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    delete?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    update?: FieldDisplayUpdateWithWhereUniqueWithoutLastUpdatedUserInput | FieldDisplayUpdateWithWhereUniqueWithoutLastUpdatedUserInput[]
    updateMany?: FieldDisplayUpdateManyWithWhereWithoutLastUpdatedUserInput | FieldDisplayUpdateManyWithWhereWithoutLastUpdatedUserInput[]
    deleteMany?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTournamentsInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput
    connect?: UserWhereUniqueInput
  }

  export type StageCreateNestedManyWithoutTournamentInput = {
    create?: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput> | StageCreateWithoutTournamentInput[] | StageUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTournamentInput | StageCreateOrConnectWithoutTournamentInput[]
    createMany?: StageCreateManyTournamentInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type TeamCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput> | TeamCreateWithoutTournamentInput[] | TeamUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutTournamentInput | TeamCreateOrConnectWithoutTournamentInput[]
    createMany?: TeamCreateManyTournamentInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TeamStatsCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput> | TeamStatsCreateWithoutTournamentInput[] | TeamStatsUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTournamentInput | TeamStatsCreateOrConnectWithoutTournamentInput[]
    createMany?: TeamStatsCreateManyTournamentInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type FieldCreateNestedManyWithoutTournamentInput = {
    create?: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput> | FieldCreateWithoutTournamentInput[] | FieldUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTournamentInput | FieldCreateOrConnectWithoutTournamentInput[]
    createMany?: FieldCreateManyTournamentInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type ScoreConfigCreateNestedManyWithoutTournamentInput = {
    create?: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput> | ScoreConfigCreateWithoutTournamentInput[] | ScoreConfigUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutTournamentInput | ScoreConfigCreateOrConnectWithoutTournamentInput[]
    createMany?: ScoreConfigCreateManyTournamentInputEnvelope
    connect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput> | StageCreateWithoutTournamentInput[] | StageUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTournamentInput | StageCreateOrConnectWithoutTournamentInput[]
    createMany?: StageCreateManyTournamentInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type TeamUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput> | TeamCreateWithoutTournamentInput[] | TeamUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutTournamentInput | TeamCreateOrConnectWithoutTournamentInput[]
    createMany?: TeamCreateManyTournamentInputEnvelope
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
  }

  export type TeamStatsUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput> | TeamStatsCreateWithoutTournamentInput[] | TeamStatsUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTournamentInput | TeamStatsCreateOrConnectWithoutTournamentInput[]
    createMany?: TeamStatsCreateManyTournamentInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type FieldUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput> | FieldCreateWithoutTournamentInput[] | FieldUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTournamentInput | FieldCreateOrConnectWithoutTournamentInput[]
    createMany?: FieldCreateManyTournamentInputEnvelope
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
  }

  export type ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput = {
    create?: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput> | ScoreConfigCreateWithoutTournamentInput[] | ScoreConfigUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutTournamentInput | ScoreConfigCreateOrConnectWithoutTournamentInput[]
    createMany?: ScoreConfigCreateManyTournamentInputEnvelope
    connect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutTournamentsNestedInput = {
    create?: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTournamentsInput
    upsert?: UserUpsertWithoutTournamentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTournamentsInput, UserUpdateWithoutTournamentsInput>, UserUncheckedUpdateWithoutTournamentsInput>
  }

  export type StageUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput> | StageCreateWithoutTournamentInput[] | StageUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTournamentInput | StageCreateOrConnectWithoutTournamentInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTournamentInput | StageUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: StageCreateManyTournamentInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTournamentInput | StageUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTournamentInput | StageUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type TeamUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput> | TeamCreateWithoutTournamentInput[] | TeamUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutTournamentInput | TeamCreateOrConnectWithoutTournamentInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutTournamentInput | TeamUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TeamCreateManyTournamentInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutTournamentInput | TeamUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutTournamentInput | TeamUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TeamStatsUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput> | TeamStatsCreateWithoutTournamentInput[] | TeamStatsUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTournamentInput | TeamStatsCreateOrConnectWithoutTournamentInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutTournamentInput | TeamStatsUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TeamStatsCreateManyTournamentInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutTournamentInput | TeamStatsUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutTournamentInput | TeamStatsUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type FieldUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput> | FieldCreateWithoutTournamentInput[] | FieldUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTournamentInput | FieldCreateOrConnectWithoutTournamentInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutTournamentInput | FieldUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: FieldCreateManyTournamentInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutTournamentInput | FieldUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutTournamentInput | FieldUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type ScoreConfigUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput> | ScoreConfigCreateWithoutTournamentInput[] | ScoreConfigUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutTournamentInput | ScoreConfigCreateOrConnectWithoutTournamentInput[]
    upsert?: ScoreConfigUpsertWithWhereUniqueWithoutTournamentInput | ScoreConfigUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: ScoreConfigCreateManyTournamentInputEnvelope
    set?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    disconnect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    delete?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    connect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    update?: ScoreConfigUpdateWithWhereUniqueWithoutTournamentInput | ScoreConfigUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: ScoreConfigUpdateManyWithWhereWithoutTournamentInput | ScoreConfigUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: ScoreConfigScalarWhereInput | ScoreConfigScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput> | StageCreateWithoutTournamentInput[] | StageUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTournamentInput | StageCreateOrConnectWithoutTournamentInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTournamentInput | StageUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: StageCreateManyTournamentInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTournamentInput | StageUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTournamentInput | StageUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type TeamUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput> | TeamCreateWithoutTournamentInput[] | TeamUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamCreateOrConnectWithoutTournamentInput | TeamCreateOrConnectWithoutTournamentInput[]
    upsert?: TeamUpsertWithWhereUniqueWithoutTournamentInput | TeamUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TeamCreateManyTournamentInputEnvelope
    set?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    disconnect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    delete?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    connect?: TeamWhereUniqueInput | TeamWhereUniqueInput[]
    update?: TeamUpdateWithWhereUniqueWithoutTournamentInput | TeamUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TeamUpdateManyWithWhereWithoutTournamentInput | TeamUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TeamScalarWhereInput | TeamScalarWhereInput[]
  }

  export type TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput> | TeamStatsCreateWithoutTournamentInput[] | TeamStatsUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTournamentInput | TeamStatsCreateOrConnectWithoutTournamentInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutTournamentInput | TeamStatsUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: TeamStatsCreateManyTournamentInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutTournamentInput | TeamStatsUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutTournamentInput | TeamStatsUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type FieldUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput> | FieldCreateWithoutTournamentInput[] | FieldUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: FieldCreateOrConnectWithoutTournamentInput | FieldCreateOrConnectWithoutTournamentInput[]
    upsert?: FieldUpsertWithWhereUniqueWithoutTournamentInput | FieldUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: FieldCreateManyTournamentInputEnvelope
    set?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    disconnect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    delete?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    connect?: FieldWhereUniqueInput | FieldWhereUniqueInput[]
    update?: FieldUpdateWithWhereUniqueWithoutTournamentInput | FieldUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: FieldUpdateManyWithWhereWithoutTournamentInput | FieldUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: FieldScalarWhereInput | FieldScalarWhereInput[]
  }

  export type ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput = {
    create?: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput> | ScoreConfigCreateWithoutTournamentInput[] | ScoreConfigUncheckedCreateWithoutTournamentInput[]
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutTournamentInput | ScoreConfigCreateOrConnectWithoutTournamentInput[]
    upsert?: ScoreConfigUpsertWithWhereUniqueWithoutTournamentInput | ScoreConfigUpsertWithWhereUniqueWithoutTournamentInput[]
    createMany?: ScoreConfigCreateManyTournamentInputEnvelope
    set?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    disconnect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    delete?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    connect?: ScoreConfigWhereUniqueInput | ScoreConfigWhereUniqueInput[]
    update?: ScoreConfigUpdateWithWhereUniqueWithoutTournamentInput | ScoreConfigUpdateWithWhereUniqueWithoutTournamentInput[]
    updateMany?: ScoreConfigUpdateManyWithWhereWithoutTournamentInput | ScoreConfigUpdateManyWithWhereWithoutTournamentInput[]
    deleteMany?: ScoreConfigScalarWhereInput | ScoreConfigScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutStagesInput = {
    create?: XOR<TournamentCreateWithoutStagesInput, TournamentUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutStagesInput
    connect?: TournamentWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutStageInput = {
    create?: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput> | MatchCreateWithoutStageInput[] | MatchUncheckedCreateWithoutStageInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutStageInput | MatchCreateOrConnectWithoutStageInput[]
    createMany?: MatchCreateManyStageInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TeamStatsCreateNestedManyWithoutStageInput = {
    create?: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput> | TeamStatsCreateWithoutStageInput[] | TeamStatsUncheckedCreateWithoutStageInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutStageInput | TeamStatsCreateOrConnectWithoutStageInput[]
    createMany?: TeamStatsCreateManyStageInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutStageInput = {
    create?: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput> | MatchCreateWithoutStageInput[] | MatchUncheckedCreateWithoutStageInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutStageInput | MatchCreateOrConnectWithoutStageInput[]
    createMany?: MatchCreateManyStageInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type TeamStatsUncheckedCreateNestedManyWithoutStageInput = {
    create?: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput> | TeamStatsCreateWithoutStageInput[] | TeamStatsUncheckedCreateWithoutStageInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutStageInput | TeamStatsCreateOrConnectWithoutStageInput[]
    createMany?: TeamStatsCreateManyStageInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type EnumStageTypeFieldUpdateOperationsInput = {
    set?: $Enums.StageType
  }

  export type TournamentUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<TournamentCreateWithoutStagesInput, TournamentUncheckedCreateWithoutStagesInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutStagesInput
    upsert?: TournamentUpsertWithoutStagesInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutStagesInput, TournamentUpdateWithoutStagesInput>, TournamentUncheckedUpdateWithoutStagesInput>
  }

  export type MatchUpdateManyWithoutStageNestedInput = {
    create?: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput> | MatchCreateWithoutStageInput[] | MatchUncheckedCreateWithoutStageInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutStageInput | MatchCreateOrConnectWithoutStageInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutStageInput | MatchUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: MatchCreateManyStageInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutStageInput | MatchUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutStageInput | MatchUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TeamStatsUpdateManyWithoutStageNestedInput = {
    create?: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput> | TeamStatsCreateWithoutStageInput[] | TeamStatsUncheckedCreateWithoutStageInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutStageInput | TeamStatsCreateOrConnectWithoutStageInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutStageInput | TeamStatsUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: TeamStatsCreateManyStageInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutStageInput | TeamStatsUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutStageInput | TeamStatsUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutStageNestedInput = {
    create?: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput> | MatchCreateWithoutStageInput[] | MatchUncheckedCreateWithoutStageInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutStageInput | MatchCreateOrConnectWithoutStageInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutStageInput | MatchUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: MatchCreateManyStageInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutStageInput | MatchUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutStageInput | MatchUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type TeamStatsUncheckedUpdateManyWithoutStageNestedInput = {
    create?: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput> | TeamStatsCreateWithoutStageInput[] | TeamStatsUncheckedCreateWithoutStageInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutStageInput | TeamStatsCreateOrConnectWithoutStageInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutStageInput | TeamStatsUpsertWithWhereUniqueWithoutStageInput[]
    createMany?: TeamStatsCreateManyStageInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutStageInput | TeamStatsUpdateWithWhereUniqueWithoutStageInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutStageInput | TeamStatsUpdateManyWithWhereWithoutStageInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type StageCreateNestedOneWithoutMatchesInput = {
    create?: XOR<StageCreateWithoutMatchesInput, StageUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: StageCreateOrConnectWithoutMatchesInput
    connect?: StageWhereUniqueInput
  }

  export type AllianceCreateNestedManyWithoutMatchInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutScoredMatchesInput = {
    create?: XOR<UserCreateWithoutScoredMatchesInput, UserUncheckedCreateWithoutScoredMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoredMatchesInput
    connect?: UserWhereUniqueInput
  }

  export type MatchRefereeCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput> | MatchRefereeCreateWithoutMatchInput[] | MatchRefereeUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutMatchInput | MatchRefereeCreateOrConnectWithoutMatchInput[]
    createMany?: MatchRefereeCreateManyMatchInputEnvelope
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
  }

  export type FieldCreateNestedOneWithoutMatchesInput = {
    create?: XOR<FieldCreateWithoutMatchesInput, FieldUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: FieldCreateOrConnectWithoutMatchesInput
    connect?: FieldWhereUniqueInput
  }

  export type MatchScoreCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput> | MatchScoreCreateWithoutMatchInput[] | MatchScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutMatchInput | MatchScoreCreateOrConnectWithoutMatchInput[]
    createMany?: MatchScoreCreateManyMatchInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type FieldDisplayCreateNestedManyWithoutCurrentMatchInput = {
    create?: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput> | FieldDisplayCreateWithoutCurrentMatchInput[] | FieldDisplayUncheckedCreateWithoutCurrentMatchInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutCurrentMatchInput | FieldDisplayCreateOrConnectWithoutCurrentMatchInput[]
    createMany?: FieldDisplayCreateManyCurrentMatchInputEnvelope
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
  }

  export type AllianceUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
  }

  export type MatchRefereeUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput> | MatchRefereeCreateWithoutMatchInput[] | MatchRefereeUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutMatchInput | MatchRefereeCreateOrConnectWithoutMatchInput[]
    createMany?: MatchRefereeCreateManyMatchInputEnvelope
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
  }

  export type MatchScoreUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput> | MatchScoreCreateWithoutMatchInput[] | MatchScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutMatchInput | MatchScoreCreateOrConnectWithoutMatchInput[]
    createMany?: MatchScoreCreateManyMatchInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput = {
    create?: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput> | FieldDisplayCreateWithoutCurrentMatchInput[] | FieldDisplayUncheckedCreateWithoutCurrentMatchInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutCurrentMatchInput | FieldDisplayCreateOrConnectWithoutCurrentMatchInput[]
    createMany?: FieldDisplayCreateManyCurrentMatchInputEnvelope
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMatchStateFieldUpdateOperationsInput = {
    set?: $Enums.MatchState
  }

  export type NullableEnumAllianceColorFieldUpdateOperationsInput = {
    set?: $Enums.AllianceColor | null
  }

  export type NullableEnumMatchRoundTypeFieldUpdateOperationsInput = {
    set?: $Enums.MatchRoundType | null
  }

  export type EnumMatchTypeFieldUpdateOperationsInput = {
    set?: $Enums.MatchType
  }

  export type StageUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<StageCreateWithoutMatchesInput, StageUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: StageCreateOrConnectWithoutMatchesInput
    upsert?: StageUpsertWithoutMatchesInput
    connect?: StageWhereUniqueInput
    update?: XOR<XOR<StageUpdateToOneWithWhereWithoutMatchesInput, StageUpdateWithoutMatchesInput>, StageUncheckedUpdateWithoutMatchesInput>
  }

  export type AllianceUpdateManyWithoutMatchNestedInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutMatchInput | AllianceUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutMatchInput | AllianceUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutMatchInput | AllianceUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type UserUpdateOneWithoutScoredMatchesNestedInput = {
    create?: XOR<UserCreateWithoutScoredMatchesInput, UserUncheckedCreateWithoutScoredMatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutScoredMatchesInput
    upsert?: UserUpsertWithoutScoredMatchesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScoredMatchesInput, UserUpdateWithoutScoredMatchesInput>, UserUncheckedUpdateWithoutScoredMatchesInput>
  }

  export type MatchRefereeUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput> | MatchRefereeCreateWithoutMatchInput[] | MatchRefereeUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutMatchInput | MatchRefereeCreateOrConnectWithoutMatchInput[]
    upsert?: MatchRefereeUpsertWithWhereUniqueWithoutMatchInput | MatchRefereeUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchRefereeCreateManyMatchInputEnvelope
    set?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    disconnect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    delete?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    update?: MatchRefereeUpdateWithWhereUniqueWithoutMatchInput | MatchRefereeUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchRefereeUpdateManyWithWhereWithoutMatchInput | MatchRefereeUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
  }

  export type FieldUpdateOneWithoutMatchesNestedInput = {
    create?: XOR<FieldCreateWithoutMatchesInput, FieldUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: FieldCreateOrConnectWithoutMatchesInput
    upsert?: FieldUpsertWithoutMatchesInput
    disconnect?: FieldWhereInput | boolean
    delete?: FieldWhereInput | boolean
    connect?: FieldWhereUniqueInput
    update?: XOR<XOR<FieldUpdateToOneWithWhereWithoutMatchesInput, FieldUpdateWithoutMatchesInput>, FieldUncheckedUpdateWithoutMatchesInput>
  }

  export type MatchScoreUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput> | MatchScoreCreateWithoutMatchInput[] | MatchScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutMatchInput | MatchScoreCreateOrConnectWithoutMatchInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutMatchInput | MatchScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchScoreCreateManyMatchInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutMatchInput | MatchScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutMatchInput | MatchScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type FieldDisplayUpdateManyWithoutCurrentMatchNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput> | FieldDisplayCreateWithoutCurrentMatchInput[] | FieldDisplayUncheckedCreateWithoutCurrentMatchInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutCurrentMatchInput | FieldDisplayCreateOrConnectWithoutCurrentMatchInput[]
    upsert?: FieldDisplayUpsertWithWhereUniqueWithoutCurrentMatchInput | FieldDisplayUpsertWithWhereUniqueWithoutCurrentMatchInput[]
    createMany?: FieldDisplayCreateManyCurrentMatchInputEnvelope
    set?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    disconnect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    delete?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    update?: FieldDisplayUpdateWithWhereUniqueWithoutCurrentMatchInput | FieldDisplayUpdateWithWhereUniqueWithoutCurrentMatchInput[]
    updateMany?: FieldDisplayUpdateManyWithWhereWithoutCurrentMatchInput | FieldDisplayUpdateManyWithWhereWithoutCurrentMatchInput[]
    deleteMany?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
  }

  export type AllianceUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput> | AllianceCreateWithoutMatchInput[] | AllianceUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchInput | AllianceCreateOrConnectWithoutMatchInput[]
    upsert?: AllianceUpsertWithWhereUniqueWithoutMatchInput | AllianceUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: AllianceCreateManyMatchInputEnvelope
    set?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    disconnect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    delete?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    connect?: AllianceWhereUniqueInput | AllianceWhereUniqueInput[]
    update?: AllianceUpdateWithWhereUniqueWithoutMatchInput | AllianceUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: AllianceUpdateManyWithWhereWithoutMatchInput | AllianceUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
  }

  export type MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput> | MatchRefereeCreateWithoutMatchInput[] | MatchRefereeUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchRefereeCreateOrConnectWithoutMatchInput | MatchRefereeCreateOrConnectWithoutMatchInput[]
    upsert?: MatchRefereeUpsertWithWhereUniqueWithoutMatchInput | MatchRefereeUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchRefereeCreateManyMatchInputEnvelope
    set?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    disconnect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    delete?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    connect?: MatchRefereeWhereUniqueInput | MatchRefereeWhereUniqueInput[]
    update?: MatchRefereeUpdateWithWhereUniqueWithoutMatchInput | MatchRefereeUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchRefereeUpdateManyWithWhereWithoutMatchInput | MatchRefereeUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
  }

  export type MatchScoreUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput> | MatchScoreCreateWithoutMatchInput[] | MatchScoreUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutMatchInput | MatchScoreCreateOrConnectWithoutMatchInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutMatchInput | MatchScoreUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchScoreCreateManyMatchInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutMatchInput | MatchScoreUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutMatchInput | MatchScoreUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput> | FieldDisplayCreateWithoutCurrentMatchInput[] | FieldDisplayUncheckedCreateWithoutCurrentMatchInput[]
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutCurrentMatchInput | FieldDisplayCreateOrConnectWithoutCurrentMatchInput[]
    upsert?: FieldDisplayUpsertWithWhereUniqueWithoutCurrentMatchInput | FieldDisplayUpsertWithWhereUniqueWithoutCurrentMatchInput[]
    createMany?: FieldDisplayCreateManyCurrentMatchInputEnvelope
    set?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    disconnect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    delete?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    connect?: FieldDisplayWhereUniqueInput | FieldDisplayWhereUniqueInput[]
    update?: FieldDisplayUpdateWithWhereUniqueWithoutCurrentMatchInput | FieldDisplayUpdateWithWhereUniqueWithoutCurrentMatchInput[]
    updateMany?: FieldDisplayUpdateManyWithWhereWithoutCurrentMatchInput | FieldDisplayUpdateManyWithWhereWithoutCurrentMatchInput[]
    deleteMany?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutRefereesInput = {
    create?: XOR<MatchCreateWithoutRefereesInput, MatchUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutRefereesInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchRefereesInput = {
    create?: XOR<UserCreateWithoutMatchRefereesInput, UserUncheckedCreateWithoutMatchRefereesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchRefereesInput
    connect?: UserWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutRefereesNestedInput = {
    create?: XOR<MatchCreateWithoutRefereesInput, MatchUncheckedCreateWithoutRefereesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutRefereesInput
    upsert?: MatchUpsertWithoutRefereesInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutRefereesInput, MatchUpdateWithoutRefereesInput>, MatchUncheckedUpdateWithoutRefereesInput>
  }

  export type UserUpdateOneRequiredWithoutMatchRefereesNestedInput = {
    create?: XOR<UserCreateWithoutMatchRefereesInput, UserUncheckedCreateWithoutMatchRefereesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchRefereesInput
    upsert?: UserUpsertWithoutMatchRefereesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchRefereesInput, UserUpdateWithoutMatchRefereesInput>, UserUncheckedUpdateWithoutMatchRefereesInput>
  }

  export type MatchCreateNestedOneWithoutAlliancesInput = {
    create?: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutAlliancesInput
    connect?: MatchWhereUniqueInput
  }

  export type TeamAllianceCreateNestedManyWithoutAllianceInput = {
    create?: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput> | TeamAllianceCreateWithoutAllianceInput[] | TeamAllianceUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutAllianceInput | TeamAllianceCreateOrConnectWithoutAllianceInput[]
    createMany?: TeamAllianceCreateManyAllianceInputEnvelope
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
  }

  export type MatchScoreCreateNestedManyWithoutAllianceInput = {
    create?: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput> | MatchScoreCreateWithoutAllianceInput[] | MatchScoreUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutAllianceInput | MatchScoreCreateOrConnectWithoutAllianceInput[]
    createMany?: MatchScoreCreateManyAllianceInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type TeamAllianceUncheckedCreateNestedManyWithoutAllianceInput = {
    create?: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput> | TeamAllianceCreateWithoutAllianceInput[] | TeamAllianceUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutAllianceInput | TeamAllianceCreateOrConnectWithoutAllianceInput[]
    createMany?: TeamAllianceCreateManyAllianceInputEnvelope
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
  }

  export type MatchScoreUncheckedCreateNestedManyWithoutAllianceInput = {
    create?: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput> | MatchScoreCreateWithoutAllianceInput[] | MatchScoreUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutAllianceInput | MatchScoreCreateOrConnectWithoutAllianceInput[]
    createMany?: MatchScoreCreateManyAllianceInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type EnumAllianceColorFieldUpdateOperationsInput = {
    set?: $Enums.AllianceColor
  }

  export type MatchUpdateOneRequiredWithoutAlliancesNestedInput = {
    create?: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    connectOrCreate?: MatchCreateOrConnectWithoutAlliancesInput
    upsert?: MatchUpsertWithoutAlliancesInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutAlliancesInput, MatchUpdateWithoutAlliancesInput>, MatchUncheckedUpdateWithoutAlliancesInput>
  }

  export type TeamAllianceUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput> | TeamAllianceCreateWithoutAllianceInput[] | TeamAllianceUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutAllianceInput | TeamAllianceCreateOrConnectWithoutAllianceInput[]
    upsert?: TeamAllianceUpsertWithWhereUniqueWithoutAllianceInput | TeamAllianceUpsertWithWhereUniqueWithoutAllianceInput[]
    createMany?: TeamAllianceCreateManyAllianceInputEnvelope
    set?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    disconnect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    delete?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    update?: TeamAllianceUpdateWithWhereUniqueWithoutAllianceInput | TeamAllianceUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: TeamAllianceUpdateManyWithWhereWithoutAllianceInput | TeamAllianceUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
  }

  export type MatchScoreUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput> | MatchScoreCreateWithoutAllianceInput[] | MatchScoreUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutAllianceInput | MatchScoreCreateOrConnectWithoutAllianceInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutAllianceInput | MatchScoreUpsertWithWhereUniqueWithoutAllianceInput[]
    createMany?: MatchScoreCreateManyAllianceInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutAllianceInput | MatchScoreUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutAllianceInput | MatchScoreUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type TeamAllianceUncheckedUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput> | TeamAllianceCreateWithoutAllianceInput[] | TeamAllianceUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutAllianceInput | TeamAllianceCreateOrConnectWithoutAllianceInput[]
    upsert?: TeamAllianceUpsertWithWhereUniqueWithoutAllianceInput | TeamAllianceUpsertWithWhereUniqueWithoutAllianceInput[]
    createMany?: TeamAllianceCreateManyAllianceInputEnvelope
    set?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    disconnect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    delete?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    update?: TeamAllianceUpdateWithWhereUniqueWithoutAllianceInput | TeamAllianceUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: TeamAllianceUpdateManyWithWhereWithoutAllianceInput | TeamAllianceUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
  }

  export type MatchScoreUncheckedUpdateManyWithoutAllianceNestedInput = {
    create?: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput> | MatchScoreCreateWithoutAllianceInput[] | MatchScoreUncheckedCreateWithoutAllianceInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutAllianceInput | MatchScoreCreateOrConnectWithoutAllianceInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutAllianceInput | MatchScoreUpsertWithWhereUniqueWithoutAllianceInput[]
    createMany?: MatchScoreCreateManyAllianceInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutAllianceInput | MatchScoreUpdateWithWhereUniqueWithoutAllianceInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutAllianceInput | MatchScoreUpdateManyWithWhereWithoutAllianceInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type TournamentCreateNestedOneWithoutTeamsInput = {
    create?: XOR<TournamentCreateWithoutTeamsInput, TournamentUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTeamsInput
    connect?: TournamentWhereUniqueInput
  }

  export type TeamAllianceCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput> | TeamAllianceCreateWithoutTeamInput[] | TeamAllianceUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutTeamInput | TeamAllianceCreateOrConnectWithoutTeamInput[]
    createMany?: TeamAllianceCreateManyTeamInputEnvelope
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
  }

  export type TeamStatsCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput> | TeamStatsCreateWithoutTeamInput[] | TeamStatsUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTeamInput | TeamStatsCreateOrConnectWithoutTeamInput[]
    createMany?: TeamStatsCreateManyTeamInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type TeamAllianceUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput> | TeamAllianceCreateWithoutTeamInput[] | TeamAllianceUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutTeamInput | TeamAllianceCreateOrConnectWithoutTeamInput[]
    createMany?: TeamAllianceCreateManyTeamInputEnvelope
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
  }

  export type TeamStatsUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput> | TeamStatsCreateWithoutTeamInput[] | TeamStatsUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTeamInput | TeamStatsCreateOrConnectWithoutTeamInput[]
    createMany?: TeamStatsCreateManyTeamInputEnvelope
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
  }

  export type TournamentUpdateOneWithoutTeamsNestedInput = {
    create?: XOR<TournamentCreateWithoutTeamsInput, TournamentUncheckedCreateWithoutTeamsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTeamsInput
    upsert?: TournamentUpsertWithoutTeamsInput
    disconnect?: TournamentWhereInput | boolean
    delete?: TournamentWhereInput | boolean
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutTeamsInput, TournamentUpdateWithoutTeamsInput>, TournamentUncheckedUpdateWithoutTeamsInput>
  }

  export type TeamAllianceUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput> | TeamAllianceCreateWithoutTeamInput[] | TeamAllianceUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutTeamInput | TeamAllianceCreateOrConnectWithoutTeamInput[]
    upsert?: TeamAllianceUpsertWithWhereUniqueWithoutTeamInput | TeamAllianceUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamAllianceCreateManyTeamInputEnvelope
    set?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    disconnect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    delete?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    update?: TeamAllianceUpdateWithWhereUniqueWithoutTeamInput | TeamAllianceUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamAllianceUpdateManyWithWhereWithoutTeamInput | TeamAllianceUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
  }

  export type TeamStatsUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput> | TeamStatsCreateWithoutTeamInput[] | TeamStatsUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTeamInput | TeamStatsCreateOrConnectWithoutTeamInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutTeamInput | TeamStatsUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamStatsCreateManyTeamInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutTeamInput | TeamStatsUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutTeamInput | TeamStatsUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type TeamAllianceUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput> | TeamAllianceCreateWithoutTeamInput[] | TeamAllianceUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamAllianceCreateOrConnectWithoutTeamInput | TeamAllianceCreateOrConnectWithoutTeamInput[]
    upsert?: TeamAllianceUpsertWithWhereUniqueWithoutTeamInput | TeamAllianceUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamAllianceCreateManyTeamInputEnvelope
    set?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    disconnect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    delete?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    connect?: TeamAllianceWhereUniqueInput | TeamAllianceWhereUniqueInput[]
    update?: TeamAllianceUpdateWithWhereUniqueWithoutTeamInput | TeamAllianceUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamAllianceUpdateManyWithWhereWithoutTeamInput | TeamAllianceUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
  }

  export type TeamStatsUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput> | TeamStatsCreateWithoutTeamInput[] | TeamStatsUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamStatsCreateOrConnectWithoutTeamInput | TeamStatsCreateOrConnectWithoutTeamInput[]
    upsert?: TeamStatsUpsertWithWhereUniqueWithoutTeamInput | TeamStatsUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamStatsCreateManyTeamInputEnvelope
    set?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    disconnect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    delete?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    connect?: TeamStatsWhereUniqueInput | TeamStatsWhereUniqueInput[]
    update?: TeamStatsUpdateWithWhereUniqueWithoutTeamInput | TeamStatsUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamStatsUpdateManyWithWhereWithoutTeamInput | TeamStatsUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutTeamAlliancesInput = {
    create?: XOR<TeamCreateWithoutTeamAlliancesInput, TeamUncheckedCreateWithoutTeamAlliancesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamAlliancesInput
    connect?: TeamWhereUniqueInput
  }

  export type AllianceCreateNestedOneWithoutTeamAlliancesInput = {
    create?: XOR<AllianceCreateWithoutTeamAlliancesInput, AllianceUncheckedCreateWithoutTeamAlliancesInput>
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamAlliancesInput
    connect?: AllianceWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TeamUpdateOneRequiredWithoutTeamAlliancesNestedInput = {
    create?: XOR<TeamCreateWithoutTeamAlliancesInput, TeamUncheckedCreateWithoutTeamAlliancesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamAlliancesInput
    upsert?: TeamUpsertWithoutTeamAlliancesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamAlliancesInput, TeamUpdateWithoutTeamAlliancesInput>, TeamUncheckedUpdateWithoutTeamAlliancesInput>
  }

  export type AllianceUpdateOneRequiredWithoutTeamAlliancesNestedInput = {
    create?: XOR<AllianceCreateWithoutTeamAlliancesInput, AllianceUncheckedCreateWithoutTeamAlliancesInput>
    connectOrCreate?: AllianceCreateOrConnectWithoutTeamAlliancesInput
    upsert?: AllianceUpsertWithoutTeamAlliancesInput
    connect?: AllianceWhereUniqueInput
    update?: XOR<XOR<AllianceUpdateToOneWithWhereWithoutTeamAlliancesInput, AllianceUpdateWithoutTeamAlliancesInput>, AllianceUncheckedUpdateWithoutTeamAlliancesInput>
  }

  export type TeamCreateNestedOneWithoutTeamStatsInput = {
    create?: XOR<TeamCreateWithoutTeamStatsInput, TeamUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamStatsInput
    connect?: TeamWhereUniqueInput
  }

  export type TournamentCreateNestedOneWithoutTeamStatsInput = {
    create?: XOR<TournamentCreateWithoutTeamStatsInput, TournamentUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTeamStatsInput
    connect?: TournamentWhereUniqueInput
  }

  export type StageCreateNestedOneWithoutTeamStatsInput = {
    create?: XOR<StageCreateWithoutTeamStatsInput, StageUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: StageCreateOrConnectWithoutTeamStatsInput
    connect?: StageWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeamUpdateOneRequiredWithoutTeamStatsNestedInput = {
    create?: XOR<TeamCreateWithoutTeamStatsInput, TeamUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutTeamStatsInput
    upsert?: TeamUpsertWithoutTeamStatsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutTeamStatsInput, TeamUpdateWithoutTeamStatsInput>, TeamUncheckedUpdateWithoutTeamStatsInput>
  }

  export type TournamentUpdateOneRequiredWithoutTeamStatsNestedInput = {
    create?: XOR<TournamentCreateWithoutTeamStatsInput, TournamentUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutTeamStatsInput
    upsert?: TournamentUpsertWithoutTeamStatsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutTeamStatsInput, TournamentUpdateWithoutTeamStatsInput>, TournamentUncheckedUpdateWithoutTeamStatsInput>
  }

  export type StageUpdateOneWithoutTeamStatsNestedInput = {
    create?: XOR<StageCreateWithoutTeamStatsInput, StageUncheckedCreateWithoutTeamStatsInput>
    connectOrCreate?: StageCreateOrConnectWithoutTeamStatsInput
    upsert?: StageUpsertWithoutTeamStatsInput
    disconnect?: StageWhereInput | boolean
    delete?: StageWhereInput | boolean
    connect?: StageWhereUniqueInput
    update?: XOR<XOR<StageUpdateToOneWithWhereWithoutTeamStatsInput, StageUpdateWithoutTeamStatsInput>, StageUncheckedUpdateWithoutTeamStatsInput>
  }

  export type TournamentCreateNestedOneWithoutFieldsInput = {
    create?: XOR<TournamentCreateWithoutFieldsInput, TournamentUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutFieldsInput
    connect?: TournamentWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutFieldInput = {
    create?: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput> | MatchCreateWithoutFieldInput[] | MatchUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutFieldInput | MatchCreateOrConnectWithoutFieldInput[]
    createMany?: MatchCreateManyFieldInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type FieldDisplayCreateNestedOneWithoutFieldInput = {
    create?: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutFieldInput
    connect?: FieldDisplayWhereUniqueInput
  }

  export type MatchUncheckedCreateNestedManyWithoutFieldInput = {
    create?: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput> | MatchCreateWithoutFieldInput[] | MatchUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutFieldInput | MatchCreateOrConnectWithoutFieldInput[]
    createMany?: MatchCreateManyFieldInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type FieldDisplayUncheckedCreateNestedOneWithoutFieldInput = {
    create?: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutFieldInput
    connect?: FieldDisplayWhereUniqueInput
  }

  export type TournamentUpdateOneRequiredWithoutFieldsNestedInput = {
    create?: XOR<TournamentCreateWithoutFieldsInput, TournamentUncheckedCreateWithoutFieldsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutFieldsInput
    upsert?: TournamentUpsertWithoutFieldsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutFieldsInput, TournamentUpdateWithoutFieldsInput>, TournamentUncheckedUpdateWithoutFieldsInput>
  }

  export type MatchUpdateManyWithoutFieldNestedInput = {
    create?: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput> | MatchCreateWithoutFieldInput[] | MatchUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutFieldInput | MatchCreateOrConnectWithoutFieldInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutFieldInput | MatchUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: MatchCreateManyFieldInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutFieldInput | MatchUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutFieldInput | MatchUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type FieldDisplayUpdateOneWithoutFieldNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutFieldInput
    upsert?: FieldDisplayUpsertWithoutFieldInput
    disconnect?: FieldDisplayWhereInput | boolean
    delete?: FieldDisplayWhereInput | boolean
    connect?: FieldDisplayWhereUniqueInput
    update?: XOR<XOR<FieldDisplayUpdateToOneWithWhereWithoutFieldInput, FieldDisplayUpdateWithoutFieldInput>, FieldDisplayUncheckedUpdateWithoutFieldInput>
  }

  export type MatchUncheckedUpdateManyWithoutFieldNestedInput = {
    create?: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput> | MatchCreateWithoutFieldInput[] | MatchUncheckedCreateWithoutFieldInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutFieldInput | MatchCreateOrConnectWithoutFieldInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutFieldInput | MatchUpsertWithWhereUniqueWithoutFieldInput[]
    createMany?: MatchCreateManyFieldInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutFieldInput | MatchUpdateWithWhereUniqueWithoutFieldInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutFieldInput | MatchUpdateManyWithWhereWithoutFieldInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type FieldDisplayUncheckedUpdateOneWithoutFieldNestedInput = {
    create?: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
    connectOrCreate?: FieldDisplayCreateOrConnectWithoutFieldInput
    upsert?: FieldDisplayUpsertWithoutFieldInput
    disconnect?: FieldDisplayWhereInput | boolean
    delete?: FieldDisplayWhereInput | boolean
    connect?: FieldDisplayWhereUniqueInput
    update?: XOR<XOR<FieldDisplayUpdateToOneWithWhereWithoutFieldInput, FieldDisplayUpdateWithoutFieldInput>, FieldDisplayUncheckedUpdateWithoutFieldInput>
  }

  export type FieldCreateNestedOneWithoutFieldDisplayInput = {
    create?: XOR<FieldCreateWithoutFieldDisplayInput, FieldUncheckedCreateWithoutFieldDisplayInput>
    connectOrCreate?: FieldCreateOrConnectWithoutFieldDisplayInput
    connect?: FieldWhereUniqueInput
  }

  export type MatchCreateNestedOneWithoutFieldDisplaysInput = {
    create?: XOR<MatchCreateWithoutFieldDisplaysInput, MatchUncheckedCreateWithoutFieldDisplaysInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFieldDisplaysInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFieldDisplaysInput = {
    create?: XOR<UserCreateWithoutFieldDisplaysInput, UserUncheckedCreateWithoutFieldDisplaysInput>
    connectOrCreate?: UserCreateOrConnectWithoutFieldDisplaysInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDisplayStateFieldUpdateOperationsInput = {
    set?: $Enums.DisplayState
  }

  export type FieldUpdateOneRequiredWithoutFieldDisplayNestedInput = {
    create?: XOR<FieldCreateWithoutFieldDisplayInput, FieldUncheckedCreateWithoutFieldDisplayInput>
    connectOrCreate?: FieldCreateOrConnectWithoutFieldDisplayInput
    upsert?: FieldUpsertWithoutFieldDisplayInput
    connect?: FieldWhereUniqueInput
    update?: XOR<XOR<FieldUpdateToOneWithWhereWithoutFieldDisplayInput, FieldUpdateWithoutFieldDisplayInput>, FieldUncheckedUpdateWithoutFieldDisplayInput>
  }

  export type MatchUpdateOneWithoutFieldDisplaysNestedInput = {
    create?: XOR<MatchCreateWithoutFieldDisplaysInput, MatchUncheckedCreateWithoutFieldDisplaysInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFieldDisplaysInput
    upsert?: MatchUpsertWithoutFieldDisplaysInput
    disconnect?: MatchWhereInput | boolean
    delete?: MatchWhereInput | boolean
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutFieldDisplaysInput, MatchUpdateWithoutFieldDisplaysInput>, MatchUncheckedUpdateWithoutFieldDisplaysInput>
  }

  export type UserUpdateOneWithoutFieldDisplaysNestedInput = {
    create?: XOR<UserCreateWithoutFieldDisplaysInput, UserUncheckedCreateWithoutFieldDisplaysInput>
    connectOrCreate?: UserCreateOrConnectWithoutFieldDisplaysInput
    upsert?: UserUpsertWithoutFieldDisplaysInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFieldDisplaysInput, UserUpdateWithoutFieldDisplaysInput>, UserUncheckedUpdateWithoutFieldDisplaysInput>
  }

  export type TournamentCreateNestedOneWithoutScoreConfigsInput = {
    create?: XOR<TournamentCreateWithoutScoreConfigsInput, TournamentUncheckedCreateWithoutScoreConfigsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutScoreConfigsInput
    connect?: TournamentWhereUniqueInput
  }

  export type ScoreElementCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput> | ScoreElementCreateWithoutScoreConfigInput[] | ScoreElementUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: ScoreElementCreateOrConnectWithoutScoreConfigInput | ScoreElementCreateOrConnectWithoutScoreConfigInput[]
    createMany?: ScoreElementCreateManyScoreConfigInputEnvelope
    connect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
  }

  export type BonusConditionCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput> | BonusConditionCreateWithoutScoreConfigInput[] | BonusConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: BonusConditionCreateOrConnectWithoutScoreConfigInput | BonusConditionCreateOrConnectWithoutScoreConfigInput[]
    createMany?: BonusConditionCreateManyScoreConfigInputEnvelope
    connect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
  }

  export type PenaltyConditionCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput> | PenaltyConditionCreateWithoutScoreConfigInput[] | PenaltyConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: PenaltyConditionCreateOrConnectWithoutScoreConfigInput | PenaltyConditionCreateOrConnectWithoutScoreConfigInput[]
    createMany?: PenaltyConditionCreateManyScoreConfigInputEnvelope
    connect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
  }

  export type ScoreElementUncheckedCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput> | ScoreElementCreateWithoutScoreConfigInput[] | ScoreElementUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: ScoreElementCreateOrConnectWithoutScoreConfigInput | ScoreElementCreateOrConnectWithoutScoreConfigInput[]
    createMany?: ScoreElementCreateManyScoreConfigInputEnvelope
    connect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
  }

  export type BonusConditionUncheckedCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput> | BonusConditionCreateWithoutScoreConfigInput[] | BonusConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: BonusConditionCreateOrConnectWithoutScoreConfigInput | BonusConditionCreateOrConnectWithoutScoreConfigInput[]
    createMany?: BonusConditionCreateManyScoreConfigInputEnvelope
    connect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
  }

  export type PenaltyConditionUncheckedCreateNestedManyWithoutScoreConfigInput = {
    create?: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput> | PenaltyConditionCreateWithoutScoreConfigInput[] | PenaltyConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: PenaltyConditionCreateOrConnectWithoutScoreConfigInput | PenaltyConditionCreateOrConnectWithoutScoreConfigInput[]
    createMany?: PenaltyConditionCreateManyScoreConfigInputEnvelope
    connect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
  }

  export type TournamentUpdateOneRequiredWithoutScoreConfigsNestedInput = {
    create?: XOR<TournamentCreateWithoutScoreConfigsInput, TournamentUncheckedCreateWithoutScoreConfigsInput>
    connectOrCreate?: TournamentCreateOrConnectWithoutScoreConfigsInput
    upsert?: TournamentUpsertWithoutScoreConfigsInput
    connect?: TournamentWhereUniqueInput
    update?: XOR<XOR<TournamentUpdateToOneWithWhereWithoutScoreConfigsInput, TournamentUpdateWithoutScoreConfigsInput>, TournamentUncheckedUpdateWithoutScoreConfigsInput>
  }

  export type ScoreElementUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput> | ScoreElementCreateWithoutScoreConfigInput[] | ScoreElementUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: ScoreElementCreateOrConnectWithoutScoreConfigInput | ScoreElementCreateOrConnectWithoutScoreConfigInput[]
    upsert?: ScoreElementUpsertWithWhereUniqueWithoutScoreConfigInput | ScoreElementUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: ScoreElementCreateManyScoreConfigInputEnvelope
    set?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    disconnect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    delete?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    connect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    update?: ScoreElementUpdateWithWhereUniqueWithoutScoreConfigInput | ScoreElementUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: ScoreElementUpdateManyWithWhereWithoutScoreConfigInput | ScoreElementUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: ScoreElementScalarWhereInput | ScoreElementScalarWhereInput[]
  }

  export type BonusConditionUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput> | BonusConditionCreateWithoutScoreConfigInput[] | BonusConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: BonusConditionCreateOrConnectWithoutScoreConfigInput | BonusConditionCreateOrConnectWithoutScoreConfigInput[]
    upsert?: BonusConditionUpsertWithWhereUniqueWithoutScoreConfigInput | BonusConditionUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: BonusConditionCreateManyScoreConfigInputEnvelope
    set?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    disconnect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    delete?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    connect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    update?: BonusConditionUpdateWithWhereUniqueWithoutScoreConfigInput | BonusConditionUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: BonusConditionUpdateManyWithWhereWithoutScoreConfigInput | BonusConditionUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: BonusConditionScalarWhereInput | BonusConditionScalarWhereInput[]
  }

  export type PenaltyConditionUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput> | PenaltyConditionCreateWithoutScoreConfigInput[] | PenaltyConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: PenaltyConditionCreateOrConnectWithoutScoreConfigInput | PenaltyConditionCreateOrConnectWithoutScoreConfigInput[]
    upsert?: PenaltyConditionUpsertWithWhereUniqueWithoutScoreConfigInput | PenaltyConditionUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: PenaltyConditionCreateManyScoreConfigInputEnvelope
    set?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    disconnect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    delete?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    connect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    update?: PenaltyConditionUpdateWithWhereUniqueWithoutScoreConfigInput | PenaltyConditionUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: PenaltyConditionUpdateManyWithWhereWithoutScoreConfigInput | PenaltyConditionUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: PenaltyConditionScalarWhereInput | PenaltyConditionScalarWhereInput[]
  }

  export type ScoreElementUncheckedUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput> | ScoreElementCreateWithoutScoreConfigInput[] | ScoreElementUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: ScoreElementCreateOrConnectWithoutScoreConfigInput | ScoreElementCreateOrConnectWithoutScoreConfigInput[]
    upsert?: ScoreElementUpsertWithWhereUniqueWithoutScoreConfigInput | ScoreElementUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: ScoreElementCreateManyScoreConfigInputEnvelope
    set?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    disconnect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    delete?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    connect?: ScoreElementWhereUniqueInput | ScoreElementWhereUniqueInput[]
    update?: ScoreElementUpdateWithWhereUniqueWithoutScoreConfigInput | ScoreElementUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: ScoreElementUpdateManyWithWhereWithoutScoreConfigInput | ScoreElementUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: ScoreElementScalarWhereInput | ScoreElementScalarWhereInput[]
  }

  export type BonusConditionUncheckedUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput> | BonusConditionCreateWithoutScoreConfigInput[] | BonusConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: BonusConditionCreateOrConnectWithoutScoreConfigInput | BonusConditionCreateOrConnectWithoutScoreConfigInput[]
    upsert?: BonusConditionUpsertWithWhereUniqueWithoutScoreConfigInput | BonusConditionUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: BonusConditionCreateManyScoreConfigInputEnvelope
    set?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    disconnect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    delete?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    connect?: BonusConditionWhereUniqueInput | BonusConditionWhereUniqueInput[]
    update?: BonusConditionUpdateWithWhereUniqueWithoutScoreConfigInput | BonusConditionUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: BonusConditionUpdateManyWithWhereWithoutScoreConfigInput | BonusConditionUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: BonusConditionScalarWhereInput | BonusConditionScalarWhereInput[]
  }

  export type PenaltyConditionUncheckedUpdateManyWithoutScoreConfigNestedInput = {
    create?: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput> | PenaltyConditionCreateWithoutScoreConfigInput[] | PenaltyConditionUncheckedCreateWithoutScoreConfigInput[]
    connectOrCreate?: PenaltyConditionCreateOrConnectWithoutScoreConfigInput | PenaltyConditionCreateOrConnectWithoutScoreConfigInput[]
    upsert?: PenaltyConditionUpsertWithWhereUniqueWithoutScoreConfigInput | PenaltyConditionUpsertWithWhereUniqueWithoutScoreConfigInput[]
    createMany?: PenaltyConditionCreateManyScoreConfigInputEnvelope
    set?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    disconnect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    delete?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    connect?: PenaltyConditionWhereUniqueInput | PenaltyConditionWhereUniqueInput[]
    update?: PenaltyConditionUpdateWithWhereUniqueWithoutScoreConfigInput | PenaltyConditionUpdateWithWhereUniqueWithoutScoreConfigInput[]
    updateMany?: PenaltyConditionUpdateManyWithWhereWithoutScoreConfigInput | PenaltyConditionUpdateManyWithWhereWithoutScoreConfigInput[]
    deleteMany?: PenaltyConditionScalarWhereInput | PenaltyConditionScalarWhereInput[]
  }

  export type ScoreConfigCreateNestedOneWithoutScoreElementsInput = {
    create?: XOR<ScoreConfigCreateWithoutScoreElementsInput, ScoreConfigUncheckedCreateWithoutScoreElementsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutScoreElementsInput
    connect?: ScoreConfigWhereUniqueInput
  }

  export type MatchScoreCreateNestedManyWithoutScoreElementInput = {
    create?: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput> | MatchScoreCreateWithoutScoreElementInput[] | MatchScoreUncheckedCreateWithoutScoreElementInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutScoreElementInput | MatchScoreCreateOrConnectWithoutScoreElementInput[]
    createMany?: MatchScoreCreateManyScoreElementInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type MatchScoreUncheckedCreateNestedManyWithoutScoreElementInput = {
    create?: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput> | MatchScoreCreateWithoutScoreElementInput[] | MatchScoreUncheckedCreateWithoutScoreElementInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutScoreElementInput | MatchScoreCreateOrConnectWithoutScoreElementInput[]
    createMany?: MatchScoreCreateManyScoreElementInputEnvelope
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
  }

  export type EnumElementTypeFieldUpdateOperationsInput = {
    set?: $Enums.ElementType
  }

  export type ScoreConfigUpdateOneRequiredWithoutScoreElementsNestedInput = {
    create?: XOR<ScoreConfigCreateWithoutScoreElementsInput, ScoreConfigUncheckedCreateWithoutScoreElementsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutScoreElementsInput
    upsert?: ScoreConfigUpsertWithoutScoreElementsInput
    connect?: ScoreConfigWhereUniqueInput
    update?: XOR<XOR<ScoreConfigUpdateToOneWithWhereWithoutScoreElementsInput, ScoreConfigUpdateWithoutScoreElementsInput>, ScoreConfigUncheckedUpdateWithoutScoreElementsInput>
  }

  export type MatchScoreUpdateManyWithoutScoreElementNestedInput = {
    create?: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput> | MatchScoreCreateWithoutScoreElementInput[] | MatchScoreUncheckedCreateWithoutScoreElementInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutScoreElementInput | MatchScoreCreateOrConnectWithoutScoreElementInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutScoreElementInput | MatchScoreUpsertWithWhereUniqueWithoutScoreElementInput[]
    createMany?: MatchScoreCreateManyScoreElementInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutScoreElementInput | MatchScoreUpdateWithWhereUniqueWithoutScoreElementInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutScoreElementInput | MatchScoreUpdateManyWithWhereWithoutScoreElementInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type MatchScoreUncheckedUpdateManyWithoutScoreElementNestedInput = {
    create?: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput> | MatchScoreCreateWithoutScoreElementInput[] | MatchScoreUncheckedCreateWithoutScoreElementInput[]
    connectOrCreate?: MatchScoreCreateOrConnectWithoutScoreElementInput | MatchScoreCreateOrConnectWithoutScoreElementInput[]
    upsert?: MatchScoreUpsertWithWhereUniqueWithoutScoreElementInput | MatchScoreUpsertWithWhereUniqueWithoutScoreElementInput[]
    createMany?: MatchScoreCreateManyScoreElementInputEnvelope
    set?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    disconnect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    delete?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    connect?: MatchScoreWhereUniqueInput | MatchScoreWhereUniqueInput[]
    update?: MatchScoreUpdateWithWhereUniqueWithoutScoreElementInput | MatchScoreUpdateWithWhereUniqueWithoutScoreElementInput[]
    updateMany?: MatchScoreUpdateManyWithWhereWithoutScoreElementInput | MatchScoreUpdateManyWithWhereWithoutScoreElementInput[]
    deleteMany?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
  }

  export type ScoreConfigCreateNestedOneWithoutBonusConditionsInput = {
    create?: XOR<ScoreConfigCreateWithoutBonusConditionsInput, ScoreConfigUncheckedCreateWithoutBonusConditionsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutBonusConditionsInput
    connect?: ScoreConfigWhereUniqueInput
  }

  export type ScoreConfigUpdateOneRequiredWithoutBonusConditionsNestedInput = {
    create?: XOR<ScoreConfigCreateWithoutBonusConditionsInput, ScoreConfigUncheckedCreateWithoutBonusConditionsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutBonusConditionsInput
    upsert?: ScoreConfigUpsertWithoutBonusConditionsInput
    connect?: ScoreConfigWhereUniqueInput
    update?: XOR<XOR<ScoreConfigUpdateToOneWithWhereWithoutBonusConditionsInput, ScoreConfigUpdateWithoutBonusConditionsInput>, ScoreConfigUncheckedUpdateWithoutBonusConditionsInput>
  }

  export type ScoreConfigCreateNestedOneWithoutPenaltyConditionsInput = {
    create?: XOR<ScoreConfigCreateWithoutPenaltyConditionsInput, ScoreConfigUncheckedCreateWithoutPenaltyConditionsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutPenaltyConditionsInput
    connect?: ScoreConfigWhereUniqueInput
  }

  export type ScoreConfigUpdateOneRequiredWithoutPenaltyConditionsNestedInput = {
    create?: XOR<ScoreConfigCreateWithoutPenaltyConditionsInput, ScoreConfigUncheckedCreateWithoutPenaltyConditionsInput>
    connectOrCreate?: ScoreConfigCreateOrConnectWithoutPenaltyConditionsInput
    upsert?: ScoreConfigUpsertWithoutPenaltyConditionsInput
    connect?: ScoreConfigWhereUniqueInput
    update?: XOR<XOR<ScoreConfigUpdateToOneWithWhereWithoutPenaltyConditionsInput, ScoreConfigUpdateWithoutPenaltyConditionsInput>, ScoreConfigUncheckedUpdateWithoutPenaltyConditionsInput>
  }

  export type MatchCreateNestedOneWithoutMatchScoresInput = {
    create?: XOR<MatchCreateWithoutMatchScoresInput, MatchUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: MatchCreateOrConnectWithoutMatchScoresInput
    connect?: MatchWhereUniqueInput
  }

  export type AllianceCreateNestedOneWithoutMatchScoresInput = {
    create?: XOR<AllianceCreateWithoutMatchScoresInput, AllianceUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchScoresInput
    connect?: AllianceWhereUniqueInput
  }

  export type ScoreElementCreateNestedOneWithoutMatchScoresInput = {
    create?: XOR<ScoreElementCreateWithoutMatchScoresInput, ScoreElementUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: ScoreElementCreateOrConnectWithoutMatchScoresInput
    connect?: ScoreElementWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutMatchScoresNestedInput = {
    create?: XOR<MatchCreateWithoutMatchScoresInput, MatchUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: MatchCreateOrConnectWithoutMatchScoresInput
    upsert?: MatchUpsertWithoutMatchScoresInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutMatchScoresInput, MatchUpdateWithoutMatchScoresInput>, MatchUncheckedUpdateWithoutMatchScoresInput>
  }

  export type AllianceUpdateOneRequiredWithoutMatchScoresNestedInput = {
    create?: XOR<AllianceCreateWithoutMatchScoresInput, AllianceUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: AllianceCreateOrConnectWithoutMatchScoresInput
    upsert?: AllianceUpsertWithoutMatchScoresInput
    connect?: AllianceWhereUniqueInput
    update?: XOR<XOR<AllianceUpdateToOneWithWhereWithoutMatchScoresInput, AllianceUpdateWithoutMatchScoresInput>, AllianceUncheckedUpdateWithoutMatchScoresInput>
  }

  export type ScoreElementUpdateOneRequiredWithoutMatchScoresNestedInput = {
    create?: XOR<ScoreElementCreateWithoutMatchScoresInput, ScoreElementUncheckedCreateWithoutMatchScoresInput>
    connectOrCreate?: ScoreElementCreateOrConnectWithoutMatchScoresInput
    upsert?: ScoreElementUpsertWithoutMatchScoresInput
    connect?: ScoreElementWhereUniqueInput
    update?: XOR<XOR<ScoreElementUpdateToOneWithWhereWithoutMatchScoresInput, ScoreElementUpdateWithoutMatchScoresInput>, ScoreElementUncheckedUpdateWithoutMatchScoresInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type NestedEnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type NestedEnumMatchStateFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateFilter<$PrismaModel> | $Enums.MatchState
  }

  export type NestedEnumAllianceColorNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAllianceColorNullableFilter<$PrismaModel> | $Enums.AllianceColor | null
  }

  export type NestedEnumMatchRoundTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchRoundType | EnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel> | $Enums.MatchRoundType | null
  }

  export type NestedEnumMatchTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeFilter<$PrismaModel> | $Enums.MatchType
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMatchStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchState | EnumMatchStateFieldRefInput<$PrismaModel>
    in?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchState[] | ListEnumMatchStateFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchStateWithAggregatesFilter<$PrismaModel> | $Enums.MatchState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchStateFilter<$PrismaModel>
    _max?: NestedEnumMatchStateFilter<$PrismaModel>
  }

  export type NestedEnumAllianceColorNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel> | null
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAllianceColorNullableWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorNullableFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorNullableFilter<$PrismaModel>
  }

  export type NestedEnumMatchRoundTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchRoundType | EnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.MatchRoundType[] | ListEnumMatchRoundTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumMatchRoundTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.MatchRoundType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumMatchRoundTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MatchType | EnumMatchTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MatchType[] | ListEnumMatchTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMatchTypeWithAggregatesFilter<$PrismaModel> | $Enums.MatchType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMatchTypeFilter<$PrismaModel>
    _max?: NestedEnumMatchTypeFilter<$PrismaModel>
  }

  export type NestedEnumAllianceColorFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    not?: NestedEnumAllianceColorFilter<$PrismaModel> | $Enums.AllianceColor
  }

  export type NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AllianceColor | EnumAllianceColorFieldRefInput<$PrismaModel>
    in?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.AllianceColor[] | ListEnumAllianceColorFieldRefInput<$PrismaModel>
    not?: NestedEnumAllianceColorWithAggregatesFilter<$PrismaModel> | $Enums.AllianceColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAllianceColorFilter<$PrismaModel>
    _max?: NestedEnumAllianceColorFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumDisplayStateFilter<$PrismaModel = never> = {
    equals?: $Enums.DisplayState | EnumDisplayStateFieldRefInput<$PrismaModel>
    in?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    not?: NestedEnumDisplayStateFilter<$PrismaModel> | $Enums.DisplayState
  }

  export type NestedEnumDisplayStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DisplayState | EnumDisplayStateFieldRefInput<$PrismaModel>
    in?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.DisplayState[] | ListEnumDisplayStateFieldRefInput<$PrismaModel>
    not?: NestedEnumDisplayStateWithAggregatesFilter<$PrismaModel> | $Enums.DisplayState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDisplayStateFilter<$PrismaModel>
    _max?: NestedEnumDisplayStateFilter<$PrismaModel>
  }

  export type NestedEnumElementTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementType | EnumElementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementTypeFilter<$PrismaModel> | $Enums.ElementType
  }

  export type NestedEnumElementTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ElementType | EnumElementTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ElementType[] | ListEnumElementTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumElementTypeWithAggregatesFilter<$PrismaModel> | $Enums.ElementType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumElementTypeFilter<$PrismaModel>
    _max?: NestedEnumElementTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserCreateWithoutCreatedUsersInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateWithoutCreatedUsersInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserCreateOrConnectWithoutCreatedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
  }

  export type UserCreateWithoutCreatedByInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateWithoutCreatedByInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserCreateOrConnectWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserCreateManyCreatedByInputEnvelope = {
    data: UserCreateManyCreatedByInput | UserCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TournamentCreateWithoutAdminInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    stages?: StageCreateNestedManyWithoutTournamentInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutAdminInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutAdminInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput>
  }

  export type TournamentCreateManyAdminInputEnvelope = {
    data: TournamentCreateManyAdminInput | TournamentCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutScoredByInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutScoredByInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutScoredByInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput>
  }

  export type MatchCreateManyScoredByInputEnvelope = {
    data: MatchCreateManyScoredByInput | MatchCreateManyScoredByInput[]
    skipDuplicates?: boolean
  }

  export type MatchRefereeCreateWithoutUserInput = {
    id?: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutRefereesInput
  }

  export type MatchRefereeUncheckedCreateWithoutUserInput = {
    id?: string
    matchId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchRefereeCreateOrConnectWithoutUserInput = {
    where: MatchRefereeWhereUniqueInput
    create: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput>
  }

  export type MatchRefereeCreateManyUserInputEnvelope = {
    data: MatchRefereeCreateManyUserInput | MatchRefereeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FieldDisplayCreateWithoutLastUpdatedUserInput = {
    id?: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    field: FieldCreateNestedOneWithoutFieldDisplayInput
    currentMatch?: MatchCreateNestedOneWithoutFieldDisplaysInput
  }

  export type FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    currentMatchId?: string | null
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayCreateOrConnectWithoutLastUpdatedUserInput = {
    where: FieldDisplayWhereUniqueInput
    create: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput>
  }

  export type FieldDisplayCreateManyLastUpdatedUserInputEnvelope = {
    data: FieldDisplayCreateManyLastUpdatedUserInput | FieldDisplayCreateManyLastUpdatedUserInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedUsersInput = {
    update: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
  }

  export type UserUpdateManyWithWhereWithoutCreatedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    email?: StringNullableFilter<"User"> | string | null
    gender?: BoolNullableFilter<"User"> | boolean | null
    DateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdById?: StringNullableFilter<"User"> | string | null
  }

  export type TournamentUpsertWithWhereUniqueWithoutAdminInput = {
    where: TournamentWhereUniqueInput
    update: XOR<TournamentUpdateWithoutAdminInput, TournamentUncheckedUpdateWithoutAdminInput>
    create: XOR<TournamentCreateWithoutAdminInput, TournamentUncheckedCreateWithoutAdminInput>
  }

  export type TournamentUpdateWithWhereUniqueWithoutAdminInput = {
    where: TournamentWhereUniqueInput
    data: XOR<TournamentUpdateWithoutAdminInput, TournamentUncheckedUpdateWithoutAdminInput>
  }

  export type TournamentUpdateManyWithWhereWithoutAdminInput = {
    where: TournamentScalarWhereInput
    data: XOR<TournamentUpdateManyMutationInput, TournamentUncheckedUpdateManyWithoutAdminInput>
  }

  export type TournamentScalarWhereInput = {
    AND?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    OR?: TournamentScalarWhereInput[]
    NOT?: TournamentScalarWhereInput | TournamentScalarWhereInput[]
    id?: StringFilter<"Tournament"> | string
    name?: StringFilter<"Tournament"> | string
    description?: StringNullableFilter<"Tournament"> | string | null
    startDate?: DateTimeFilter<"Tournament"> | Date | string
    endDate?: DateTimeFilter<"Tournament"> | Date | string
    createdAt?: DateTimeFilter<"Tournament"> | Date | string
    updatedAt?: DateTimeFilter<"Tournament"> | Date | string
    adminId?: StringFilter<"Tournament"> | string
    numberOfFields?: IntFilter<"Tournament"> | number
  }

  export type MatchUpsertWithWhereUniqueWithoutScoredByInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutScoredByInput, MatchUncheckedUpdateWithoutScoredByInput>
    create: XOR<MatchCreateWithoutScoredByInput, MatchUncheckedCreateWithoutScoredByInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutScoredByInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutScoredByInput, MatchUncheckedUpdateWithoutScoredByInput>
  }

  export type MatchUpdateManyWithWhereWithoutScoredByInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutScoredByInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    matchNumber?: IntFilter<"Match"> | number
    roundNumber?: IntNullableFilter<"Match"> | number | null
    status?: EnumMatchStateFilter<"Match"> | $Enums.MatchState
    startTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    scheduledTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    endTime?: DateTimeNullableFilter<"Match"> | Date | string | null
    duration?: IntNullableFilter<"Match"> | number | null
    winningAlliance?: EnumAllianceColorNullableFilter<"Match"> | $Enums.AllianceColor | null
    stageId?: StringFilter<"Match"> | string
    scoredById?: StringNullableFilter<"Match"> | string | null
    roundType?: EnumMatchRoundTypeNullableFilter<"Match"> | $Enums.MatchRoundType | null
    scheduleId?: StringNullableFilter<"Match"> | string | null
    fieldId?: StringNullableFilter<"Match"> | string | null
    matchType?: EnumMatchTypeFilter<"Match"> | $Enums.MatchType
    matchDuration?: IntNullableFilter<"Match"> | number | null
    updatedAt?: DateTimeFilter<"Match"> | Date | string
  }

  export type MatchRefereeUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchRefereeWhereUniqueInput
    update: XOR<MatchRefereeUpdateWithoutUserInput, MatchRefereeUncheckedUpdateWithoutUserInput>
    create: XOR<MatchRefereeCreateWithoutUserInput, MatchRefereeUncheckedCreateWithoutUserInput>
  }

  export type MatchRefereeUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchRefereeWhereUniqueInput
    data: XOR<MatchRefereeUpdateWithoutUserInput, MatchRefereeUncheckedUpdateWithoutUserInput>
  }

  export type MatchRefereeUpdateManyWithWhereWithoutUserInput = {
    where: MatchRefereeScalarWhereInput
    data: XOR<MatchRefereeUpdateManyMutationInput, MatchRefereeUncheckedUpdateManyWithoutUserInput>
  }

  export type MatchRefereeScalarWhereInput = {
    AND?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
    OR?: MatchRefereeScalarWhereInput[]
    NOT?: MatchRefereeScalarWhereInput | MatchRefereeScalarWhereInput[]
    id?: StringFilter<"MatchReferee"> | string
    matchId?: StringFilter<"MatchReferee"> | string
    userId?: StringFilter<"MatchReferee"> | string
    role?: EnumUserRoleFilter<"MatchReferee"> | $Enums.UserRole
    position?: StringNullableFilter<"MatchReferee"> | string | null
    createdAt?: DateTimeFilter<"MatchReferee"> | Date | string
    updatedAt?: DateTimeFilter<"MatchReferee"> | Date | string
  }

  export type FieldDisplayUpsertWithWhereUniqueWithoutLastUpdatedUserInput = {
    where: FieldDisplayWhereUniqueInput
    update: XOR<FieldDisplayUpdateWithoutLastUpdatedUserInput, FieldDisplayUncheckedUpdateWithoutLastUpdatedUserInput>
    create: XOR<FieldDisplayCreateWithoutLastUpdatedUserInput, FieldDisplayUncheckedCreateWithoutLastUpdatedUserInput>
  }

  export type FieldDisplayUpdateWithWhereUniqueWithoutLastUpdatedUserInput = {
    where: FieldDisplayWhereUniqueInput
    data: XOR<FieldDisplayUpdateWithoutLastUpdatedUserInput, FieldDisplayUncheckedUpdateWithoutLastUpdatedUserInput>
  }

  export type FieldDisplayUpdateManyWithWhereWithoutLastUpdatedUserInput = {
    where: FieldDisplayScalarWhereInput
    data: XOR<FieldDisplayUpdateManyMutationInput, FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserInput>
  }

  export type FieldDisplayScalarWhereInput = {
    AND?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
    OR?: FieldDisplayScalarWhereInput[]
    NOT?: FieldDisplayScalarWhereInput | FieldDisplayScalarWhereInput[]
    id?: StringFilter<"FieldDisplay"> | string
    fieldId?: StringFilter<"FieldDisplay"> | string
    displayState?: EnumDisplayStateFilter<"FieldDisplay"> | $Enums.DisplayState
    currentMatchId?: StringNullableFilter<"FieldDisplay"> | string | null
    customMessage?: StringNullableFilter<"FieldDisplay"> | string | null
    lastUpdatedBy?: StringNullableFilter<"FieldDisplay"> | string | null
    autoAdvance?: BoolFilter<"FieldDisplay"> | boolean
    createdAt?: DateTimeFilter<"FieldDisplay"> | Date | string
    updatedAt?: DateTimeFilter<"FieldDisplay"> | Date | string
  }

  export type UserCreateWithoutTournamentsInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateWithoutTournamentsInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserCreateOrConnectWithoutTournamentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
  }

  export type StageCreateWithoutTournamentInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchCreateNestedManyWithoutStageInput
    teamStats?: TeamStatsCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateWithoutTournamentInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutStageInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageCreateOrConnectWithoutTournamentInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput>
  }

  export type StageCreateManyTournamentInputEnvelope = {
    data: StageCreateManyTournamentInput | StageCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutTournamentInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceCreateNestedManyWithoutTeamInput
    teamStats?: TeamStatsCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutTournamentInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutTeamInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutTournamentInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput>
  }

  export type TeamCreateManyTournamentInputEnvelope = {
    data: TeamCreateManyTournamentInput | TeamCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type TeamStatsCreateWithoutTournamentInput = {
    id?: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamStatsInput
    stage?: StageCreateNestedOneWithoutTeamStatsInput
  }

  export type TeamStatsUncheckedCreateWithoutTournamentInput = {
    id?: string
    teamId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsCreateOrConnectWithoutTournamentInput = {
    where: TeamStatsWhereUniqueInput
    create: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput>
  }

  export type TeamStatsCreateManyTournamentInputEnvelope = {
    data: TeamStatsCreateManyTournamentInput | TeamStatsCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type FieldCreateWithoutTournamentInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchCreateNestedManyWithoutFieldInput
    fieldDisplay?: FieldDisplayCreateNestedOneWithoutFieldInput
  }

  export type FieldUncheckedCreateWithoutTournamentInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutFieldInput
    fieldDisplay?: FieldDisplayUncheckedCreateNestedOneWithoutFieldInput
  }

  export type FieldCreateOrConnectWithoutTournamentInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput>
  }

  export type FieldCreateManyTournamentInputEnvelope = {
    data: FieldCreateManyTournamentInput | FieldCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type ScoreConfigCreateWithoutTournamentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreElements?: ScoreElementCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUncheckedCreateWithoutTournamentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreElements?: ScoreElementUncheckedCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionUncheckedCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionUncheckedCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigCreateOrConnectWithoutTournamentInput = {
    where: ScoreConfigWhereUniqueInput
    create: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput>
  }

  export type ScoreConfigCreateManyTournamentInputEnvelope = {
    data: ScoreConfigCreateManyTournamentInput | ScoreConfigCreateManyTournamentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTournamentsInput = {
    update: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
    create: XOR<UserCreateWithoutTournamentsInput, UserUncheckedCreateWithoutTournamentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTournamentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTournamentsInput, UserUncheckedUpdateWithoutTournamentsInput>
  }

  export type UserUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTournamentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type StageUpsertWithWhereUniqueWithoutTournamentInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutTournamentInput, StageUncheckedUpdateWithoutTournamentInput>
    create: XOR<StageCreateWithoutTournamentInput, StageUncheckedCreateWithoutTournamentInput>
  }

  export type StageUpdateWithWhereUniqueWithoutTournamentInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutTournamentInput, StageUncheckedUpdateWithoutTournamentInput>
  }

  export type StageUpdateManyWithWhereWithoutTournamentInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutTournamentInput>
  }

  export type StageScalarWhereInput = {
    AND?: StageScalarWhereInput | StageScalarWhereInput[]
    OR?: StageScalarWhereInput[]
    NOT?: StageScalarWhereInput | StageScalarWhereInput[]
    id?: StringFilter<"Stage"> | string
    name?: StringFilter<"Stage"> | string
    type?: EnumStageTypeFilter<"Stage"> | $Enums.StageType
    startDate?: DateTimeFilter<"Stage"> | Date | string
    endDate?: DateTimeFilter<"Stage"> | Date | string
    tournamentId?: StringFilter<"Stage"> | string
    teamsPerAlliance?: IntFilter<"Stage"> | number
    createdAt?: DateTimeFilter<"Stage"> | Date | string
    updatedAt?: DateTimeFilter<"Stage"> | Date | string
  }

  export type TeamUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TeamWhereUniqueInput
    update: XOR<TeamUpdateWithoutTournamentInput, TeamUncheckedUpdateWithoutTournamentInput>
    create: XOR<TeamCreateWithoutTournamentInput, TeamUncheckedCreateWithoutTournamentInput>
  }

  export type TeamUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TeamWhereUniqueInput
    data: XOR<TeamUpdateWithoutTournamentInput, TeamUncheckedUpdateWithoutTournamentInput>
  }

  export type TeamUpdateManyWithWhereWithoutTournamentInput = {
    where: TeamScalarWhereInput
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TeamScalarWhereInput = {
    AND?: TeamScalarWhereInput | TeamScalarWhereInput[]
    OR?: TeamScalarWhereInput[]
    NOT?: TeamScalarWhereInput | TeamScalarWhereInput[]
    id?: StringFilter<"Team"> | string
    teamNumber?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    organization?: StringNullableFilter<"Team"> | string | null
    avatar?: StringNullableFilter<"Team"> | string | null
    description?: StringNullableFilter<"Team"> | string | null
    teamLead?: StringNullableFilter<"Team"> | string | null
    teamLeadId?: StringNullableFilter<"Team"> | string | null
    teamMembers?: JsonNullableFilter<"Team">
    tournamentId?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
  }

  export type TeamStatsUpsertWithWhereUniqueWithoutTournamentInput = {
    where: TeamStatsWhereUniqueInput
    update: XOR<TeamStatsUpdateWithoutTournamentInput, TeamStatsUncheckedUpdateWithoutTournamentInput>
    create: XOR<TeamStatsCreateWithoutTournamentInput, TeamStatsUncheckedCreateWithoutTournamentInput>
  }

  export type TeamStatsUpdateWithWhereUniqueWithoutTournamentInput = {
    where: TeamStatsWhereUniqueInput
    data: XOR<TeamStatsUpdateWithoutTournamentInput, TeamStatsUncheckedUpdateWithoutTournamentInput>
  }

  export type TeamStatsUpdateManyWithWhereWithoutTournamentInput = {
    where: TeamStatsScalarWhereInput
    data: XOR<TeamStatsUpdateManyMutationInput, TeamStatsUncheckedUpdateManyWithoutTournamentInput>
  }

  export type TeamStatsScalarWhereInput = {
    AND?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
    OR?: TeamStatsScalarWhereInput[]
    NOT?: TeamStatsScalarWhereInput | TeamStatsScalarWhereInput[]
    id?: StringFilter<"TeamStats"> | string
    teamId?: StringFilter<"TeamStats"> | string
    tournamentId?: StringFilter<"TeamStats"> | string
    stageId?: StringNullableFilter<"TeamStats"> | string | null
    wins?: IntFilter<"TeamStats"> | number
    losses?: IntFilter<"TeamStats"> | number
    ties?: IntFilter<"TeamStats"> | number
    pointsScored?: IntFilter<"TeamStats"> | number
    pointsConceded?: IntFilter<"TeamStats"> | number
    matchesPlayed?: IntFilter<"TeamStats"> | number
    rankingPoints?: IntFilter<"TeamStats"> | number
    opponentWinPercentage?: FloatFilter<"TeamStats"> | number
    pointDifferential?: IntFilter<"TeamStats"> | number
    rank?: IntNullableFilter<"TeamStats"> | number | null
    tiebreaker1?: FloatFilter<"TeamStats"> | number
    tiebreaker2?: FloatFilter<"TeamStats"> | number
    createdAt?: DateTimeFilter<"TeamStats"> | Date | string
    updatedAt?: DateTimeFilter<"TeamStats"> | Date | string
  }

  export type FieldUpsertWithWhereUniqueWithoutTournamentInput = {
    where: FieldWhereUniqueInput
    update: XOR<FieldUpdateWithoutTournamentInput, FieldUncheckedUpdateWithoutTournamentInput>
    create: XOR<FieldCreateWithoutTournamentInput, FieldUncheckedCreateWithoutTournamentInput>
  }

  export type FieldUpdateWithWhereUniqueWithoutTournamentInput = {
    where: FieldWhereUniqueInput
    data: XOR<FieldUpdateWithoutTournamentInput, FieldUncheckedUpdateWithoutTournamentInput>
  }

  export type FieldUpdateManyWithWhereWithoutTournamentInput = {
    where: FieldScalarWhereInput
    data: XOR<FieldUpdateManyMutationInput, FieldUncheckedUpdateManyWithoutTournamentInput>
  }

  export type FieldScalarWhereInput = {
    AND?: FieldScalarWhereInput | FieldScalarWhereInput[]
    OR?: FieldScalarWhereInput[]
    NOT?: FieldScalarWhereInput | FieldScalarWhereInput[]
    id?: StringFilter<"Field"> | string
    name?: StringFilter<"Field"> | string
    number?: IntFilter<"Field"> | number
    location?: StringNullableFilter<"Field"> | string | null
    description?: StringNullableFilter<"Field"> | string | null
    tournamentId?: StringFilter<"Field"> | string
    createdAt?: DateTimeFilter<"Field"> | Date | string
    updatedAt?: DateTimeFilter<"Field"> | Date | string
  }

  export type ScoreConfigUpsertWithWhereUniqueWithoutTournamentInput = {
    where: ScoreConfigWhereUniqueInput
    update: XOR<ScoreConfigUpdateWithoutTournamentInput, ScoreConfigUncheckedUpdateWithoutTournamentInput>
    create: XOR<ScoreConfigCreateWithoutTournamentInput, ScoreConfigUncheckedCreateWithoutTournamentInput>
  }

  export type ScoreConfigUpdateWithWhereUniqueWithoutTournamentInput = {
    where: ScoreConfigWhereUniqueInput
    data: XOR<ScoreConfigUpdateWithoutTournamentInput, ScoreConfigUncheckedUpdateWithoutTournamentInput>
  }

  export type ScoreConfigUpdateManyWithWhereWithoutTournamentInput = {
    where: ScoreConfigScalarWhereInput
    data: XOR<ScoreConfigUpdateManyMutationInput, ScoreConfigUncheckedUpdateManyWithoutTournamentInput>
  }

  export type ScoreConfigScalarWhereInput = {
    AND?: ScoreConfigScalarWhereInput | ScoreConfigScalarWhereInput[]
    OR?: ScoreConfigScalarWhereInput[]
    NOT?: ScoreConfigScalarWhereInput | ScoreConfigScalarWhereInput[]
    id?: StringFilter<"ScoreConfig"> | string
    tournamentId?: StringFilter<"ScoreConfig"> | string
    name?: StringFilter<"ScoreConfig"> | string
    description?: StringNullableFilter<"ScoreConfig"> | string | null
    createdAt?: DateTimeFilter<"ScoreConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScoreConfig"> | Date | string
  }

  export type TournamentCreateWithoutStagesInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutStagesInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutStagesInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutStagesInput, TournamentUncheckedCreateWithoutStagesInput>
  }

  export type MatchCreateWithoutStageInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutStageInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutStageInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput>
  }

  export type MatchCreateManyStageInputEnvelope = {
    data: MatchCreateManyStageInput | MatchCreateManyStageInput[]
    skipDuplicates?: boolean
  }

  export type TeamStatsCreateWithoutStageInput = {
    id?: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamStatsInput
    tournament: TournamentCreateNestedOneWithoutTeamStatsInput
  }

  export type TeamStatsUncheckedCreateWithoutStageInput = {
    id?: string
    teamId: string
    tournamentId: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsCreateOrConnectWithoutStageInput = {
    where: TeamStatsWhereUniqueInput
    create: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput>
  }

  export type TeamStatsCreateManyStageInputEnvelope = {
    data: TeamStatsCreateManyStageInput | TeamStatsCreateManyStageInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutStagesInput = {
    update: XOR<TournamentUpdateWithoutStagesInput, TournamentUncheckedUpdateWithoutStagesInput>
    create: XOR<TournamentCreateWithoutStagesInput, TournamentUncheckedCreateWithoutStagesInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutStagesInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutStagesInput, TournamentUncheckedUpdateWithoutStagesInput>
  }

  export type TournamentUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type MatchUpsertWithWhereUniqueWithoutStageInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutStageInput, MatchUncheckedUpdateWithoutStageInput>
    create: XOR<MatchCreateWithoutStageInput, MatchUncheckedCreateWithoutStageInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutStageInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutStageInput, MatchUncheckedUpdateWithoutStageInput>
  }

  export type MatchUpdateManyWithWhereWithoutStageInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutStageInput>
  }

  export type TeamStatsUpsertWithWhereUniqueWithoutStageInput = {
    where: TeamStatsWhereUniqueInput
    update: XOR<TeamStatsUpdateWithoutStageInput, TeamStatsUncheckedUpdateWithoutStageInput>
    create: XOR<TeamStatsCreateWithoutStageInput, TeamStatsUncheckedCreateWithoutStageInput>
  }

  export type TeamStatsUpdateWithWhereUniqueWithoutStageInput = {
    where: TeamStatsWhereUniqueInput
    data: XOR<TeamStatsUpdateWithoutStageInput, TeamStatsUncheckedUpdateWithoutStageInput>
  }

  export type TeamStatsUpdateManyWithWhereWithoutStageInput = {
    where: TeamStatsScalarWhereInput
    data: XOR<TeamStatsUpdateManyMutationInput, TeamStatsUncheckedUpdateManyWithoutStageInput>
  }

  export type StageCreateWithoutMatchesInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutStagesInput
    teamStats?: TeamStatsCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateWithoutMatchesInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    tournamentId: string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageCreateOrConnectWithoutMatchesInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutMatchesInput, StageUncheckedCreateWithoutMatchesInput>
  }

  export type AllianceCreateWithoutMatchInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceCreateNestedManyWithoutAllianceInput
    matchScores?: MatchScoreCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUncheckedCreateWithoutMatchInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutAllianceInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceCreateOrConnectWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput>
  }

  export type AllianceCreateManyMatchInputEnvelope = {
    data: AllianceCreateManyMatchInput | AllianceCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutScoredMatchesInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateWithoutScoredMatchesInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserCreateOrConnectWithoutScoredMatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScoredMatchesInput, UserUncheckedCreateWithoutScoredMatchesInput>
  }

  export type MatchRefereeCreateWithoutMatchInput = {
    id?: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMatchRefereesInput
  }

  export type MatchRefereeUncheckedCreateWithoutMatchInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchRefereeCreateOrConnectWithoutMatchInput = {
    where: MatchRefereeWhereUniqueInput
    create: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput>
  }

  export type MatchRefereeCreateManyMatchInputEnvelope = {
    data: MatchRefereeCreateManyMatchInput | MatchRefereeCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type FieldCreateWithoutMatchesInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutFieldsInput
    fieldDisplay?: FieldDisplayCreateNestedOneWithoutFieldInput
  }

  export type FieldUncheckedCreateWithoutMatchesInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    tournamentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fieldDisplay?: FieldDisplayUncheckedCreateNestedOneWithoutFieldInput
  }

  export type FieldCreateOrConnectWithoutMatchesInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutMatchesInput, FieldUncheckedCreateWithoutMatchesInput>
  }

  export type MatchScoreCreateWithoutMatchInput = {
    id?: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
    alliance: AllianceCreateNestedOneWithoutMatchScoresInput
    scoreElement: ScoreElementCreateNestedOneWithoutMatchScoresInput
  }

  export type MatchScoreUncheckedCreateWithoutMatchInput = {
    id?: string
    allianceId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreCreateOrConnectWithoutMatchInput = {
    where: MatchScoreWhereUniqueInput
    create: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput>
  }

  export type MatchScoreCreateManyMatchInputEnvelope = {
    data: MatchScoreCreateManyMatchInput | MatchScoreCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type FieldDisplayCreateWithoutCurrentMatchInput = {
    id?: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    field: FieldCreateNestedOneWithoutFieldDisplayInput
    lastUpdatedUser?: UserCreateNestedOneWithoutFieldDisplaysInput
  }

  export type FieldDisplayUncheckedCreateWithoutCurrentMatchInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    lastUpdatedBy?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayCreateOrConnectWithoutCurrentMatchInput = {
    where: FieldDisplayWhereUniqueInput
    create: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput>
  }

  export type FieldDisplayCreateManyCurrentMatchInputEnvelope = {
    data: FieldDisplayCreateManyCurrentMatchInput | FieldDisplayCreateManyCurrentMatchInput[]
    skipDuplicates?: boolean
  }

  export type StageUpsertWithoutMatchesInput = {
    update: XOR<StageUpdateWithoutMatchesInput, StageUncheckedUpdateWithoutMatchesInput>
    create: XOR<StageCreateWithoutMatchesInput, StageUncheckedCreateWithoutMatchesInput>
    where?: StageWhereInput
  }

  export type StageUpdateToOneWithWhereWithoutMatchesInput = {
    where?: StageWhereInput
    data: XOR<StageUpdateWithoutMatchesInput, StageUncheckedUpdateWithoutMatchesInput>
  }

  export type StageUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutStagesNestedInput
    teamStats?: TeamStatsUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamStats?: TeamStatsUncheckedUpdateManyWithoutStageNestedInput
  }

  export type AllianceUpsertWithWhereUniqueWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    update: XOR<AllianceUpdateWithoutMatchInput, AllianceUncheckedUpdateWithoutMatchInput>
    create: XOR<AllianceCreateWithoutMatchInput, AllianceUncheckedCreateWithoutMatchInput>
  }

  export type AllianceUpdateWithWhereUniqueWithoutMatchInput = {
    where: AllianceWhereUniqueInput
    data: XOR<AllianceUpdateWithoutMatchInput, AllianceUncheckedUpdateWithoutMatchInput>
  }

  export type AllianceUpdateManyWithWhereWithoutMatchInput = {
    where: AllianceScalarWhereInput
    data: XOR<AllianceUpdateManyMutationInput, AllianceUncheckedUpdateManyWithoutMatchInput>
  }

  export type AllianceScalarWhereInput = {
    AND?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
    OR?: AllianceScalarWhereInput[]
    NOT?: AllianceScalarWhereInput | AllianceScalarWhereInput[]
    id?: StringFilter<"Alliance"> | string
    color?: EnumAllianceColorFilter<"Alliance"> | $Enums.AllianceColor
    score?: IntFilter<"Alliance"> | number
    autoScore?: IntFilter<"Alliance"> | number
    driveScore?: IntFilter<"Alliance"> | number
    matchId?: StringFilter<"Alliance"> | string
    createdAt?: DateTimeFilter<"Alliance"> | Date | string
    updatedAt?: DateTimeFilter<"Alliance"> | Date | string
  }

  export type UserUpsertWithoutScoredMatchesInput = {
    update: XOR<UserUpdateWithoutScoredMatchesInput, UserUncheckedUpdateWithoutScoredMatchesInput>
    create: XOR<UserCreateWithoutScoredMatchesInput, UserUncheckedCreateWithoutScoredMatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScoredMatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScoredMatchesInput, UserUncheckedUpdateWithoutScoredMatchesInput>
  }

  export type UserUpdateWithoutScoredMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScoredMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type MatchRefereeUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchRefereeWhereUniqueInput
    update: XOR<MatchRefereeUpdateWithoutMatchInput, MatchRefereeUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchRefereeCreateWithoutMatchInput, MatchRefereeUncheckedCreateWithoutMatchInput>
  }

  export type MatchRefereeUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchRefereeWhereUniqueInput
    data: XOR<MatchRefereeUpdateWithoutMatchInput, MatchRefereeUncheckedUpdateWithoutMatchInput>
  }

  export type MatchRefereeUpdateManyWithWhereWithoutMatchInput = {
    where: MatchRefereeScalarWhereInput
    data: XOR<MatchRefereeUpdateManyMutationInput, MatchRefereeUncheckedUpdateManyWithoutMatchInput>
  }

  export type FieldUpsertWithoutMatchesInput = {
    update: XOR<FieldUpdateWithoutMatchesInput, FieldUncheckedUpdateWithoutMatchesInput>
    create: XOR<FieldCreateWithoutMatchesInput, FieldUncheckedCreateWithoutMatchesInput>
    where?: FieldWhereInput
  }

  export type FieldUpdateToOneWithWhereWithoutMatchesInput = {
    where?: FieldWhereInput
    data: XOR<FieldUpdateWithoutMatchesInput, FieldUncheckedUpdateWithoutMatchesInput>
  }

  export type FieldUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutFieldsNestedInput
    fieldDisplay?: FieldDisplayUpdateOneWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fieldDisplay?: FieldDisplayUncheckedUpdateOneWithoutFieldNestedInput
  }

  export type MatchScoreUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchScoreWhereUniqueInput
    update: XOR<MatchScoreUpdateWithoutMatchInput, MatchScoreUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchScoreCreateWithoutMatchInput, MatchScoreUncheckedCreateWithoutMatchInput>
  }

  export type MatchScoreUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchScoreWhereUniqueInput
    data: XOR<MatchScoreUpdateWithoutMatchInput, MatchScoreUncheckedUpdateWithoutMatchInput>
  }

  export type MatchScoreUpdateManyWithWhereWithoutMatchInput = {
    where: MatchScoreScalarWhereInput
    data: XOR<MatchScoreUpdateManyMutationInput, MatchScoreUncheckedUpdateManyWithoutMatchInput>
  }

  export type MatchScoreScalarWhereInput = {
    AND?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
    OR?: MatchScoreScalarWhereInput[]
    NOT?: MatchScoreScalarWhereInput | MatchScoreScalarWhereInput[]
    id?: StringFilter<"MatchScore"> | string
    matchId?: StringFilter<"MatchScore"> | string
    allianceId?: StringFilter<"MatchScore"> | string
    scoreElementId?: StringFilter<"MatchScore"> | string
    units?: IntFilter<"MatchScore"> | number
    totalPoints?: IntFilter<"MatchScore"> | number
    createdAt?: DateTimeFilter<"MatchScore"> | Date | string
    updatedAt?: DateTimeFilter<"MatchScore"> | Date | string
  }

  export type FieldDisplayUpsertWithWhereUniqueWithoutCurrentMatchInput = {
    where: FieldDisplayWhereUniqueInput
    update: XOR<FieldDisplayUpdateWithoutCurrentMatchInput, FieldDisplayUncheckedUpdateWithoutCurrentMatchInput>
    create: XOR<FieldDisplayCreateWithoutCurrentMatchInput, FieldDisplayUncheckedCreateWithoutCurrentMatchInput>
  }

  export type FieldDisplayUpdateWithWhereUniqueWithoutCurrentMatchInput = {
    where: FieldDisplayWhereUniqueInput
    data: XOR<FieldDisplayUpdateWithoutCurrentMatchInput, FieldDisplayUncheckedUpdateWithoutCurrentMatchInput>
  }

  export type FieldDisplayUpdateManyWithWhereWithoutCurrentMatchInput = {
    where: FieldDisplayScalarWhereInput
    data: XOR<FieldDisplayUpdateManyMutationInput, FieldDisplayUncheckedUpdateManyWithoutCurrentMatchInput>
  }

  export type MatchCreateWithoutRefereesInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutRefereesInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutRefereesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutRefereesInput, MatchUncheckedCreateWithoutRefereesInput>
  }

  export type UserCreateWithoutMatchRefereesInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserUncheckedCreateWithoutMatchRefereesInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutLastUpdatedUserInput
  }

  export type UserCreateOrConnectWithoutMatchRefereesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchRefereesInput, UserUncheckedCreateWithoutMatchRefereesInput>
  }

  export type MatchUpsertWithoutRefereesInput = {
    update: XOR<MatchUpdateWithoutRefereesInput, MatchUncheckedUpdateWithoutRefereesInput>
    create: XOR<MatchCreateWithoutRefereesInput, MatchUncheckedCreateWithoutRefereesInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutRefereesInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutRefereesInput, MatchUncheckedUpdateWithoutRefereesInput>
  }

  export type MatchUpdateWithoutRefereesInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutRefereesInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type UserUpsertWithoutMatchRefereesInput = {
    update: XOR<UserUpdateWithoutMatchRefereesInput, UserUncheckedUpdateWithoutMatchRefereesInput>
    create: XOR<UserCreateWithoutMatchRefereesInput, UserUncheckedCreateWithoutMatchRefereesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchRefereesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchRefereesInput, UserUncheckedUpdateWithoutMatchRefereesInput>
  }

  export type UserUpdateWithoutMatchRefereesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchRefereesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type MatchCreateWithoutAlliancesInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutAlliancesInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutAlliancesInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
  }

  export type TeamAllianceCreateWithoutAllianceInput = {
    id?: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutTeamAlliancesInput
  }

  export type TeamAllianceUncheckedCreateWithoutAllianceInput = {
    id?: string
    teamId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceCreateOrConnectWithoutAllianceInput = {
    where: TeamAllianceWhereUniqueInput
    create: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput>
  }

  export type TeamAllianceCreateManyAllianceInputEnvelope = {
    data: TeamAllianceCreateManyAllianceInput | TeamAllianceCreateManyAllianceInput[]
    skipDuplicates?: boolean
  }

  export type MatchScoreCreateWithoutAllianceInput = {
    id?: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutMatchScoresInput
    scoreElement: ScoreElementCreateNestedOneWithoutMatchScoresInput
  }

  export type MatchScoreUncheckedCreateWithoutAllianceInput = {
    id?: string
    matchId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreCreateOrConnectWithoutAllianceInput = {
    where: MatchScoreWhereUniqueInput
    create: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput>
  }

  export type MatchScoreCreateManyAllianceInputEnvelope = {
    data: MatchScoreCreateManyAllianceInput | MatchScoreCreateManyAllianceInput[]
    skipDuplicates?: boolean
  }

  export type MatchUpsertWithoutAlliancesInput = {
    update: XOR<MatchUpdateWithoutAlliancesInput, MatchUncheckedUpdateWithoutAlliancesInput>
    create: XOR<MatchCreateWithoutAlliancesInput, MatchUncheckedCreateWithoutAlliancesInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutAlliancesInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutAlliancesInput, MatchUncheckedUpdateWithoutAlliancesInput>
  }

  export type MatchUpdateWithoutAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type TeamAllianceUpsertWithWhereUniqueWithoutAllianceInput = {
    where: TeamAllianceWhereUniqueInput
    update: XOR<TeamAllianceUpdateWithoutAllianceInput, TeamAllianceUncheckedUpdateWithoutAllianceInput>
    create: XOR<TeamAllianceCreateWithoutAllianceInput, TeamAllianceUncheckedCreateWithoutAllianceInput>
  }

  export type TeamAllianceUpdateWithWhereUniqueWithoutAllianceInput = {
    where: TeamAllianceWhereUniqueInput
    data: XOR<TeamAllianceUpdateWithoutAllianceInput, TeamAllianceUncheckedUpdateWithoutAllianceInput>
  }

  export type TeamAllianceUpdateManyWithWhereWithoutAllianceInput = {
    where: TeamAllianceScalarWhereInput
    data: XOR<TeamAllianceUpdateManyMutationInput, TeamAllianceUncheckedUpdateManyWithoutAllianceInput>
  }

  export type TeamAllianceScalarWhereInput = {
    AND?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
    OR?: TeamAllianceScalarWhereInput[]
    NOT?: TeamAllianceScalarWhereInput | TeamAllianceScalarWhereInput[]
    id?: StringFilter<"TeamAlliance"> | string
    teamId?: StringFilter<"TeamAlliance"> | string
    allianceId?: StringFilter<"TeamAlliance"> | string
    stationPosition?: IntFilter<"TeamAlliance"> | number
    isSurrogate?: BoolFilter<"TeamAlliance"> | boolean
    createdAt?: DateTimeFilter<"TeamAlliance"> | Date | string
    updatedAt?: DateTimeFilter<"TeamAlliance"> | Date | string
  }

  export type MatchScoreUpsertWithWhereUniqueWithoutAllianceInput = {
    where: MatchScoreWhereUniqueInput
    update: XOR<MatchScoreUpdateWithoutAllianceInput, MatchScoreUncheckedUpdateWithoutAllianceInput>
    create: XOR<MatchScoreCreateWithoutAllianceInput, MatchScoreUncheckedCreateWithoutAllianceInput>
  }

  export type MatchScoreUpdateWithWhereUniqueWithoutAllianceInput = {
    where: MatchScoreWhereUniqueInput
    data: XOR<MatchScoreUpdateWithoutAllianceInput, MatchScoreUncheckedUpdateWithoutAllianceInput>
  }

  export type MatchScoreUpdateManyWithWhereWithoutAllianceInput = {
    where: MatchScoreScalarWhereInput
    data: XOR<MatchScoreUpdateManyMutationInput, MatchScoreUncheckedUpdateManyWithoutAllianceInput>
  }

  export type TournamentCreateWithoutTeamsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    stages?: StageCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutTeamsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutTeamsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutTeamsInput, TournamentUncheckedCreateWithoutTeamsInput>
  }

  export type TeamAllianceCreateWithoutTeamInput = {
    id?: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    alliance: AllianceCreateNestedOneWithoutTeamAlliancesInput
  }

  export type TeamAllianceUncheckedCreateWithoutTeamInput = {
    id?: string
    allianceId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceCreateOrConnectWithoutTeamInput = {
    where: TeamAllianceWhereUniqueInput
    create: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput>
  }

  export type TeamAllianceCreateManyTeamInputEnvelope = {
    data: TeamAllianceCreateManyTeamInput | TeamAllianceCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamStatsCreateWithoutTeamInput = {
    id?: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutTeamStatsInput
    stage?: StageCreateNestedOneWithoutTeamStatsInput
  }

  export type TeamStatsUncheckedCreateWithoutTeamInput = {
    id?: string
    tournamentId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsCreateOrConnectWithoutTeamInput = {
    where: TeamStatsWhereUniqueInput
    create: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput>
  }

  export type TeamStatsCreateManyTeamInputEnvelope = {
    data: TeamStatsCreateManyTeamInput | TeamStatsCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutTeamsInput = {
    update: XOR<TournamentUpdateWithoutTeamsInput, TournamentUncheckedUpdateWithoutTeamsInput>
    create: XOR<TournamentCreateWithoutTeamsInput, TournamentUncheckedCreateWithoutTeamsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutTeamsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutTeamsInput, TournamentUncheckedUpdateWithoutTeamsInput>
  }

  export type TournamentUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutTeamsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TeamAllianceUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamAllianceWhereUniqueInput
    update: XOR<TeamAllianceUpdateWithoutTeamInput, TeamAllianceUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamAllianceCreateWithoutTeamInput, TeamAllianceUncheckedCreateWithoutTeamInput>
  }

  export type TeamAllianceUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamAllianceWhereUniqueInput
    data: XOR<TeamAllianceUpdateWithoutTeamInput, TeamAllianceUncheckedUpdateWithoutTeamInput>
  }

  export type TeamAllianceUpdateManyWithWhereWithoutTeamInput = {
    where: TeamAllianceScalarWhereInput
    data: XOR<TeamAllianceUpdateManyMutationInput, TeamAllianceUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamStatsUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamStatsWhereUniqueInput
    update: XOR<TeamStatsUpdateWithoutTeamInput, TeamStatsUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamStatsCreateWithoutTeamInput, TeamStatsUncheckedCreateWithoutTeamInput>
  }

  export type TeamStatsUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamStatsWhereUniqueInput
    data: XOR<TeamStatsUpdateWithoutTeamInput, TeamStatsUncheckedUpdateWithoutTeamInput>
  }

  export type TeamStatsUpdateManyWithWhereWithoutTeamInput = {
    where: TeamStatsScalarWhereInput
    data: XOR<TeamStatsUpdateManyMutationInput, TeamStatsUncheckedUpdateManyWithoutTeamInput>
  }

  export type TeamCreateWithoutTeamAlliancesInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament?: TournamentCreateNestedOneWithoutTeamsInput
    teamStats?: TeamStatsCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutTeamAlliancesInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutTeamAlliancesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamAlliancesInput, TeamUncheckedCreateWithoutTeamAlliancesInput>
  }

  export type AllianceCreateWithoutTeamAlliancesInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutAlliancesInput
    matchScores?: MatchScoreCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUncheckedCreateWithoutTeamAlliancesInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    matchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceCreateOrConnectWithoutTeamAlliancesInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutTeamAlliancesInput, AllianceUncheckedCreateWithoutTeamAlliancesInput>
  }

  export type TeamUpsertWithoutTeamAlliancesInput = {
    update: XOR<TeamUpdateWithoutTeamAlliancesInput, TeamUncheckedUpdateWithoutTeamAlliancesInput>
    create: XOR<TeamCreateWithoutTeamAlliancesInput, TeamUncheckedCreateWithoutTeamAlliancesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamAlliancesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamAlliancesInput, TeamUncheckedUpdateWithoutTeamAlliancesInput>
  }

  export type TeamUpdateWithoutTeamAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneWithoutTeamsNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type AllianceUpsertWithoutTeamAlliancesInput = {
    update: XOR<AllianceUpdateWithoutTeamAlliancesInput, AllianceUncheckedUpdateWithoutTeamAlliancesInput>
    create: XOR<AllianceCreateWithoutTeamAlliancesInput, AllianceUncheckedCreateWithoutTeamAlliancesInput>
    where?: AllianceWhereInput
  }

  export type AllianceUpdateToOneWithWhereWithoutTeamAlliancesInput = {
    where?: AllianceWhereInput
    data: XOR<AllianceUpdateWithoutTeamAlliancesInput, AllianceUncheckedUpdateWithoutTeamAlliancesInput>
  }

  export type AllianceUpdateWithoutTeamAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateWithoutTeamAlliancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matchScores?: MatchScoreUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type TeamCreateWithoutTeamStatsInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament?: TournamentCreateNestedOneWithoutTeamsInput
    teamAlliances?: TeamAllianceCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutTeamStatsInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutTeamStatsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutTeamStatsInput, TeamUncheckedCreateWithoutTeamStatsInput>
  }

  export type TournamentCreateWithoutTeamStatsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    stages?: StageCreateNestedManyWithoutTournamentInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutTeamStatsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutTeamStatsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutTeamStatsInput, TournamentUncheckedCreateWithoutTeamStatsInput>
  }

  export type StageCreateWithoutTeamStatsInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutStagesInput
    matches?: MatchCreateNestedManyWithoutStageInput
  }

  export type StageUncheckedCreateWithoutTeamStatsInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    tournamentId: string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutStageInput
  }

  export type StageCreateOrConnectWithoutTeamStatsInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutTeamStatsInput, StageUncheckedCreateWithoutTeamStatsInput>
  }

  export type TeamUpsertWithoutTeamStatsInput = {
    update: XOR<TeamUpdateWithoutTeamStatsInput, TeamUncheckedUpdateWithoutTeamStatsInput>
    create: XOR<TeamCreateWithoutTeamStatsInput, TeamUncheckedCreateWithoutTeamStatsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutTeamStatsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutTeamStatsInput, TeamUncheckedUpdateWithoutTeamStatsInput>
  }

  export type TeamUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneWithoutTeamsNestedInput
    teamAlliances?: TeamAllianceUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    tournamentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TournamentUpsertWithoutTeamStatsInput = {
    update: XOR<TournamentUpdateWithoutTeamStatsInput, TournamentUncheckedUpdateWithoutTeamStatsInput>
    create: XOR<TournamentCreateWithoutTeamStatsInput, TournamentUncheckedCreateWithoutTeamStatsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutTeamStatsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutTeamStatsInput, TournamentUncheckedUpdateWithoutTeamStatsInput>
  }

  export type TournamentUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type StageUpsertWithoutTeamStatsInput = {
    update: XOR<StageUpdateWithoutTeamStatsInput, StageUncheckedUpdateWithoutTeamStatsInput>
    create: XOR<StageCreateWithoutTeamStatsInput, StageUncheckedCreateWithoutTeamStatsInput>
    where?: StageWhereInput
  }

  export type StageUpdateToOneWithWhereWithoutTeamStatsInput = {
    where?: StageWhereInput
    data: XOR<StageUpdateWithoutTeamStatsInput, StageUncheckedUpdateWithoutTeamStatsInput>
  }

  export type StageUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutStagesNestedInput
    matches?: MatchUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateWithoutTeamStatsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutStageNestedInput
  }

  export type TournamentCreateWithoutFieldsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    stages?: StageCreateNestedManyWithoutTournamentInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutFieldsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    scoreConfigs?: ScoreConfigUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutFieldsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutFieldsInput, TournamentUncheckedCreateWithoutFieldsInput>
  }

  export type MatchCreateWithoutFieldInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutFieldInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutFieldInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput>
  }

  export type MatchCreateManyFieldInputEnvelope = {
    data: MatchCreateManyFieldInput | MatchCreateManyFieldInput[]
    skipDuplicates?: boolean
  }

  export type FieldDisplayCreateWithoutFieldInput = {
    id?: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentMatch?: MatchCreateNestedOneWithoutFieldDisplaysInput
    lastUpdatedUser?: UserCreateNestedOneWithoutFieldDisplaysInput
  }

  export type FieldDisplayUncheckedCreateWithoutFieldInput = {
    id?: string
    displayState?: $Enums.DisplayState
    currentMatchId?: string | null
    customMessage?: string | null
    lastUpdatedBy?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayCreateOrConnectWithoutFieldInput = {
    where: FieldDisplayWhereUniqueInput
    create: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
  }

  export type TournamentUpsertWithoutFieldsInput = {
    update: XOR<TournamentUpdateWithoutFieldsInput, TournamentUncheckedUpdateWithoutFieldsInput>
    create: XOR<TournamentCreateWithoutFieldsInput, TournamentUncheckedCreateWithoutFieldsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutFieldsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutFieldsInput, TournamentUncheckedUpdateWithoutFieldsInput>
  }

  export type TournamentUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type MatchUpsertWithWhereUniqueWithoutFieldInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutFieldInput, MatchUncheckedUpdateWithoutFieldInput>
    create: XOR<MatchCreateWithoutFieldInput, MatchUncheckedCreateWithoutFieldInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutFieldInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutFieldInput, MatchUncheckedUpdateWithoutFieldInput>
  }

  export type MatchUpdateManyWithWhereWithoutFieldInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutFieldInput>
  }

  export type FieldDisplayUpsertWithoutFieldInput = {
    update: XOR<FieldDisplayUpdateWithoutFieldInput, FieldDisplayUncheckedUpdateWithoutFieldInput>
    create: XOR<FieldDisplayCreateWithoutFieldInput, FieldDisplayUncheckedCreateWithoutFieldInput>
    where?: FieldDisplayWhereInput
  }

  export type FieldDisplayUpdateToOneWithWhereWithoutFieldInput = {
    where?: FieldDisplayWhereInput
    data: XOR<FieldDisplayUpdateWithoutFieldInput, FieldDisplayUncheckedUpdateWithoutFieldInput>
  }

  export type FieldDisplayUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentMatch?: MatchUpdateOneWithoutFieldDisplaysNestedInput
    lastUpdatedUser?: UserUpdateOneWithoutFieldDisplaysNestedInput
  }

  export type FieldDisplayUncheckedUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    currentMatchId?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldCreateWithoutFieldDisplayInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutFieldsInput
    matches?: MatchCreateNestedManyWithoutFieldInput
  }

  export type FieldUncheckedCreateWithoutFieldDisplayInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    tournamentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    matches?: MatchUncheckedCreateNestedManyWithoutFieldInput
  }

  export type FieldCreateOrConnectWithoutFieldDisplayInput = {
    where: FieldWhereUniqueInput
    create: XOR<FieldCreateWithoutFieldDisplayInput, FieldUncheckedCreateWithoutFieldDisplayInput>
  }

  export type MatchCreateWithoutFieldDisplaysInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    matchScores?: MatchScoreCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutFieldDisplaysInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutFieldDisplaysInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutFieldDisplaysInput, MatchUncheckedCreateWithoutFieldDisplaysInput>
  }

  export type UserCreateWithoutFieldDisplaysInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFieldDisplaysInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    tournaments?: TournamentUncheckedCreateNestedManyWithoutAdminInput
    scoredMatches?: MatchUncheckedCreateNestedManyWithoutScoredByInput
    matchReferees?: MatchRefereeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFieldDisplaysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFieldDisplaysInput, UserUncheckedCreateWithoutFieldDisplaysInput>
  }

  export type FieldUpsertWithoutFieldDisplayInput = {
    update: XOR<FieldUpdateWithoutFieldDisplayInput, FieldUncheckedUpdateWithoutFieldDisplayInput>
    create: XOR<FieldCreateWithoutFieldDisplayInput, FieldUncheckedCreateWithoutFieldDisplayInput>
    where?: FieldWhereInput
  }

  export type FieldUpdateToOneWithWhereWithoutFieldDisplayInput = {
    where?: FieldWhereInput
    data: XOR<FieldUpdateWithoutFieldDisplayInput, FieldUncheckedUpdateWithoutFieldDisplayInput>
  }

  export type FieldUpdateWithoutFieldDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutFieldsNestedInput
    matches?: MatchUpdateManyWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateWithoutFieldDisplayInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tournamentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutFieldNestedInput
  }

  export type MatchUpsertWithoutFieldDisplaysInput = {
    update: XOR<MatchUpdateWithoutFieldDisplaysInput, MatchUncheckedUpdateWithoutFieldDisplaysInput>
    create: XOR<MatchCreateWithoutFieldDisplaysInput, MatchUncheckedCreateWithoutFieldDisplaysInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutFieldDisplaysInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutFieldDisplaysInput, MatchUncheckedUpdateWithoutFieldDisplaysInput>
  }

  export type MatchUpdateWithoutFieldDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutFieldDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type UserUpsertWithoutFieldDisplaysInput = {
    update: XOR<UserUpdateWithoutFieldDisplaysInput, UserUncheckedUpdateWithoutFieldDisplaysInput>
    create: XOR<UserCreateWithoutFieldDisplaysInput, UserUncheckedCreateWithoutFieldDisplaysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFieldDisplaysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFieldDisplaysInput, UserUncheckedUpdateWithoutFieldDisplaysInput>
  }

  export type UserUpdateWithoutFieldDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFieldDisplaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TournamentCreateWithoutScoreConfigsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
    admin: UserCreateNestedOneWithoutTournamentsInput
    stages?: StageCreateNestedManyWithoutTournamentInput
    teams?: TeamCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsCreateNestedManyWithoutTournamentInput
    fields?: FieldCreateNestedManyWithoutTournamentInput
  }

  export type TournamentUncheckedCreateWithoutScoreConfigsInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminId: string
    numberOfFields?: number
    stages?: StageUncheckedCreateNestedManyWithoutTournamentInput
    teams?: TeamUncheckedCreateNestedManyWithoutTournamentInput
    teamStats?: TeamStatsUncheckedCreateNestedManyWithoutTournamentInput
    fields?: FieldUncheckedCreateNestedManyWithoutTournamentInput
  }

  export type TournamentCreateOrConnectWithoutScoreConfigsInput = {
    where: TournamentWhereUniqueInput
    create: XOR<TournamentCreateWithoutScoreConfigsInput, TournamentUncheckedCreateWithoutScoreConfigsInput>
  }

  export type ScoreElementCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
    matchScores?: MatchScoreCreateNestedManyWithoutScoreElementInput
  }

  export type ScoreElementUncheckedCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
    matchScores?: MatchScoreUncheckedCreateNestedManyWithoutScoreElementInput
  }

  export type ScoreElementCreateOrConnectWithoutScoreConfigInput = {
    where: ScoreElementWhereUniqueInput
    create: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput>
  }

  export type ScoreElementCreateManyScoreConfigInputEnvelope = {
    data: ScoreElementCreateManyScoreConfigInput | ScoreElementCreateManyScoreConfigInput[]
    skipDuplicates?: boolean
  }

  export type BonusConditionCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type BonusConditionUncheckedCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type BonusConditionCreateOrConnectWithoutScoreConfigInput = {
    where: BonusConditionWhereUniqueInput
    create: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput>
  }

  export type BonusConditionCreateManyScoreConfigInputEnvelope = {
    data: BonusConditionCreateManyScoreConfigInput | BonusConditionCreateManyScoreConfigInput[]
    skipDuplicates?: boolean
  }

  export type PenaltyConditionCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type PenaltyConditionUncheckedCreateWithoutScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type PenaltyConditionCreateOrConnectWithoutScoreConfigInput = {
    where: PenaltyConditionWhereUniqueInput
    create: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput>
  }

  export type PenaltyConditionCreateManyScoreConfigInputEnvelope = {
    data: PenaltyConditionCreateManyScoreConfigInput | PenaltyConditionCreateManyScoreConfigInput[]
    skipDuplicates?: boolean
  }

  export type TournamentUpsertWithoutScoreConfigsInput = {
    update: XOR<TournamentUpdateWithoutScoreConfigsInput, TournamentUncheckedUpdateWithoutScoreConfigsInput>
    create: XOR<TournamentCreateWithoutScoreConfigsInput, TournamentUncheckedCreateWithoutScoreConfigsInput>
    where?: TournamentWhereInput
  }

  export type TournamentUpdateToOneWithWhereWithoutScoreConfigsInput = {
    where?: TournamentWhereInput
    data: XOR<TournamentUpdateWithoutScoreConfigsInput, TournamentUncheckedUpdateWithoutScoreConfigsInput>
  }

  export type TournamentUpdateWithoutScoreConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    admin?: UserUpdateOneRequiredWithoutTournamentsNestedInput
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutScoreConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminId?: StringFieldUpdateOperationsInput | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type ScoreElementUpsertWithWhereUniqueWithoutScoreConfigInput = {
    where: ScoreElementWhereUniqueInput
    update: XOR<ScoreElementUpdateWithoutScoreConfigInput, ScoreElementUncheckedUpdateWithoutScoreConfigInput>
    create: XOR<ScoreElementCreateWithoutScoreConfigInput, ScoreElementUncheckedCreateWithoutScoreConfigInput>
  }

  export type ScoreElementUpdateWithWhereUniqueWithoutScoreConfigInput = {
    where: ScoreElementWhereUniqueInput
    data: XOR<ScoreElementUpdateWithoutScoreConfigInput, ScoreElementUncheckedUpdateWithoutScoreConfigInput>
  }

  export type ScoreElementUpdateManyWithWhereWithoutScoreConfigInput = {
    where: ScoreElementScalarWhereInput
    data: XOR<ScoreElementUpdateManyMutationInput, ScoreElementUncheckedUpdateManyWithoutScoreConfigInput>
  }

  export type ScoreElementScalarWhereInput = {
    AND?: ScoreElementScalarWhereInput | ScoreElementScalarWhereInput[]
    OR?: ScoreElementScalarWhereInput[]
    NOT?: ScoreElementScalarWhereInput | ScoreElementScalarWhereInput[]
    id?: StringFilter<"ScoreElement"> | string
    scoreConfigId?: StringFilter<"ScoreElement"> | string
    name?: StringFilter<"ScoreElement"> | string
    code?: StringFilter<"ScoreElement"> | string
    description?: StringNullableFilter<"ScoreElement"> | string | null
    pointsPerUnit?: IntFilter<"ScoreElement"> | number
    category?: StringNullableFilter<"ScoreElement"> | string | null
    elementType?: EnumElementTypeFilter<"ScoreElement"> | $Enums.ElementType
    displayOrder?: IntFilter<"ScoreElement"> | number
    icon?: StringNullableFilter<"ScoreElement"> | string | null
    color?: StringNullableFilter<"ScoreElement"> | string | null
  }

  export type BonusConditionUpsertWithWhereUniqueWithoutScoreConfigInput = {
    where: BonusConditionWhereUniqueInput
    update: XOR<BonusConditionUpdateWithoutScoreConfigInput, BonusConditionUncheckedUpdateWithoutScoreConfigInput>
    create: XOR<BonusConditionCreateWithoutScoreConfigInput, BonusConditionUncheckedCreateWithoutScoreConfigInput>
  }

  export type BonusConditionUpdateWithWhereUniqueWithoutScoreConfigInput = {
    where: BonusConditionWhereUniqueInput
    data: XOR<BonusConditionUpdateWithoutScoreConfigInput, BonusConditionUncheckedUpdateWithoutScoreConfigInput>
  }

  export type BonusConditionUpdateManyWithWhereWithoutScoreConfigInput = {
    where: BonusConditionScalarWhereInput
    data: XOR<BonusConditionUpdateManyMutationInput, BonusConditionUncheckedUpdateManyWithoutScoreConfigInput>
  }

  export type BonusConditionScalarWhereInput = {
    AND?: BonusConditionScalarWhereInput | BonusConditionScalarWhereInput[]
    OR?: BonusConditionScalarWhereInput[]
    NOT?: BonusConditionScalarWhereInput | BonusConditionScalarWhereInput[]
    id?: StringFilter<"BonusCondition"> | string
    scoreConfigId?: StringFilter<"BonusCondition"> | string
    name?: StringFilter<"BonusCondition"> | string
    code?: StringFilter<"BonusCondition"> | string
    description?: StringNullableFilter<"BonusCondition"> | string | null
    bonusPoints?: IntFilter<"BonusCondition"> | number
    condition?: JsonFilter<"BonusCondition">
    displayOrder?: IntFilter<"BonusCondition"> | number
  }

  export type PenaltyConditionUpsertWithWhereUniqueWithoutScoreConfigInput = {
    where: PenaltyConditionWhereUniqueInput
    update: XOR<PenaltyConditionUpdateWithoutScoreConfigInput, PenaltyConditionUncheckedUpdateWithoutScoreConfigInput>
    create: XOR<PenaltyConditionCreateWithoutScoreConfigInput, PenaltyConditionUncheckedCreateWithoutScoreConfigInput>
  }

  export type PenaltyConditionUpdateWithWhereUniqueWithoutScoreConfigInput = {
    where: PenaltyConditionWhereUniqueInput
    data: XOR<PenaltyConditionUpdateWithoutScoreConfigInput, PenaltyConditionUncheckedUpdateWithoutScoreConfigInput>
  }

  export type PenaltyConditionUpdateManyWithWhereWithoutScoreConfigInput = {
    where: PenaltyConditionScalarWhereInput
    data: XOR<PenaltyConditionUpdateManyMutationInput, PenaltyConditionUncheckedUpdateManyWithoutScoreConfigInput>
  }

  export type PenaltyConditionScalarWhereInput = {
    AND?: PenaltyConditionScalarWhereInput | PenaltyConditionScalarWhereInput[]
    OR?: PenaltyConditionScalarWhereInput[]
    NOT?: PenaltyConditionScalarWhereInput | PenaltyConditionScalarWhereInput[]
    id?: StringFilter<"PenaltyCondition"> | string
    scoreConfigId?: StringFilter<"PenaltyCondition"> | string
    name?: StringFilter<"PenaltyCondition"> | string
    code?: StringFilter<"PenaltyCondition"> | string
    description?: StringNullableFilter<"PenaltyCondition"> | string | null
    penaltyPoints?: IntFilter<"PenaltyCondition"> | number
    condition?: JsonFilter<"PenaltyCondition">
    displayOrder?: IntFilter<"PenaltyCondition"> | number
  }

  export type ScoreConfigCreateWithoutScoreElementsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutScoreConfigsInput
    bonusConditions?: BonusConditionCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUncheckedCreateWithoutScoreElementsInput = {
    id?: string
    tournamentId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bonusConditions?: BonusConditionUncheckedCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionUncheckedCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigCreateOrConnectWithoutScoreElementsInput = {
    where: ScoreConfigWhereUniqueInput
    create: XOR<ScoreConfigCreateWithoutScoreElementsInput, ScoreConfigUncheckedCreateWithoutScoreElementsInput>
  }

  export type MatchScoreCreateWithoutScoreElementInput = {
    id?: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutMatchScoresInput
    alliance: AllianceCreateNestedOneWithoutMatchScoresInput
  }

  export type MatchScoreUncheckedCreateWithoutScoreElementInput = {
    id?: string
    matchId: string
    allianceId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreCreateOrConnectWithoutScoreElementInput = {
    where: MatchScoreWhereUniqueInput
    create: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput>
  }

  export type MatchScoreCreateManyScoreElementInputEnvelope = {
    data: MatchScoreCreateManyScoreElementInput | MatchScoreCreateManyScoreElementInput[]
    skipDuplicates?: boolean
  }

  export type ScoreConfigUpsertWithoutScoreElementsInput = {
    update: XOR<ScoreConfigUpdateWithoutScoreElementsInput, ScoreConfigUncheckedUpdateWithoutScoreElementsInput>
    create: XOR<ScoreConfigCreateWithoutScoreElementsInput, ScoreConfigUncheckedCreateWithoutScoreElementsInput>
    where?: ScoreConfigWhereInput
  }

  export type ScoreConfigUpdateToOneWithWhereWithoutScoreElementsInput = {
    where?: ScoreConfigWhereInput
    data: XOR<ScoreConfigUpdateWithoutScoreElementsInput, ScoreConfigUncheckedUpdateWithoutScoreElementsInput>
  }

  export type ScoreConfigUpdateWithoutScoreElementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutScoreConfigsNestedInput
    bonusConditions?: BonusConditionUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateWithoutScoreElementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bonusConditions?: BonusConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
  }

  export type MatchScoreUpsertWithWhereUniqueWithoutScoreElementInput = {
    where: MatchScoreWhereUniqueInput
    update: XOR<MatchScoreUpdateWithoutScoreElementInput, MatchScoreUncheckedUpdateWithoutScoreElementInput>
    create: XOR<MatchScoreCreateWithoutScoreElementInput, MatchScoreUncheckedCreateWithoutScoreElementInput>
  }

  export type MatchScoreUpdateWithWhereUniqueWithoutScoreElementInput = {
    where: MatchScoreWhereUniqueInput
    data: XOR<MatchScoreUpdateWithoutScoreElementInput, MatchScoreUncheckedUpdateWithoutScoreElementInput>
  }

  export type MatchScoreUpdateManyWithWhereWithoutScoreElementInput = {
    where: MatchScoreScalarWhereInput
    data: XOR<MatchScoreUpdateManyMutationInput, MatchScoreUncheckedUpdateManyWithoutScoreElementInput>
  }

  export type ScoreConfigCreateWithoutBonusConditionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutScoreConfigsInput
    scoreElements?: ScoreElementCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUncheckedCreateWithoutBonusConditionsInput = {
    id?: string
    tournamentId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreElements?: ScoreElementUncheckedCreateNestedManyWithoutScoreConfigInput
    penaltyConditions?: PenaltyConditionUncheckedCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigCreateOrConnectWithoutBonusConditionsInput = {
    where: ScoreConfigWhereUniqueInput
    create: XOR<ScoreConfigCreateWithoutBonusConditionsInput, ScoreConfigUncheckedCreateWithoutBonusConditionsInput>
  }

  export type ScoreConfigUpsertWithoutBonusConditionsInput = {
    update: XOR<ScoreConfigUpdateWithoutBonusConditionsInput, ScoreConfigUncheckedUpdateWithoutBonusConditionsInput>
    create: XOR<ScoreConfigCreateWithoutBonusConditionsInput, ScoreConfigUncheckedCreateWithoutBonusConditionsInput>
    where?: ScoreConfigWhereInput
  }

  export type ScoreConfigUpdateToOneWithWhereWithoutBonusConditionsInput = {
    where?: ScoreConfigWhereInput
    data: XOR<ScoreConfigUpdateWithoutBonusConditionsInput, ScoreConfigUncheckedUpdateWithoutBonusConditionsInput>
  }

  export type ScoreConfigUpdateWithoutBonusConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutScoreConfigsNestedInput
    scoreElements?: ScoreElementUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateWithoutBonusConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreElements?: ScoreElementUncheckedUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigCreateWithoutPenaltyConditionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tournament: TournamentCreateNestedOneWithoutScoreConfigsInput
    scoreElements?: ScoreElementCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigUncheckedCreateWithoutPenaltyConditionsInput = {
    id?: string
    tournamentId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    scoreElements?: ScoreElementUncheckedCreateNestedManyWithoutScoreConfigInput
    bonusConditions?: BonusConditionUncheckedCreateNestedManyWithoutScoreConfigInput
  }

  export type ScoreConfigCreateOrConnectWithoutPenaltyConditionsInput = {
    where: ScoreConfigWhereUniqueInput
    create: XOR<ScoreConfigCreateWithoutPenaltyConditionsInput, ScoreConfigUncheckedCreateWithoutPenaltyConditionsInput>
  }

  export type ScoreConfigUpsertWithoutPenaltyConditionsInput = {
    update: XOR<ScoreConfigUpdateWithoutPenaltyConditionsInput, ScoreConfigUncheckedUpdateWithoutPenaltyConditionsInput>
    create: XOR<ScoreConfigCreateWithoutPenaltyConditionsInput, ScoreConfigUncheckedCreateWithoutPenaltyConditionsInput>
    where?: ScoreConfigWhereInput
  }

  export type ScoreConfigUpdateToOneWithWhereWithoutPenaltyConditionsInput = {
    where?: ScoreConfigWhereInput
    data: XOR<ScoreConfigUpdateWithoutPenaltyConditionsInput, ScoreConfigUncheckedUpdateWithoutPenaltyConditionsInput>
  }

  export type ScoreConfigUpdateWithoutPenaltyConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutScoreConfigsNestedInput
    scoreElements?: ScoreElementUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateWithoutPenaltyConditionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreElements?: ScoreElementUncheckedUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
  }

  export type MatchCreateWithoutMatchScoresInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    stage: StageCreateNestedOneWithoutMatchesInput
    alliances?: AllianceCreateNestedManyWithoutMatchInput
    scoredBy?: UserCreateNestedOneWithoutScoredMatchesInput
    referees?: MatchRefereeCreateNestedManyWithoutMatchInput
    field?: FieldCreateNestedOneWithoutMatchesInput
    fieldDisplays?: FieldDisplayCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchUncheckedCreateWithoutMatchScoresInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
    alliances?: AllianceUncheckedCreateNestedManyWithoutMatchInput
    referees?: MatchRefereeUncheckedCreateNestedManyWithoutMatchInput
    fieldDisplays?: FieldDisplayUncheckedCreateNestedManyWithoutCurrentMatchInput
  }

  export type MatchCreateOrConnectWithoutMatchScoresInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutMatchScoresInput, MatchUncheckedCreateWithoutMatchScoresInput>
  }

  export type AllianceCreateWithoutMatchScoresInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    match: MatchCreateNestedOneWithoutAlliancesInput
    teamAlliances?: TeamAllianceCreateNestedManyWithoutAllianceInput
  }

  export type AllianceUncheckedCreateWithoutMatchScoresInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    matchId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    teamAlliances?: TeamAllianceUncheckedCreateNestedManyWithoutAllianceInput
  }

  export type AllianceCreateOrConnectWithoutMatchScoresInput = {
    where: AllianceWhereUniqueInput
    create: XOR<AllianceCreateWithoutMatchScoresInput, AllianceUncheckedCreateWithoutMatchScoresInput>
  }

  export type ScoreElementCreateWithoutMatchScoresInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
    scoreConfig: ScoreConfigCreateNestedOneWithoutScoreElementsInput
  }

  export type ScoreElementUncheckedCreateWithoutMatchScoresInput = {
    id?: string
    scoreConfigId: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
  }

  export type ScoreElementCreateOrConnectWithoutMatchScoresInput = {
    where: ScoreElementWhereUniqueInput
    create: XOR<ScoreElementCreateWithoutMatchScoresInput, ScoreElementUncheckedCreateWithoutMatchScoresInput>
  }

  export type MatchUpsertWithoutMatchScoresInput = {
    update: XOR<MatchUpdateWithoutMatchScoresInput, MatchUncheckedUpdateWithoutMatchScoresInput>
    create: XOR<MatchCreateWithoutMatchScoresInput, MatchUncheckedCreateWithoutMatchScoresInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutMatchScoresInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutMatchScoresInput, MatchUncheckedUpdateWithoutMatchScoresInput>
  }

  export type MatchUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type AllianceUpsertWithoutMatchScoresInput = {
    update: XOR<AllianceUpdateWithoutMatchScoresInput, AllianceUncheckedUpdateWithoutMatchScoresInput>
    create: XOR<AllianceCreateWithoutMatchScoresInput, AllianceUncheckedCreateWithoutMatchScoresInput>
    where?: AllianceWhereInput
  }

  export type AllianceUpdateToOneWithWhereWithoutMatchScoresInput = {
    where?: AllianceWhereInput
    data: XOR<AllianceUpdateWithoutMatchScoresInput, AllianceUncheckedUpdateWithoutMatchScoresInput>
  }

  export type AllianceUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutAlliancesNestedInput
    teamAlliances?: TeamAllianceUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    matchId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type ScoreElementUpsertWithoutMatchScoresInput = {
    update: XOR<ScoreElementUpdateWithoutMatchScoresInput, ScoreElementUncheckedUpdateWithoutMatchScoresInput>
    create: XOR<ScoreElementCreateWithoutMatchScoresInput, ScoreElementUncheckedCreateWithoutMatchScoresInput>
    where?: ScoreElementWhereInput
  }

  export type ScoreElementUpdateToOneWithWhereWithoutMatchScoresInput = {
    where?: ScoreElementWhereInput
    data: XOR<ScoreElementUpdateWithoutMatchScoresInput, ScoreElementUncheckedUpdateWithoutMatchScoresInput>
  }

  export type ScoreElementUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    scoreConfig?: ScoreConfigUpdateOneRequiredWithoutScoreElementsNestedInput
  }

  export type ScoreElementUncheckedUpdateWithoutMatchScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    scoreConfigId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyCreatedByInput = {
    id?: string
    username: string
    password: string
    role: $Enums.UserRole
    email?: string | null
    gender?: boolean | null
    DateOfBirth?: Date | string | null
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TournamentCreateManyAdminInput = {
    id?: string
    name: string
    description?: string | null
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    numberOfFields?: number
  }

  export type MatchCreateManyScoredByInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
  }

  export type MatchRefereeCreateManyUserInput = {
    id?: string
    matchId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayCreateManyLastUpdatedUserInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    currentMatchId?: string | null
    customMessage?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    tournaments?: TournamentUncheckedUpdateManyWithoutAdminNestedInput
    scoredMatches?: MatchUncheckedUpdateManyWithoutScoredByNestedInput
    matchReferees?: MatchRefereeUncheckedUpdateManyWithoutUserNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    email?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableBoolFieldUpdateOperationsInput | boolean | null
    DateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TournamentUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUpdateManyWithoutTournamentNestedInput
    teams?: TeamUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTournamentNestedInput
    fields?: FieldUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
    stages?: StageUncheckedUpdateManyWithoutTournamentNestedInput
    teams?: TeamUncheckedUpdateManyWithoutTournamentNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTournamentNestedInput
    fields?: FieldUncheckedUpdateManyWithoutTournamentNestedInput
    scoreConfigs?: ScoreConfigUncheckedUpdateManyWithoutTournamentNestedInput
  }

  export type TournamentUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    numberOfFields?: IntFieldUpdateOperationsInput | number
  }

  export type MatchUpdateWithoutScoredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutScoredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutScoredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutRefereesNestedInput
  }

  export type MatchRefereeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayUpdateWithoutLastUpdatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    field?: FieldUpdateOneRequiredWithoutFieldDisplayNestedInput
    currentMatch?: MatchUpdateOneWithoutFieldDisplaysNestedInput
  }

  export type FieldDisplayUncheckedUpdateWithoutLastUpdatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    currentMatchId?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayUncheckedUpdateManyWithoutLastUpdatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    currentMatchId?: NullableStringFieldUpdateOperationsInput | string | null
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageCreateManyTournamentInput = {
    id?: string
    name: string
    type: $Enums.StageType
    startDate: Date | string
    endDate: Date | string
    teamsPerAlliance?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamCreateManyTournamentInput = {
    id?: string
    teamNumber: string
    name: string
    organization?: string | null
    avatar?: string | null
    description?: string | null
    teamLead?: string | null
    teamLeadId?: string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsCreateManyTournamentInput = {
    id?: string
    teamId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldCreateManyTournamentInput = {
    id?: string
    name: string
    number: number
    location?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScoreConfigCreateManyTournamentInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StageUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutStageNestedInput
    teamStats?: TeamStatsUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutStageNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutStageNestedInput
  }

  export type StageUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    teamsPerAlliance?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUpdateManyWithoutTeamNestedInput
    teamStats?: TeamStatsUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutTeamNestedInput
    teamStats?: TeamStatsUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamNumber?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    teamLead?: NullableStringFieldUpdateOperationsInput | string | null
    teamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    teamMembers?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamStatsNestedInput
    stage?: StageUpdateOneWithoutTeamStatsNestedInput
  }

  export type TeamStatsUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUpdateManyWithoutFieldNestedInput
    fieldDisplay?: FieldDisplayUpdateOneWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    matches?: MatchUncheckedUpdateManyWithoutFieldNestedInput
    fieldDisplay?: FieldDisplayUncheckedUpdateOneWithoutFieldNestedInput
  }

  export type FieldUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    number?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreConfigUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreElements?: ScoreElementUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreElements?: ScoreElementUncheckedUpdateManyWithoutScoreConfigNestedInput
    bonusConditions?: BonusConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
    penaltyConditions?: PenaltyConditionUncheckedUpdateManyWithoutScoreConfigNestedInput
  }

  export type ScoreConfigUncheckedUpdateManyWithoutTournamentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyStageInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    fieldId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
  }

  export type TeamStatsCreateManyStageInput = {
    id?: string
    teamId: string
    tournamentId: string
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    field?: FieldUpdateOneWithoutMatchesNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    fieldId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamStatsNestedInput
    tournament?: TournamentUpdateOneRequiredWithoutTeamStatsNestedInput
  }

  export type TeamStatsUncheckedUpdateWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUncheckedUpdateManyWithoutStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AllianceCreateManyMatchInput = {
    id?: string
    color: $Enums.AllianceColor
    score?: number
    autoScore?: number
    driveScore?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchRefereeCreateManyMatchInput = {
    id?: string
    userId: string
    role: $Enums.UserRole
    position?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreCreateManyMatchInput = {
    id?: string
    allianceId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FieldDisplayCreateManyCurrentMatchInput = {
    id?: string
    fieldId: string
    displayState?: $Enums.DisplayState
    customMessage?: string | null
    lastUpdatedBy?: string | null
    autoAdvance?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AllianceUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUpdateManyWithoutAllianceNestedInput
    matchScores?: MatchScoreUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamAlliances?: TeamAllianceUncheckedUpdateManyWithoutAllianceNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutAllianceNestedInput
  }

  export type AllianceUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    color?: EnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor
    score?: IntFieldUpdateOperationsInput | number
    autoScore?: IntFieldUpdateOperationsInput | number
    driveScore?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMatchRefereesNestedInput
  }

  export type MatchRefereeUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchRefereeUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    position?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliance?: AllianceUpdateOneRequiredWithoutMatchScoresNestedInput
    scoreElement?: ScoreElementUpdateOneRequiredWithoutMatchScoresNestedInput
  }

  export type MatchScoreUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayUpdateWithoutCurrentMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    field?: FieldUpdateOneRequiredWithoutFieldDisplayNestedInput
    lastUpdatedUser?: UserUpdateOneWithoutFieldDisplaysNestedInput
  }

  export type FieldDisplayUncheckedUpdateWithoutCurrentMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FieldDisplayUncheckedUpdateManyWithoutCurrentMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldId?: StringFieldUpdateOperationsInput | string
    displayState?: EnumDisplayStateFieldUpdateOperationsInput | $Enums.DisplayState
    customMessage?: NullableStringFieldUpdateOperationsInput | string | null
    lastUpdatedBy?: NullableStringFieldUpdateOperationsInput | string | null
    autoAdvance?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceCreateManyAllianceInput = {
    id?: string
    teamId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreCreateManyAllianceInput = {
    id?: string
    matchId: string
    scoreElementId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceUpdateWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutTeamAlliancesNestedInput
  }

  export type TeamAllianceUncheckedUpdateWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceUncheckedUpdateManyWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUpdateWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutMatchScoresNestedInput
    scoreElement?: ScoreElementUpdateOneRequiredWithoutMatchScoresNestedInput
  }

  export type MatchScoreUncheckedUpdateWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUncheckedUpdateManyWithoutAllianceInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    scoreElementId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceCreateManyTeamInput = {
    id?: string
    allianceId: string
    stationPosition?: number
    isSurrogate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamStatsCreateManyTeamInput = {
    id?: string
    tournamentId: string
    stageId?: string | null
    wins?: number
    losses?: number
    ties?: number
    pointsScored?: number
    pointsConceded?: number
    matchesPlayed?: number
    rankingPoints?: number
    opponentWinPercentage?: number
    pointDifferential?: number
    rank?: number | null
    tiebreaker1?: number
    tiebreaker2?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamAllianceUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliance?: AllianceUpdateOneRequiredWithoutTeamAlliancesNestedInput
  }

  export type TeamAllianceUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamAllianceUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    stationPosition?: IntFieldUpdateOperationsInput | number
    isSurrogate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tournament?: TournamentUpdateOneRequiredWithoutTeamStatsNestedInput
    stage?: StageUpdateOneWithoutTeamStatsNestedInput
  }

  export type TeamStatsUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamStatsUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    tournamentId?: StringFieldUpdateOperationsInput | string
    stageId?: NullableStringFieldUpdateOperationsInput | string | null
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ties?: IntFieldUpdateOperationsInput | number
    pointsScored?: IntFieldUpdateOperationsInput | number
    pointsConceded?: IntFieldUpdateOperationsInput | number
    matchesPlayed?: IntFieldUpdateOperationsInput | number
    rankingPoints?: IntFieldUpdateOperationsInput | number
    opponentWinPercentage?: FloatFieldUpdateOperationsInput | number
    pointDifferential?: IntFieldUpdateOperationsInput | number
    rank?: NullableIntFieldUpdateOperationsInput | number | null
    tiebreaker1?: FloatFieldUpdateOperationsInput | number
    tiebreaker2?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateManyFieldInput = {
    id?: string
    matchNumber: number
    roundNumber?: number | null
    status?: $Enums.MatchState
    startTime?: Date | string | null
    scheduledTime?: Date | string | null
    endTime?: Date | string | null
    duration?: number | null
    winningAlliance?: $Enums.AllianceColor | null
    stageId: string
    scoredById?: string | null
    roundType?: $Enums.MatchRoundType | null
    scheduleId?: string | null
    matchType?: $Enums.MatchType
    matchDuration?: number | null
    updatedAt?: Date | string
  }

  export type MatchUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stage?: StageUpdateOneRequiredWithoutMatchesNestedInput
    alliances?: AllianceUpdateManyWithoutMatchNestedInput
    scoredBy?: UserUpdateOneWithoutScoredMatchesNestedInput
    referees?: MatchRefereeUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    alliances?: AllianceUncheckedUpdateManyWithoutMatchNestedInput
    referees?: MatchRefereeUncheckedUpdateManyWithoutMatchNestedInput
    matchScores?: MatchScoreUncheckedUpdateManyWithoutMatchNestedInput
    fieldDisplays?: FieldDisplayUncheckedUpdateManyWithoutCurrentMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutFieldInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchNumber?: IntFieldUpdateOperationsInput | number
    roundNumber?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMatchStateFieldUpdateOperationsInput | $Enums.MatchState
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    winningAlliance?: NullableEnumAllianceColorFieldUpdateOperationsInput | $Enums.AllianceColor | null
    stageId?: StringFieldUpdateOperationsInput | string
    scoredById?: NullableStringFieldUpdateOperationsInput | string | null
    roundType?: NullableEnumMatchRoundTypeFieldUpdateOperationsInput | $Enums.MatchRoundType | null
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    matchType?: EnumMatchTypeFieldUpdateOperationsInput | $Enums.MatchType
    matchDuration?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreElementCreateManyScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    pointsPerUnit: number
    category?: string | null
    elementType: $Enums.ElementType
    displayOrder: number
    icon?: string | null
    color?: string | null
  }

  export type BonusConditionCreateManyScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    bonusPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type PenaltyConditionCreateManyScoreConfigInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    penaltyPoints: number
    condition: JsonNullValueInput | InputJsonValue
    displayOrder: number
  }

  export type ScoreElementUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    matchScores?: MatchScoreUpdateManyWithoutScoreElementNestedInput
  }

  export type ScoreElementUncheckedUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    matchScores?: MatchScoreUncheckedUpdateManyWithoutScoreElementNestedInput
  }

  export type ScoreElementUncheckedUpdateManyWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    pointsPerUnit?: IntFieldUpdateOperationsInput | number
    category?: NullableStringFieldUpdateOperationsInput | string | null
    elementType?: EnumElementTypeFieldUpdateOperationsInput | $Enums.ElementType
    displayOrder?: IntFieldUpdateOperationsInput | number
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BonusConditionUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BonusConditionUncheckedUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type BonusConditionUncheckedUpdateManyWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    bonusPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionUncheckedUpdateWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type PenaltyConditionUncheckedUpdateManyWithoutScoreConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    penaltyPoints?: IntFieldUpdateOperationsInput | number
    condition?: JsonNullValueInput | InputJsonValue
    displayOrder?: IntFieldUpdateOperationsInput | number
  }

  export type MatchScoreCreateManyScoreElementInput = {
    id?: string
    matchId: string
    allianceId: string
    units: number
    totalPoints: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchScoreUpdateWithoutScoreElementInput = {
    id?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutMatchScoresNestedInput
    alliance?: AllianceUpdateOneRequiredWithoutMatchScoresNestedInput
  }

  export type MatchScoreUncheckedUpdateWithoutScoreElementInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchScoreUncheckedUpdateManyWithoutScoreElementInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    allianceId?: StringFieldUpdateOperationsInput | string
    units?: IntFieldUpdateOperationsInput | number
    totalPoints?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}